
zephyr.elf:     file format elf32-xtensa-le


Disassembly of section .iram0.vectors:

40080000 <_WindowOverflow4>:

    .org    0x0
    .global _WindowOverflow4
_WindowOverflow4:

    s32e    a0, a5, -16     /* save a0 to call[j+1]'s stack frame */
40080000:	49c500        	s32e	a0, a5, -16
    s32e    a1, a5, -12     /* save a1 to call[j+1]'s stack frame */
40080003:	49d510        	s32e	a1, a5, -12
    s32e    a2, a5,  -8     /* save a2 to call[j+1]'s stack frame */
40080006:	49e520        	s32e	a2, a5, -8
    s32e    a3, a5,  -4     /* save a3 to call[j+1]'s stack frame */
40080009:	49f530        	s32e	a3, a5, -4
    rfwo                    /* rotates back to call[i] position */
4008000c:	003400        	rfwo
	...

40080040 <_WindowUnderflow4>:

    .org    0x40
    .global _WindowUnderflow4
_WindowUnderflow4:

    l32e    a0, a5, -16     /* restore a0 from call[i+1]'s stack frame */
40080040:	09c500        	l32e	a0, a5, -16
    l32e    a1, a5, -12     /* restore a1 from call[i+1]'s stack frame */
40080043:	09d510        	l32e	a1, a5, -12
    l32e    a2, a5,  -8     /* restore a2 from call[i+1]'s stack frame */
40080046:	09e520        	l32e	a2, a5, -8
    l32e    a3, a5,  -4     /* restore a3 from call[i+1]'s stack frame */
40080049:	09f530        	l32e	a3, a5, -4
    rfwu
4008004c:	003500        	rfwu
	...

40080050 <_xt_alloca_exc>:

    .align  4
    .global _xt_alloca_exc
_xt_alloca_exc:

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
40080050:	034800        	rsr.windowbase	a0
    rotw    -1      /* WINDOWBASE goes to a4, new a0-a3 are scratch */
40080053:	4080f0        	rotw	-1
    rsr     a2, PS
40080056:	03e620        	rsr.ps	a2
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
40080059:	343820        	extui	a3, a2, 8, 4
    xor     a3, a3, a4    /* bits changed from old to current windowbase */
4008005c:	303340        	xor	a3, a3, a4
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
4008005f:	03d140        	rsr.excsave1	a4
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
40080062:	113380        	slli	a3, a3, 8
    xor     a2, a2, a3      /* flip changed bits in old window base */
40080065:	302230        	xor	a2, a2, a3
    wsr     a2, PS          /* update PS.OWB to new window base */
40080068:	13e620        	wsr.ps	a2
    rsync
4008006b:	002010        	rsync

    _bbci.l a4, 31, _WindowUnderflow4
4008006e:	ce74f7        	bbci	a4, 31, 40080040 <_WindowUnderflow4>
    rotw    -1              /* original a0 goes to a8 */
40080071:	4080f0        	rotw	-1
    _bbci.l a8, 30, _WindowUnderflow8
40080074:	4878e7        	bbci	a8, 30, 400800c0 <_WindowUnderflow8>
    rotw    -1
40080077:	4080f0        	rotw	-1
    j               _WindowUnderflow12
4008007a:	003086        	j	40080140 <_WindowUnderflow12>
4008007d:	000000        	ill

40080080 <_WindowOverflow8>:

    .org    0x80
    .global _WindowOverflow8
_WindowOverflow8:

    s32e    a0, a9, -16     /* save a0 to call[j+1]'s stack frame */
40080080:	49c900        	s32e	a0, a9, -16
    l32e    a0, a1, -12     /* a0 <- call[j-1]'s sp
40080083:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1, a9, -12     /* save a1 to call[j+1]'s stack frame */
40080086:	49d910        	s32e	a1, a9, -12
    s32e    a2, a9,  -8     /* save a2 to call[j+1]'s stack frame */
40080089:	49e920        	s32e	a2, a9, -8
    s32e    a3, a9,  -4     /* save a3 to call[j+1]'s stack frame */
4008008c:	49f930        	s32e	a3, a9, -4
    s32e    a4, a0, -32     /* save a4 to call[j]'s stack frame */
4008008f:	498040        	s32e	a4, a0, -32
    s32e    a5, a0, -28     /* save a5 to call[j]'s stack frame */
40080092:	499050        	s32e	a5, a0, -28
    s32e    a6, a0, -24     /* save a6 to call[j]'s stack frame */
40080095:	49a060        	s32e	a6, a0, -24
    s32e    a7, a0, -20     /* save a7 to call[j]'s stack frame */
40080098:	49b070        	s32e	a7, a0, -20
    rfwo                    /* rotates back to call[i] position */
4008009b:	003400        	rfwo
	...

400800c0 <_WindowUnderflow8>:

    .org    0xC0
    .global _WindowUnderflow8
_WindowUnderflow8:

    l32e    a0, a9, -16     /* restore a0 from call[i+1]'s stack frame */
400800c0:	09c900        	l32e	a0, a9, -16
    l32e    a1, a9, -12     /* restore a1 from call[i+1]'s stack frame */
400800c3:	09d910        	l32e	a1, a9, -12
    l32e    a2, a9,  -8     /* restore a2 from call[i+1]'s stack frame */
400800c6:	09e920        	l32e	a2, a9, -8
    l32e    a7, a1, -12     /* a7 <- call[i-1]'s sp
400800c9:	09d170        	l32e	a7, a1, -12
                               (used to find end of call[i]'s frame) */
    l32e    a3, a9,  -4     /* restore a3 from call[i+1]'s stack frame */
400800cc:	09f930        	l32e	a3, a9, -4
    l32e    a4, a7, -32     /* restore a4 from call[i]'s stack frame */
400800cf:	098740        	l32e	a4, a7, -32
    l32e    a5, a7, -28     /* restore a5 from call[i]'s stack frame */
400800d2:	099750        	l32e	a5, a7, -28
    l32e    a6, a7, -24     /* restore a6 from call[i]'s stack frame */
400800d5:	09a760        	l32e	a6, a7, -24
    l32e    a7, a7, -20     /* restore a7 from call[i]'s stack frame */
400800d8:	09b770        	l32e	a7, a7, -20
    rfwu
400800db:	003500        	rfwu
	...

40080100 <_WindowOverflow12>:

    .org    0x100
    .global _WindowOverflow12
_WindowOverflow12:

    s32e    a0,  a13, -16   /* save a0 to call[j+1]'s stack frame */
40080100:	49cd00        	s32e	a0, a13, -16
    l32e    a0,  a1,  -12   /* a0 <- call[j-1]'s sp
40080103:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1,  a13, -12   /* save a1 to call[j+1]'s stack frame */
40080106:	49dd10        	s32e	a1, a13, -12
    s32e    a2,  a13,  -8   /* save a2 to call[j+1]'s stack frame */
40080109:	49ed20        	s32e	a2, a13, -8
    s32e    a3,  a13,  -4   /* save a3 to call[j+1]'s stack frame */
4008010c:	49fd30        	s32e	a3, a13, -4
    s32e    a4,  a0,  -48   /* save a4 to end of call[j]'s stack frame */
4008010f:	494040        	s32e	a4, a0, -48
    s32e    a5,  a0,  -44   /* save a5 to end of call[j]'s stack frame */
40080112:	495050        	s32e	a5, a0, -44
    s32e    a6,  a0,  -40   /* save a6 to end of call[j]'s stack frame */
40080115:	496060        	s32e	a6, a0, -40
    s32e    a7,  a0,  -36   /* save a7 to end of call[j]'s stack frame */
40080118:	497070        	s32e	a7, a0, -36
    s32e    a8,  a0,  -32   /* save a8 to end of call[j]'s stack frame */
4008011b:	498080        	s32e	a8, a0, -32
    s32e    a9,  a0,  -28   /* save a9 to end of call[j]'s stack frame */
4008011e:	499090        	s32e	a9, a0, -28
    s32e    a10, a0,  -24   /* save a10 to end of call[j]'s stack frame */
40080121:	49a0a0        	s32e	a10, a0, -24
    s32e    a11, a0,  -20   /* save a11 to end of call[j]'s stack frame */
40080124:	49b0b0        	s32e	a11, a0, -20
    rfwo                    /* rotates back to call[i] position */
40080127:	003400        	rfwo
	...

40080140 <_WindowUnderflow12>:

    .org 0x140
    .global _WindowUnderflow12
_WindowUnderflow12:

    l32e    a0,  a13, -16 /* restore a0 from call[i+1]'s stack frame */
40080140:	09cd00        	l32e	a0, a13, -16
    l32e    a1,  a13, -12 /* restore a1 from call[i+1]'s stack frame */
40080143:	09dd10        	l32e	a1, a13, -12
    l32e    a2,  a13,  -8 /* restore a2 from call[i+1]'s stack frame */
40080146:	09ed20        	l32e	a2, a13, -8
    l32e    a11, a1,  -12 /* a11 <- call[i-1]'s sp
40080149:	09d1b0        	l32e	a11, a1, -12
                           * (used to find end of call[i]'s frame) */
    l32e    a3,  a13,  -4 /* restore a3 from call[i+1]'s stack frame */
4008014c:	09fd30        	l32e	a3, a13, -4
    l32e    a4,  a11, -48 /* restore a4 from end of call[i]'s stack frame */
4008014f:	094b40        	l32e	a4, a11, -48
    l32e    a5,  a11, -44 /* restore a5 from end of call[i]'s stack frame */
40080152:	095b50        	l32e	a5, a11, -44
    l32e    a6,  a11, -40 /* restore a6 from end of call[i]'s stack frame */
40080155:	096b60        	l32e	a6, a11, -40
    l32e    a7,  a11, -36 /* restore a7 from end of call[i]'s stack frame */
40080158:	097b70        	l32e	a7, a11, -36
    l32e    a8,  a11, -32 /* restore a8 from end of call[i]'s stack frame */
4008015b:	098b80        	l32e	a8, a11, -32
    l32e    a9,  a11, -28 /* restore a9 from end of call[i]'s stack frame */
4008015e:	099b90        	l32e	a9, a11, -28
    l32e    a10, a11, -24 /* restore a10 from end of call[i]'s stack
40080161:	09aba0        	l32e	a10, a11, -24
    		       * frame */
    l32e    a11, a11, -20   /* restore a11 from end of call[i]'s stack
40080164:	09bbb0        	l32e	a11, a11, -20
    			 * frame */
    rfwu
40080167:	003500        	rfwu
	...

40080180 <_Level2Vector>:
 */

DEF_EXCINT 1, _handle_excint, xtensa_excint1_c

#if XCHAL_NMILEVEL >= 2
DEF_EXCINT 2, _handle_excint, xtensa_int2_c
40080180:	c4c112        	addi	a1, a1, -60
40080183:	7109      	s32i.n	a0, a1, 28
40080185:	9129      	s32i.n	a2, a1, 36
40080187:	a139      	s32i.n	a3, a1, 40
40080189:	03c200        	rsr.eps2	a0
4008018c:	5109      	s32i.n	a0, a1, 20
4008018e:	03b200        	rsr.epc2	a0
40080191:	6109      	s32i.n	a0, a1, 24
40080193:	000246        	j	400801a0 <_after_imms2>
	...

40080198 <_handle_excint_imm2>:
40080198:	177c      	movi.n	a7, -15
4008019a:	4008      	l32i.n	a0, a0, 16

4008019c <_c_handler_imm2>:
4008019c:	18b8      	l32i.n	a11, a8, 4
4008019e:	4008      	l32i.n	a0, a0, 16

400801a0 <_after_imms2>:
400801a0:	ffff21        	l32r	a2, 4008019c <_c_handler_imm2>
400801a3:	fffd01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801a6:	0000a0        	jx	a0
	...

400801c0 <_Level3Vector>:
#endif

#if XCHAL_NMILEVEL >= 3
DEF_EXCINT 3, _handle_excint, xtensa_int3_c
400801c0:	c4c112        	addi	a1, a1, -60
400801c3:	7109      	s32i.n	a0, a1, 28
400801c5:	9129      	s32i.n	a2, a1, 36
400801c7:	a139      	s32i.n	a3, a1, 40
400801c9:	03c300        	rsr.eps3	a0
400801cc:	5109      	s32i.n	a0, a1, 20
400801ce:	03b300        	rsr.epc3	a0
400801d1:	6109      	s32i.n	a0, a1, 24
400801d3:	000146        	j	400801dc <_after_imms3>
	...

400801d8 <_c_handler_imm3>:
400801d8:	190c      	movi.n	a9, 1
400801da:	4008      	l32i.n	a0, a0, 16

400801dc <_after_imms3>:
400801dc:	ffff21        	l32r	a2, 400801d8 <_c_handler_imm3>
400801df:	ffee01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801e2:	0000a0        	jx	a0
	...

40080200 <_Level4Vector>:
#endif

#if XCHAL_NMILEVEL >= 4
DEF_EXCINT 4, _handle_excint, xtensa_int4_c
40080200:	c4c112        	addi	a1, a1, -60
40080203:	7109      	s32i.n	a0, a1, 28
40080205:	9129      	s32i.n	a2, a1, 36
40080207:	a139      	s32i.n	a3, a1, 40
40080209:	03c400        	rsr.eps4	a0
4008020c:	5109      	s32i.n	a0, a1, 20
4008020e:	03b400        	rsr.epc4	a0
40080211:	6109      	s32i.n	a0, a1, 24
40080213:	000146        	j	4008021c <_after_imms4>
	...

40080218 <_c_handler_imm4>:
40080218:	1988      	l32i.n	a8, a9, 4
4008021a:	4008      	l32i.n	a0, a0, 16

4008021c <_after_imms4>:
4008021c:	ffff21        	l32r	a2, 40080218 <_c_handler_imm4>
4008021f:	ffde01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080222:	0000a0        	jx	a0
	...

40080240 <_Level5Vector>:
#endif

#if XCHAL_NMILEVEL >= 5
DEF_EXCINT 5, _handle_excint, xtensa_int5_c
40080240:	c4c112        	addi	a1, a1, -60
40080243:	7109      	s32i.n	a0, a1, 28
40080245:	9129      	s32i.n	a2, a1, 36
40080247:	a139      	s32i.n	a3, a1, 40
40080249:	03c500        	rsr.eps5	a0
4008024c:	5109      	s32i.n	a0, a1, 20
4008024e:	03b500        	rsr.epc5	a0
40080251:	6109      	s32i.n	a0, a1, 24
40080253:	000146        	j	4008025c <_after_imms5>
	...

40080258 <_c_handler_imm5>:
40080258:	19ec      	bnez.n	a9, 4008027d <_after_imms5+0x21>
4008025a:	4008      	l32i.n	a0, a0, 16

4008025c <_after_imms5>:
4008025c:	ffff21        	l32r	a2, 40080258 <_c_handler_imm5>
4008025f:	ffce01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080262:	0000a0        	jx	a0
	...

40080280 <_Level6Vector>:
#endif

#if XCHAL_NMILEVEL >= 6
DEF_EXCINT 6, _handle_excint, xtensa_int6_c
40080280:	c4c112        	addi	a1, a1, -60
40080283:	7109      	s32i.n	a0, a1, 28
40080285:	9129      	s32i.n	a2, a1, 36
40080287:	a139      	s32i.n	a3, a1, 40
40080289:	03c600        	rsr.eps6	a0
4008028c:	5109      	s32i.n	a0, a1, 20
4008028e:	03b600        	rsr.epc6	a0
40080291:	6109      	s32i.n	a0, a1, 24
40080293:	000146        	j	4008029c <_after_imms6>
	...

40080298 <_c_handler_imm6>:
40080298:	081a44        	mula.dd.ll.ldinc	m1, a10, m0, m3
4008029b:	40          	.byte 0x40

4008029c <_after_imms6>:
4008029c:	ffff21        	l32r	a2, 40080298 <_c_handler_imm6>
4008029f:	ffbe01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802a2:	0000a0        	jx	a0
	...

400802c0 <_Level7Vector>:
#endif

#if XCHAL_NMILEVEL >= 7
DEF_EXCINT 7, _handle_excint, xtensa_int7_c
400802c0:	c4c112        	addi	a1, a1, -60
400802c3:	7109      	s32i.n	a0, a1, 28
400802c5:	9129      	s32i.n	a2, a1, 36
400802c7:	a139      	s32i.n	a3, a1, 40
400802c9:	03c700        	rsr.eps7	a0
400802cc:	5109      	s32i.n	a0, a1, 20
400802ce:	03b700        	rsr.epc7	a0
400802d1:	6109      	s32i.n	a0, a1, 24
400802d3:	000146        	j	400802dc <_after_imms7>
	...

400802d8 <_c_handler_imm7>:
400802d8:	1a5c      	movi.n	a10, 81
400802da:	4008      	l32i.n	a0, a0, 16

400802dc <_after_imms7>:
400802dc:	ffff21        	l32r	a2, 400802d8 <_c_handler_imm7>
400802df:	ffae01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802e2:	0000a0        	jx	a0
	...

40080300 <_KernelExceptionVector>:
 * out of simple caution in case app code clears the UM bit by mistake.
 */
.pushsection .KernelExceptionVector.text, "ax"
.global _KernelExceptionVector
_KernelExceptionVector:
	j _Level1Vector
40080300:	015906        	j	40080868 <_Level1Vector>
	...

40080340 <_Level1RealVector>:
	wsr.excsave1 a0
40080340:	13d100        	wsr.excsave1	a0
	rsr.exccause a0
40080343:	03e800        	rsr.exccause	a0
	bnei a0, EXCCAUSE_ALLOCA, _not_alloca
40080346:	025066        	bnei	a0, 5, 4008034c <_not_alloca>
	j _xt_alloca_exc
40080349:	ff40c6        	j	40080050 <_xt_alloca_exc>

4008034c <_not_alloca>:
	rsr.excsave1 a0
4008034c:	03d100        	rsr.excsave1	a0
	j _Level1Vector
4008034f:	014546        	j	40080868 <_Level1Vector>
	...

400803c0 <_DoubleExceptionVector>:
.pushsection .DoubleExceptionVector.text, "ax"
.global _DoubleExceptionVector
_DoubleExceptionVector:
#if XCHAL_HAVE_DEBUG
/* Signals an unhandled double exception */
1:	break	1, 4
400803c0:	004140        	break	1, 4
#else
1:
#endif
	j	1b
400803c3:	fffe46        	j	400803c0 <_DoubleExceptionVector>
	...

Disassembly of section text:

40080550 <__start-0x2b4>:
40080550:	080000        	lsx	f0, a0, a0
40080553:	095840        	l32e	a4, a8, -44
40080556:	3ffb      	addi.n	a3, a15, 15
40080558:	0658      	l32i.n	a5, a6, 0
4008055a:	3ffb      	addi.n	a3, a15, 15
4008055c:	808c      	beqz.n	a0, 40080568 <_iram_text_start+0x18>
4008055e:	483ff4        	mula.da.ll.ldinc	m3, a15, m0, a15
40080561:	3ff5f0        	f64cmph	a15, a5, a15, 3
40080564:	ff          	.byte 0xff
40080565:	bf          	.byte 0xbf
40080566:	ff          	.byte 0xff
40080567:	ff          	.byte 0xff
40080568:	040023        	lsi	f2, a0, 16
4008056b:	003000        	rfe
4008056e:	083ff0        	lsx	f3, a15, a15
40080571:	fb09      	s32i.n	a0, a11, 60
40080573:	3f          	.byte 0x3f
40080574:	fb0290        	f64addc	a9, a2, 0, 0
40080577:	3f          	.byte 0x3f
40080578:	fb0296        	bltz	a2, 4008052c <__init_APPLICATION_start+0xdc>
4008057b:	3f          	.byte 0x3f
4008057c:	029c      	beqz.n	a2, 40080590 <_iram_text_start+0x40>
4008057e:	3ffb      	addi.n	a3, a15, 15
40080580:	02bb      	addi.n	a0, a2, 11
40080582:	3ffb      	addi.n	a3, a15, 15
40080584:	fb02f1        	l32r	a15, 4007f18c <esp32_rom_gpio_matrix_out+0x75280>
40080587:	3f          	.byte 0x3f
40080588:	fb0327        	bnone	a3, a2, 40080587 <_iram_text_start+0x37>
4008058b:	3f          	.byte 0x3f
4008058c:	033d      	mov.n	a3, a3
4008058e:	3ffb      	addi.n	a3, a15, 15
40080590:	fb0366        	bnei	a3, -1, 4008058f <_iram_text_start+0x3f>
40080593:	3f          	.byte 0x3f
40080594:	fb0393        	lsi	f9, a3, 0x3ec
40080597:	3f          	.byte 0x3f
40080598:	03bd      	mov.n	a11, a3
4008059a:	3ffb      	addi.n	a3, a15, 15
4008059c:	fb03e4        	lsi	f14, a3, 0x3ec
4008059f:	3f          	.byte 0x3f
400805a0:	fb0427        	bnone	a4, a2, 4008059f <_iram_text_start+0x4f>
400805a3:	3f          	.byte 0x3f
400805a4:	5e          	.byte 0x5e
400805a5:	3ffb04        	lsi	f0, a11, 252
400805a8:	047b      	addi.n	a0, a4, 7
400805aa:	3ffb      	addi.n	a3, a15, 15
400805ac:	fb0492        	l8ui	a9, a4, 251
400805af:	3f          	.byte 0x3f
400805b0:	fb04a2        	l8ui	a10, a4, 251
400805b3:	3f          	.byte 0x3f
400805b4:	ae          	.byte 0xae
400805b5:	3ffb04        	lsi	f0, a11, 252
400805b8:	000000        	ill
400805bb:	3e          	.byte 0x3e
400805bc:	fb04c7        	bnone	a4, a12, 400805bb <_iram_text_start+0x6b>
400805bf:	3f          	.byte 0x3f
400805c0:	0009c4        	lsi	f12, a9, 0
400805c3:	04e300        	extui	a14, a0, 3, 1
400805c6:	3ffb      	addi.n	a3, a15, 15
400805c8:	0098      	l32i.n	a9, a0, 0
400805ca:	3ffb      	addi.n	a3, a15, 15
400805cc:	0b78      	l32i.n	a7, a11, 0
400805ce:	4008      	l32i.n	a0, a0, 16
400805d0:	ff          	.byte 0xff
400805d1:	7f          	.byte 0x7f
400805d2:	ff0000        	f64cmph	a0, a0, a0, 15
400805d5:	ff          	.byte 0xff
400805d6:	000003        	lsi	f0, a0, 0
400805d9:	000000        	ill
400805dc:	009200        	all4	b0, b0:b1:b2:b3
400805df:	04f440        	extui	a15, a4, 4, 1
400805e2:	3ffb      	addi.n	a3, a15, 15
400805e4:	fb08a0        	f64addc	a10, a8, 0, 0
400805e7:	3f          	.byte 0x3f
400805e8:	114c      	movi.n	a1, 65
400805ea:	4008      	l32i.n	a0, a0, 16
400805ec:	fb0150        	f64addc	a5, a1, 0, 0
400805ef:	3f          	.byte 0x3f
400805f0:	f48070        	extui	a8, a7, 0, 16
400805f3:	3f          	.byte 0x3f
400805f4:	0148      	l32i.n	a4, a1, 0
400805f6:	3ffb      	addi.n	a3, a15, 15
400805f8:	c4b400        	extui	a11, a0, 4, 13
400805fb:	600004        	lsi	f0, a0, 0x180
400805fe:	043ff6        	bgeui	a15, 3, 40080606 <_iram_text_start+0xb6>
40080601:	3ff660        	f64cmph	a15, a6, a6, 3
40080604:	ff          	.byte 0xff
40080605:	ff          	.byte 0xff
40080606:	ff          	.byte 0xff
40080607:	8000e7        	bnone	a0, a14, 4008058b <_iram_text_start+0x3b>
4008060a:	bf3ff4        	lsi	f15, a15, 0x2fc
4008060d:	fbfa      	add.n	a15, a11, a15
4008060f:	ff          	.byte 0xff
40080610:	807c      	movi.n	a0, -8
40080612:	ff3ff4        	lsi	f15, a15, 0x3fc
40080615:	ffffc7        	bbsi	a15, 28, 40080618 <_iram_text_start+0xc8>
40080618:	002000        	isync
4008061b:	04ff00        	extui	a15, a0, 15, 1
4008061e:	3ffb      	addi.n	a3, a15, 15
40080620:	003c      	movi.n	a0, 48
40080622:	003ff0        	lsi	f15, a15, 0
40080625:	080000        	lsx	f0, a0, a0
40080628:	6008      	l32i.n	a0, a0, 24
4008062a:	783ff6        	bgeui	a15, 3, 400806a6 <_iram_text_start+0x156>
4008062d:	400092        	l8ui	a9, a0, 64
40080630:	0041a4        	lsi	f10, a1, 0
40080633:	052a40        	extui	a2, a4, 26, 1
40080636:	3ffb      	addi.n	a3, a15, 15
40080638:	f49000        	extui	a9, a0, 0, 16
4008063b:	3f          	.byte 0x3f
4008063c:	000800        	lsi	f0, a8, 0
4008063f:	700000        	lsi	f0, a0, 0x1c0
40080642:	1d0000        	lsi	f0, a0, 116
40080645:	3ffb05        	call0	400c05f8 <_iram_text_end+0x3ca16>
40080648:	f44000        	extui	a4, a0, 0, 16
4008064b:	3f          	.byte 0x3f
4008064c:	fb08a4        	lsi	f10, a8, 0x3ec
4008064f:	3f          	.byte 0x3f
40080650:	7619f1        	l32r	a15, 4005deb4 <esp32_rom_gpio_matrix_out+0x53fa8>
40080653:	5dc005        	call0	400de254 <_iram_text_end+0x5a672>
40080656:	000000        	ill
40080659:	000080        	ret
4008065c:	bb0b      	addi.n	a11, a11, -1
4008065e:	bf0002        	l8ui	a0, a0, 191
40080661:	005d      	mov.n	a5, a0
40080663:	177700        	lsi	f0, a7, 92
40080666:	4008      	l32i.n	a0, a0, 16
40080668:	0eec      	bnez.n	a14, 4008068c <_iram_text_start+0x13c>
4008066a:	4008      	l32i.n	a0, a0, 16
4008066c:	050020        	extui	a0, a2, 16, 1
4008066f:	000000        	ill
40080672:	0008      	l32i.n	a0, a0, 0
40080674:	100000        	and	a0, a0, a0
40080677:	000000        	ill
4008067a:	500020        	lsi	f2, a0, 0x140
4008067d:	400804        	lsi	f0, a8, 0x100
40080680:	400000        	ssr	a0
40080683:	000000        	ill
40080686:	000080        	ret
40080689:	200000        	or	a0, a0, a0
4008068c:	408800        	lsi	f0, a8, 0x100
4008068f:	000000        	ill
40080692:	000100        	lsi	f0, a1, 0
40080695:	020000        	andb	b0, b0, b0
40080698:	000000        	ill
4008069b:	000010        	lsi	f1, a0, 0
4008069e:	004000        	break	0, 0
400806a1:	030000        	rsr.lbeg	a0
400806a4:	010000        	slli	a0, a0, 32
400806a7:	000000        	ill
400806aa:	000400        	lsi	f0, a4, 0
400806ad:	800000        	add	a0, a0, a0
400806b0:	004000        	break	0, 0
400806b3:	100000        	and	a0, a0, a0
400806b6:	000000        	ill
400806b9:	000200        	lsi	f0, a2, 0
400806bc:	040000        	extui	a0, a0, 0, 1
400806bf:	300000        	xor	a0, a0, a0
400806c2:	ac0000        	lsi	f0, a0, 0x2b0
400806c5:	3ffb00        	f64cmph	a15, a11, a0, 3
400806c8:	060000        	lsi	f0, a0, 24
400806cb:	102200        	and	a2, a2, a0
400806ce:	0ffd      	mov.n	a15, a15
400806d0:	7f          	.byte 0x7f
400806d1:	fc1c      	movi.n	a12, 31
400806d3:	ff          	.byte 0xff
400806d4:	fb0050        	f64addc	a5, a0, 0, 0
400806d7:	3f          	.byte 0x3f
400806d8:	fb0040        	f64addc	a4, a0, 0, 0
400806db:	3f          	.byte 0x3f
400806dc:	fb0523        	lsi	f2, a5, 0x3ec
400806df:	3f          	.byte 0x3f
400806e0:	fb0950        	f64addc	a5, a9, 0, 0
400806e3:	3f          	.byte 0x3f
400806e4:	681c      	movi.n	a8, 22
400806e6:	2c4000        	lsi	f0, a0, 176
400806e9:	3ff530        	f64cmph	a15, a5, a3, 3
400806ec:	f53024        	lsi	f2, a0, 0x3d4
400806ef:	3f          	.byte 0x3f
400806f0:	3018      	l32i.n	a1, a0, 12
400806f2:	ff3ff5        	call12	4007faf0 <esp32_rom_gpio_matrix_out+0x75be4>
400806f5:	cf          	.byte 0xcf
400806f6:	ff          	.byte 0xff
400806f7:	ff          	.byte 0xff
400806f8:	301c      	movi.n	a0, 19
400806fa:	5c6001        	l32r	a0, 4005787c <esp32_rom_gpio_matrix_out+0x4d970>
400806fd:	3ffb05        	call0	400c06b0 <_iram_text_end+0x3cace>
40080700:	fb0563        	lsi	f6, a5, 0x3ec
40080703:	3f          	.byte 0x3f
40080704:	000a16        	beqz	a10, 40080708 <_iram_text_start+0x1b8>
40080707:	9f0c00        	f64cmph	a0, a12, a0, 9
4008070a:	dc4000        	lsi	f0, a0, 0x370
4008070d:	9e          	.byte 0x9e
4008070e:	104000        	and	a4, a0, a0
40080711:	3ff530        	f64cmph	a15, a5, a3, 3
40080714:	f53004        	lsi	f0, a0, 0x3d4
40080717:	3f          	.byte 0x3f
40080718:	ff          	.byte 0xff
40080719:	fffff7        	bbsi	a15, 31, 4008071c <_iram_text_start+0x1cc>
4008071c:	018c      	beqz.n	a1, 40080720 <_iram_text_start+0x1d0>
4008071e:	3ffb      	addi.n	a3, a15, 15
40080720:	f53000        	extui	a3, a0, 16, 16
40080723:	3f          	.byte 0x3f
40080724:	3038      	l32i.n	a3, a0, 12
40080726:	403ff5        	call12	400c0b24 <_iram_text_end+0x3cf42>
40080729:	3ff530        	f64cmph	a15, a5, a3, 3
4008072c:	f53044        	lsi	f4, a0, 0x3d4
4008072f:	3f          	.byte 0x3f
40080730:	3048      	l32i.n	a4, a0, 12
40080732:	4c3ff5        	call12	400ccb30 <_iram_text_end+0x48f4e>
40080735:	3ff530        	f64cmph	a15, a5, a3, 3
40080738:	f53030        	extui	a3, a3, 16, 16
4008073b:	3f          	.byte 0x3f
4008073c:	f53034        	lsi	f3, a0, 0x3d4
4008073f:	3f          	.byte 0x3f
40080740:	300c      	movi.n	a0, 3
40080742:	403ff5        	call12	400c0b40 <_iram_text_end+0x3cf5e>
40080745:	030d      	mov.n	a0, a3
40080747:	302800        	xor	a2, a8, a0
4008074a:	e83ff5        	call12	40068b48 <esp32_rom_gpio_matrix_out+0x5ec3c>
4008074d:	000003        	lsi	f0, a0, 0
40080750:	f53020        	extui	a3, a2, 16, 16
40080753:	3f          	.byte 0x3f
40080754:	0f4240        	f64cmph	a4, a2, a4, 0
40080757:	86a000        	lsi	f0, a0, 0x218
4008075a:	800001        	l32r	a0, 4006075c <esp32_rom_gpio_matrix_out+0x56850>
4008075d:	061a      	add.n	a0, a6, a1
4008075f:	e14000        	lsi	f0, a0, 0x384
40080762:	400033        	lsi	f3, a0, 0x100
40080765:	4c4b      	addi.n	a4, a12, 4
40080767:	300800        	xor	a0, a8, a0
4008076a:	ff3ff5        	call12	4007fb68 <esp32_rom_gpio_matrix_out+0x75c5c>
4008076d:	ff          	.byte 0xff
4008076e:	ff          	.byte 0xff
4008076f:	ff          	.byte 0xff
40080770:	3058      	l32i.n	a5, a0, 12
40080772:	003ff5        	call12	40080b70 <print_digits+0xac>
40080775:	0018      	l32i.n	a1, a0, 0
40080777:	140100        	extui	a0, a0, 1, 2
4008077a:	010000        	slli	a0, a0, 32
4008077d:	080000        	lsx	f0, a0, a0
40080780:	800101        	l32r	a0, 40060784 <esp32_rom_gpio_matrix_out+0x56878>
40080783:	027c00        	andb	b7, b12, b0
40080786:	3ffb      	addi.n	a3, a15, 15
40080788:	fb0000        	f64addc	a0, a0, 0, 0
4008078b:	3f          	.byte 0x3f
4008078c:	fb0080        	f64addc	a8, a0, 0, 0
4008078f:	3f          	.byte 0x3f
40080790:	fb0951        	l32r	a5, 4007f3b4 <esp32_rom_gpio_matrix_out+0x754a8>
40080793:	3f          	.byte 0x3f
40080794:	045d      	mov.n	a5, a4
40080796:	3ffb      	addi.n	a3, a15, 15
40080798:	056a      	add.n	a0, a5, a6
4008079a:	3ffb      	addi.n	a3, a15, 15
4008079c:	fb0586        	j	4007f3b6 <esp32_rom_gpio_matrix_out+0x754aa>
4008079f:	3f          	.byte 0x3f
400807a0:	07d8      	l32i.n	a13, a7, 0
400807a2:	3ffb      	addi.n	a3, a15, 15
400807a4:	0826f4        	lsi	f15, a6, 32
400807a7:	116040        	slli	a6, a0, 12
400807aa:	3ffb      	addi.n	a3, a15, 15
400807ac:	05ad      	mov.n	a10, a5
400807ae:	3ffb      	addi.n	a3, a15, 15
400807b0:	3398      	l32i.n	a9, a3, 12
400807b2:	4008      	l32i.n	a0, a0, 16
400807b4:	fb0960        	f64addc	a6, a9, 0, 0
400807b7:	3f          	.byte 0x3f
400807b8:	0658      	l32i.n	a5, a6, 0
400807ba:	3ffb      	addi.n	a3, a15, 15
400807bc:	fb2160        	f64addc	a6, a1, 1, 0
400807bf:	3f          	.byte 0x3f
400807c0:	fb0d60        	f64addc	a6, a13, 0, 0
400807c3:	3f          	.byte 0x3f
400807c4:	0718      	l32i.n	a1, a7, 0
400807c6:	3ffb      	addi.n	a3, a15, 15
400807c8:	fb2960        	f64addc	a6, a9, 1, 0
400807cb:	3f          	.byte 0x3f
400807cc:	0938      	l32i.n	a3, a9, 0
400807ce:	3ffb      	addi.n	a3, a15, 15
400807d0:	fb0904        	lsi	f0, a9, 0x3ec
400807d3:	3f          	.byte 0x3f
400807d4:	fb0900        	f64addc	a0, a9, 0, 0
400807d7:	3f          	.byte 0x3f
400807d8:	fb0944        	lsi	f4, a9, 0x3ec
400807db:	3f          	.byte 0x3f
400807dc:	fb0952        	l8ui	a5, a9, 251
400807df:	3f          	.byte 0x3f
400807e0:	082a64        	lsi	f6, a10, 32
400807e3:	000a40        	lsi	f4, a10, 0
400807e6:	520000        	lsi	f0, a0, 0x148
400807e9:	fb09      	s32i.n	a0, a11, 60
400807eb:	3f          	.byte 0x3f
400807ec:	fb0084        	lsi	f8, a0, 0x3ec
400807ef:	3f          	.byte 0x3f
400807f0:	094c      	movi.n	a9, 64
400807f2:	3ffb      	addi.n	a3, a15, 15
400807f4:	011c      	movi.n	a1, 16
400807f6:	3ffb      	addi.n	a3, a15, 15
400807f8:	ff          	.byte 0xff
400807f9:	ff          	.byte 0xff
400807fa:	ff          	.byte 0xff
400807fb:	7f          	.byte 0x7f
400807fc:	0898      	l32i.n	a9, a8, 0
400807fe:	3ffb      	addi.n	a3, a15, 15
40080800:	fb0084        	lsi	f8, a0, 0x3ec
40080803:	3f          	.byte 0x3f

40080804 <__start>:
 * This is written in C rather than assembly since, during the port bring up,
 * Zephyr is being booted by the Espressif bootloader.  With it, the C stack
 * is already set up.
 */
void __attribute__((section(".iram1"))) __start(void)
{
40080804:	004136        	entry	a1, 32
	extern uint32_t _init_start;
	extern uint32_t _bss_start;
	extern uint32_t _bss_end;

	/* Move the exception vector table to IRAM. */
	__asm__ __volatile__ (
40080807:	ff5281        	l32r	a8, 40080550 <_iram_text_start>
4008080a:	13e780        	wsr.vecbase	a8
		:
		: "r"(&_init_start));

	/* Zero out BSS.  Clobber _bss_start to avoid memset() elision. */
	(void)memset(&_bss_start, 0,
		     (&_bss_end - &_bss_start) * sizeof(_bss_start));
4008080d:	ff52a1        	l32r	a10, 40080558 <_iram_text_start+0x8>
	(void)memset(&_bss_start, 0,
40080810:	ff51c1        	l32r	a12, 40080554 <_iram_text_start+0x4>
40080813:	00a0b2        	movi	a11, 0
40080816:	c0cca0        	sub	a12, a12, a10
40080819:	02c4a5        	call8	40083464 <memset>
		: "memory");

	/* The watchdog timer is enabled in the bootloader.  We're done booting,
	 * so disable it.
	 */
	*wdt_rtc_reg &= ~RTC_CNTL_WDT_FLASHBOOT_MOD_EN;
4008081c:	ff5091        	l32r	a9, 4008055c <_iram_text_start+0xc>
4008081f:	ffaba2        	movi	a10, 0xfffffbff
40080822:	0020c0        	memw
40080825:	002982        	l32i	a8, a9, 0
40080828:	1088a0        	and	a8, a8, a10
4008082b:	0020c0        	memw
4008082e:	0989      	s32i.n	a8, a9, 0
	*wdt_timg_reg &= ~TIMG_WDT_FLASHBOOT_MOD_EN;
40080830:	ff4c91        	l32r	a9, 40080560 <_iram_text_start+0x10>
40080833:	ff4ca1        	l32r	a10, 40080564 <_iram_text_start+0x14>
40080836:	0020c0        	memw
40080839:	0988      	l32i.n	a8, a9, 0
4008083b:	1088a0        	and	a8, a8, a10
4008083e:	0020c0        	memw
40080841:	0989      	s32i.n	a8, a9, 0

	/* Disable normal interrupts. */
	__asm__ __volatile__ (
40080843:	ff4981        	l32r	a8, 40080568 <_iram_text_start+0x18>
40080846:	13e680        	wsr.ps	a8
		"wsr %0, PS"
		:
		: "r"(PS_INTLEVEL(XCHAL_EXCM_LEVEL) | PS_UM | PS_WOE));

	/* Disable CPU1 while we figure out how to have SMP in Zephyr. */
	*app_cpu_config_reg &= ~DPORT_APPCPU_CLKGATE_EN;
40080849:	ff4891        	l32r	a9, 4008056c <_iram_text_start+0x1c>
4008084c:	ea7c      	movi.n	a10, -2
4008084e:	0020c0        	memw
40080851:	0988      	l32i.n	a8, a9, 0
40080853:	1088a0        	and	a8, a8, a10
40080856:	0020c0        	memw
40080859:	006982        	s32i	a8, a9, 0

	/* Initialize the architecture CPU pointer.  Some of the
	 * initialization code wants a valid _current before
	 * arch_kernel_init() is invoked.
	 */
	__asm__ volatile("wsr.MISC0 %0; rsync" : : "r"(&_kernel.cpus[0]));
4008085c:	ff4581        	l32r	a8, 40080570 <_iram_text_start+0x20>
4008085f:	13f480        	wsr.misc0	a8
40080862:	002010        	rsync


	/* Start Zephyr */
	z_cstart();
40080865:	01ec65        	call8	4008272c <z_cstart>

40080868 <_Level1Vector>:
DEF_EXCINT 1, _handle_excint, xtensa_excint1_c
40080868:	c4c112        	addi	a1, a1, -60
4008086b:	7109      	s32i.n	a0, a1, 28
4008086d:	9129      	s32i.n	a2, a1, 36
4008086f:	a139      	s32i.n	a3, a1, 40
40080871:	03e600        	rsr.ps	a0
40080874:	026c      	movi.n	a2, -32
40080876:	100020        	and	a0, a0, a2
40080879:	5109      	s32i.n	a0, a1, 20
4008087b:	03b100        	rsr.epc1	a0
4008087e:	6109      	s32i.n	a0, a1, 24
40080880:	000206        	j	4008088c <_after_imms1>
	...

40080884 <_handle_excint_imm1>:
40080884:	177c      	movi.n	a7, -15
40080886:	4008      	l32i.n	a0, a0, 16

40080888 <_c_handler_imm1>:
40080888:	081a90        	lsx	f1, a10, a9
4008088b:	40          	.byte 0x40

4008088c <_after_imms1>:
4008088c:	ffff21        	l32r	a2, 40080888 <_c_handler_imm1>
4008088f:	fffd01        	l32r	a0, 40080884 <_handle_excint_imm1>
40080892:	0000a0        	jx	a0
40080895:	000000        	ill

40080898 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
40080898:	004136        	entry	a1, 32
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
4008089b:	0aa0b2        	movi	a11, 10
4008089e:	82a2b0        	mull	a10, a2, a11
400808a1:	b2b2b0        	mulsh	a11, a2, a11
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
400808a4:	025fe5        	call8	40082ea4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
}
400808a7:	202aa0        	or	a2, a10, a10
400808aa:	000090        	retw
400808ad:	000000        	ill

400808b0 <main>:

const float LM75A_DEGREES_RESOLUTION = 0.125;
const int LM75A_REG_ADDR_TEMP = 0;

void main(void)
{   
400808b0:	008136        	entry	a1, 64
	
	uint8_t cmp_data[16];
	uint8_t data[16];
	int i, ret;
	uint16_t temp = 0x00;
    uint8_t pointer = 0x00;
400808b3:	00a042        	movi	a4, 0
400808b6:	104142        	s8i	a4, a1, 16
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
400808b9:	ff2ea1        	l32r	a10, 40080574 <_iram_text_start+0x24>
400808bc:	01dba5        	call8	40082678 <z_impl_device_get_binding>
400808bf:	0a2d      	mov.n	a2, a10
400808c1:	ff2da1        	l32r	a10, 40080578 <_iram_text_start+0x28>
400808c4:	01db25        	call8	40082678 <z_impl_device_get_binding>
400808c7:	0a3d      	mov.n	a3, a10

	i2c_dev = device_get_binding(I2C_DEV);
	i2c_dev1 = device_get_binding(I2C_DEV1);
	if (!i2c_dev1) {
400808c9:	7acc      	bnez.n	a10, 400808d4 <main+0x24>
		printk("I2C: Device driver not found.\n");
400808cb:	ff2ca1        	l32r	a10, 4008057c <_iram_text_start+0x2c>
400808ce:	005fa5        	call8	40080ec8 <printk>
		printk("Read 0x%X from address 0x01.\n", data[0]);
	}
    */
	
	
}
400808d1:	f01d      	retw.n
400808d3:	2b6100        	oeq.s	b6, f1, f0
	printk("----------->> -------------------- <<---------------\n");
400808d6:	ff          	.byte 0xff
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808d7:	350c      	movi.n	a5, 3
	printk("----------->> -------------------- <<---------------\n");
400808d9:	06ad      	mov.n	a10, a6
400808db:	005ee5        	call8	40080ec8 <printk>
    printk("---------->>   *** I2C LM75A ***   <<--------------\n\n");
400808de:	ff29a1        	l32r	a10, 40080584 <_iram_text_start+0x34>
400808e1:	005e65        	call8	40080ec8 <printk>
	printk("I2C LM75A - Pruebas.\n");
400808e4:	ff29a1        	l32r	a10, 40080588 <_iram_text_start+0x38>
400808e7:	005e25        	call8	40080ec8 <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808ea:	8d4c      	movi.n	a13, 72
400808ec:	1c0c      	movi.n	a12, 1
400808ee:	10c1b2        	addi	a11, a1, 16
400808f1:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808f3:	104152        	s8i	a5, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808f6:	02b1a5        	call8	40083410 <i2c_write>
	k_msleep(5);
400808f9:	5a0c      	movi.n	a10, 5
400808fb:	fff9e5        	call8	40080898 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400808fe:	8d4c      	movi.n	a13, 72
40080900:	2c0c      	movi.n	a12, 2
40080902:	01bd      	mov.n	a11, a1
40080904:	02ad      	mov.n	a10, a2
40080906:	02aea5        	call8	400833f0 <i2c_read>
	k_msleep(5);
40080909:	5a0c      	movi.n	a10, 5
4008090b:	fff8e5        	call8	40080898 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
4008090e:	ff1f71        	l32r	a7, 4008058c <_iram_text_start+0x3c>
40080911:	0101c2        	l8ui	a12, a1, 1
40080914:	0001b2        	l8ui	a11, a1, 0
40080917:	07ad      	mov.n	a10, a7
40080919:	005ae5        	call8	40080ec8 <printk>
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
4008091c:	280c      	movi.n	a8, 2
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008091e:	8d4c      	movi.n	a13, 72
40080920:	1c0c      	movi.n	a12, 1
40080922:	10c1b2        	addi	a11, a1, 16
40080925:	02ad      	mov.n	a10, a2
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
40080927:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008092a:	02ae65        	call8	40083410 <i2c_write>
	k_msleep(5);
4008092d:	5a0c      	movi.n	a10, 5
4008092f:	fff6a5        	call8	40080898 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080932:	8d4c      	movi.n	a13, 72
40080934:	2c0c      	movi.n	a12, 2
40080936:	01bd      	mov.n	a11, a1
40080938:	02ad      	mov.n	a10, a2
4008093a:	02ab65        	call8	400833f0 <i2c_read>
	k_msleep(5);
4008093d:	5a0c      	movi.n	a10, 5
4008093f:	fff5a5        	call8	40080898 <k_msleep>
	printk("----->> Hysteresis - Thyst Register: %x|%x\n\n", data[0], data[1]);
40080942:	0101c2        	l8ui	a12, a1, 1
40080945:	0001b2        	l8ui	a11, a1, 0
40080948:	ff12a1        	l32r	a10, 40080590 <_iram_text_start+0x40>
4008094b:	0057e5        	call8	40080ec8 <printk>
	pointer = 0x01; //Configuration register pointer - 00h por defecto
4008094e:	180c      	movi.n	a8, 1
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080950:	8d4c      	movi.n	a13, 72
40080952:	1c0c      	movi.n	a12, 1
40080954:	10c1b2        	addi	a11, a1, 16
40080957:	02ad      	mov.n	a10, a2
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080959:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008095c:	02ab25        	call8	40083410 <i2c_write>
	k_msleep(5);
4008095f:	5a0c      	movi.n	a10, 5
40080961:	fff365        	call8	40080898 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 1, LM75A_DEFAULT_ADDRESS);
40080964:	8d4c      	movi.n	a13, 72
40080966:	1c0c      	movi.n	a12, 1
40080968:	01bd      	mov.n	a11, a1
4008096a:	02ad      	mov.n	a10, a2
4008096c:	02a825        	call8	400833f0 <i2c_read>
	k_msleep(5);
4008096f:	5a0c      	movi.n	a10, 5
40080971:	fff265        	call8	40080898 <k_msleep>
	printk("----->>  Configuration - Register %x|%x\n\n", data[0], data[1]);
40080974:	0101c2        	l8ui	a12, a1, 1
40080977:	0001b2        	l8ui	a11, a1, 0
4008097a:	ff06a1        	l32r	a10, 40080594 <_iram_text_start+0x44>
4008097d:	0054a5        	call8	40080ec8 <printk>
	printk("----->>  Writing - Tos Register %x|%x\n", data[0], data[1]);
40080980:	0101c2        	l8ui	a12, a1, 1
40080983:	0001b2        	l8ui	a11, a1, 0
40080986:	ff04a1        	l32r	a10, 40080598 <_iram_text_start+0x48>
40080989:	0053e5        	call8	40080ec8 <printk>
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
4008098c:	8d4c      	movi.n	a13, 72
4008098e:	3c0c      	movi.n	a12, 3
40080990:	01bd      	mov.n	a11, a1
40080992:	02ad      	mov.n	a10, a2
	data[1] = temp >> 8;//MSByte
40080994:	014142        	s8i	a4, a1, 1
	data[2] = (uint16_t)temp & 0x0F;//LSByte
40080997:	024142        	s8i	a4, a1, 2
	pointer = 0x03;
4008099a:	104152        	s8i	a5, a1, 16
	data[0] = pointer;
4008099d:	004152        	s8i	a5, a1, 0
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
400809a0:	02a6e5        	call8	40083410 <i2c_write>
	printk("----->>  Tos Register wrote temp: <%x>, MSByte <%x>, LSByte <%x>\n\n", temp, data[1], data[2]);
400809a3:	0201d2        	l8ui	a13, a1, 2
400809a6:	0101c2        	l8ui	a12, a1, 1
400809a9:	fefca1        	l32r	a10, 4008059c <_iram_text_start+0x4c>
400809ac:	0b3c      	movi.n	a11, 48
400809ae:	0051a5        	call8	40080ec8 <printk>
	k_msleep(5);
400809b1:	5a0c      	movi.n	a10, 5
400809b3:	ffee65        	call8	40080898 <k_msleep>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809b6:	8d4c      	movi.n	a13, 72
400809b8:	1c0c      	movi.n	a12, 1
400809ba:	10c1b2        	addi	a11, a1, 16
400809bd:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400809bf:	104152        	s8i	a5, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809c2:	02a4e5        	call8	40083410 <i2c_write>
	k_msleep(5);
400809c5:	5a0c      	movi.n	a10, 5
400809c7:	ffed25        	call8	40080898 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809ca:	8d4c      	movi.n	a13, 72
400809cc:	2c0c      	movi.n	a12, 2
400809ce:	01bd      	mov.n	a11, a1
400809d0:	02ad      	mov.n	a10, a2
400809d2:	02a1e5        	call8	400833f0 <i2c_read>
	k_msleep(5);
400809d5:	5a0c      	movi.n	a10, 5
400809d7:	ffec25        	call8	40080898 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400809da:	0101c2        	l8ui	a12, a1, 1
400809dd:	0001b2        	l8ui	a11, a1, 0
400809e0:	07ad      	mov.n	a10, a7
400809e2:	004e65        	call8	40080ec8 <printk>
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809e5:	8d4c      	movi.n	a13, 72
400809e7:	1c0c      	movi.n	a12, 1
400809e9:	10c1b2        	addi	a11, a1, 16
400809ec:	02ad      	mov.n	a10, a2
	pointer = 0x00; // Temp register pointer
400809ee:	104142        	s8i	a4, a1, 16
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809f1:	02a1e5        	call8	40083410 <i2c_write>
    printk("----------->> -------------------- <<---------------\n");
400809f4:	06ad      	mov.n	a10, a6
400809f6:	004d25        	call8	40080ec8 <printk>
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
400809f9:	fee9a1        	l32r	a10, 400805a0 <_iram_text_start+0x50>
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
400809fc:	747c      	movi.n	a4, -9
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
400809fe:	004ca5        	call8	40080ec8 <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080a01:	76a0d2        	movi	a13, 118
40080a04:	1c0c      	movi.n	a12, 1
40080a06:	10c1b2        	addi	a11, a1, 16
40080a09:	03ad      	mov.n	a10, a3
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
40080a0b:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080a0e:	02a025        	call8	40083410 <i2c_write>
	k_msleep(5);
40080a11:	5a0c      	movi.n	a10, 5
40080a13:	ffe865        	call8	40080898 <k_msleep>
	ret = i2c_read(i2c_dev1, &data[0], 4, BMP280_DEFAULT_ADDRESS);
40080a16:	76a0d2        	movi	a13, 118
40080a19:	4c0c      	movi.n	a12, 4
40080a1b:	01bd      	mov.n	a11, a1
40080a1d:	03ad      	mov.n	a10, a3
40080a1f:	029d25        	call8	400833f0 <i2c_read>
	k_msleep(5);
40080a22:	5a0c      	movi.n	a10, 5
40080a24:	ffe725        	call8	40080898 <k_msleep>
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080a27:	0301c2        	l8ui	a12, a1, 3
40080a2a:	0001b2        	l8ui	a11, a1, 0
40080a2d:	fedda1        	l32r	a10, 400805a4 <_iram_text_start+0x54>
    pointer = 0xD0; //Tos register pointer - 5000h por defecto
40080a30:	d0af42        	movi	a4, -48
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080a33:	004965        	call8	40080ec8 <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080a36:	76a0d2        	movi	a13, 118
40080a39:	1c0c      	movi.n	a12, 1
40080a3b:	10c1b2        	addi	a11, a1, 16
40080a3e:	03ad      	mov.n	a10, a3
    pointer = 0xD0; //Tos register pointer - 5000h por defecto
40080a40:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080a43:	029ce5        	call8	40083410 <i2c_write>
    k_msleep(5);
40080a46:	5a0c      	movi.n	a10, 5
40080a48:	ffe4e5        	call8	40080898 <k_msleep>
	ret = i2c_read(i2c_dev1, &data[0], 1, BMP280_DEFAULT_ADDRESS);
40080a4b:	01bd      	mov.n	a11, a1
40080a4d:	76a0d2        	movi	a13, 118
40080a50:	1c0c      	movi.n	a12, 1
40080a52:	03ad      	mov.n	a10, a3
40080a54:	0299a5        	call8	400833f0 <i2c_read>
	k_msleep(5);
40080a57:	5a0c      	movi.n	a10, 5
40080a59:	ffe3e5        	call8	40080898 <k_msleep>
	printk("----->> ID BMP280 %x\n\n", data[0]);
40080a5c:	0001b2        	l8ui	a11, a1, 0
40080a5f:	fed2a1        	l32r	a10, 400805a8 <_iram_text_start+0x58>
40080a62:	004665        	call8	40080ec8 <printk>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a65:	8d4c      	movi.n	a13, 72
40080a67:	2c0c      	movi.n	a12, 2
40080a69:	01bd      	mov.n	a11, a1
40080a6b:	02ad      	mov.n	a10, a2
40080a6d:	029825        	call8	400833f0 <i2c_read>
        if(~ret) {
40080a70:	050a26        	beqi	a10, -1, 40080a79 <main+0x1c9>
            printk("Succesful read\n");
40080a73:	fecea1        	l32r	a10, 400805ac <_iram_text_start+0x5c>
40080a76:	000086        	j	40080a7c <main+0x1cc>
            printk("Error read\n");
40080a79:	fecda1        	l32r	a10, 400805b0 <_iram_text_start+0x60>
40080a7c:	0044a5        	call8	40080ec8 <printk>
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a7f:	0101c2        	l8ui	a12, a1, 1
40080a82:	0001b2        	l8ui	a11, a1, 0
40080a85:	fecba1        	l32r	a10, 400805b4 <_iram_text_start+0x64>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a88:	80a042        	movi	a4, 128
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a8b:	0043e5        	call8	40080ec8 <printk>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a8e:	000182        	l8ui	a8, a1, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080a91:	fecaa1        	l32r	a10, 400805bc <_iram_text_start+0x6c>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a94:	113880        	slli	a3, a8, 8
40080a97:	010182        	l8ui	a8, a1, 1
40080a9a:	108840        	and	a8, a8, a4
40080a9d:	208830        	or	a8, a8, a3
        temp = temp * LM75A_DEGREES_RESOLUTION;
40080aa0:	418580        	srli	a8, a8, 5
40080aa3:	fec531        	l32r	a3, 400805b8 <_iram_text_start+0x68>
40080aa6:	ca0800        	float.s	f0, a8, 0
40080aa9:	fa1350        	wfr	f1, a3
40080aac:	2a0010        	mul.s	f0, f0, f1
40080aaf:	eab000        	utrunc.s	a11, f0, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080ab2:	f4b0b0        	extui	a11, a11, 0, 16
40080ab5:	004125        	call8	40080ec8 <printk>
        k_msleep(2500);
40080ab8:	fec2a1        	l32r	a10, 400805c0 <_iram_text_start+0x70>
40080abb:	ffdde5        	call8	40080898 <k_msleep>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080abe:	ffe8c6        	j	40080a65 <main+0x1b5>
40080ac1:	000000        	ill

40080ac4 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
40080ac4:	00a136        	entry	a1, 80
40080ac7:	049d      	mov.n	a9, a4
40080ac9:	744070        	extui	a4, a7, 0, 8
40080acc:	058d      	mov.n	a8, a5
40080ace:	8149      	s32i.n	a4, a1, 32
40080ad0:	500142        	l8ui	a4, a1, 80
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080ad3:	471c      	movi.n	a7, 20
		buf[i] = "0123456789abcdef"[num % base];
40080ad5:	315f60        	srai	a5, a6, 31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080ad8:	000e86        	j	40080b16 <print_digits+0x52>
40080adb:	000000        	ill
		buf[i] = "0123456789abcdef"[num % base];
40080ade:	80f170        	add	a15, a1, a7
40080ae1:	20c660        	or	a12, a6, a6
40080ae4:	05dd      	mov.n	a13, a5
40080ae6:	09ad      	mov.n	a10, a9
40080ae8:	08bd      	mov.n	a11, a8
40080aea:	b189      	s32i.n	a8, a1, 44
40080aec:	a199      	s32i.n	a9, a1, 40
40080aee:	0961f2        	s32i	a15, a1, 36
40080af1:	02e7e5        	call8	40083970 <__umoddi3>
40080af4:	feb4b1        	l32r	a11, 400805c4 <_iram_text_start+0x74>
40080af7:	91f8      	l32i.n	a15, a1, 36
40080af9:	abaa      	add.n	a10, a11, a10
40080afb:	000aa2        	l8ui	a10, a10, 0
		num /= base;
40080afe:	06cd      	mov.n	a12, a6
		buf[i] = "0123456789abcdef"[num % base];
40080b00:	004fa2        	s8i	a10, a15, 0
		num /= base;
40080b03:	a198      	l32i.n	a9, a1, 40
40080b05:	b188      	l32i.n	a8, a1, 44
40080b07:	09ad      	mov.n	a10, a9
40080b09:	08bd      	mov.n	a11, a8
40080b0b:	05dd      	mov.n	a13, a5
40080b0d:	02bf25        	call8	40083700 <__udivdi3>
40080b10:	0a9d      	mov.n	a9, a10
40080b12:	0b8d      	mov.n	a8, a11
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080b14:	770b      	addi.n	a7, a7, -1
40080b16:	20a980        	or	a10, a9, a8
40080b19:	fc1a56        	bnez	a10, 40080ade <print_digits+0x1a>
	}

	if (i == DIGITS_BUFLEN - 1) {
40080b1c:	451c      	movi.n	a5, 20
40080b1e:	079757        	bne	a7, a5, 40080b29 <print_digits+0x65>
		buf[i] = '0';
40080b21:	053c      	movi.n	a5, 48
40080b23:	144152        	s8i	a5, a1, 20
40080b26:	000046        	j	40080b2b <print_digits+0x67>
	} else {
		i++;
40080b29:	771b      	addi.n	a7, a7, 1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
40080b2b:	152182        	l32i	a8, a1, 84
40080b2e:	591c      	movi.n	a9, 21
40080b30:	878a      	add.n	a8, a7, a8
40080b32:	050c      	movi.n	a5, 0
40080b34:	1c1897        	beq	a8, a9, 40080b54 <print_digits+0x90>
40080b37:	ebc852        	addi	a5, a8, -21
40080b3a:	000206        	j	40080b46 <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
40080b3d:	03bd      	mov.n	a11, a3
40080b3f:	04ad      	mov.n	a10, a4
40080b41:	0002e0        	callx8	a2
	for (/**/; pad > 0 && pad_before; pad--) {
40080b44:	550b      	addi.n	a5, a5, -1
40080b46:	318f50        	srai	a8, a5, 31
40080b49:	c08850        	sub	a8, a8, a5
40080b4c:	0048d6        	bgez	a8, 40080b54 <print_digits+0x90>
40080b4f:	8168      	l32i.n	a6, a1, 32
40080b51:	fe8656        	bnez	a6, 40080b3d <print_digits+0x79>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b54:	561c      	movi.n	a6, 21
		out(buf[i], ctx);
40080b56:	817a      	add.n	a8, a1, a7
40080b58:	0008a2        	l8ui	a10, a8, 0
40080b5b:	20b330        	or	a11, a3, a3
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b5e:	01c772        	addi	a7, a7, 1
		out(buf[i], ctx);
40080b61:	0002e0        	callx8	a2
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b64:	ee9767        	bne	a7, a6, 40080b56 <print_digits+0x92>
40080b67:	000206        	j	40080b73 <print_digits+0xaf>
	}
	for (/**/; pad > 0; pad--) {
		out(pad_char, ctx);
40080b6a:	03bd      	mov.n	a11, a3
40080b6c:	04ad      	mov.n	a10, a4
40080b6e:	0002e0        	callx8	a2
	for (/**/; pad > 0; pad--) {
40080b71:	550b      	addi.n	a5, a5, -1
40080b73:	f315e6        	bgei	a5, 1, 40080b6a <print_digits+0xa6>
	}
}
40080b76:	f01d      	retw.n

40080b78 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
40080b78:	004136        	entry	a1, 32
	struct out_context *ctx = ctx_p;

	ctx->count++;
40080b7b:	0388      	l32i.n	a8, a3, 0
	return _char_out(c);
40080b7d:	02ad      	mov.n	a10, a2
	ctx->count++;
40080b7f:	881b      	addi.n	a8, a8, 1
40080b81:	0389      	s32i.n	a8, a3, 0
	return _char_out(c);
40080b83:	fe9131        	l32r	a3, 400805c8 <_iram_text_start+0x78>
40080b86:	002332        	l32i	a3, a3, 0
40080b89:	0003e0        	callx8	a3
}
40080b8c:	0a2d      	mov.n	a2, a10
40080b8e:	f01d      	retw.n

40080b90 <__printk_hook_install>:
{
40080b90:	004136        	entry	a1, 32
	_char_out = fn;
40080b93:	fe8d81        	l32r	a8, 400805c8 <_iram_text_start+0x78>
40080b96:	0829      	s32i.n	a2, a8, 0
}
40080b98:	f01d      	retw.n
	...

40080b9c <z_vprintk>:
{
40080b9c:	00a136        	entry	a1, 80
40080b9f:	9149      	s32i.n	a4, a1, 36
	char length_mod = 0;
40080ba1:	040c      	movi.n	a4, 0
{
40080ba3:	4159      	s32i.n	a5, a1, 16
40080ba5:	5169      	s32i.n	a6, a1, 20
40080ba7:	6179      	s32i.n	a7, a1, 24
40080ba9:	7159      	s32i.n	a5, a1, 28
40080bab:	8169      	s32i.n	a6, a1, 32
40080bad:	076d      	mov.n	a6, a7
	int min_width = -1;
40080baf:	f57c      	movi.n	a5, -1
	enum pad_type padding = PAD_NONE;
40080bb1:	047d      	mov.n	a7, a4
	int might_format = 0; /* 1 if encountered a '%' */
40080bb3:	048d      	mov.n	a8, a4
	while (*fmt) {
40080bb5:	00ba46        	j	40080ea2 <z_vprintk+0x306>
		if (!might_format) {
40080bb8:	08dc      	bnez.n	a8, 40080bcc <z_vprintk+0x30>
			if (*fmt != '%') {
40080bba:	592c      	movi.n	a9, 37
40080bbc:	029a97        	bne	a10, a9, 40080bc2 <z_vprintk+0x26>
40080bbf:	00ad86        	j	40080e79 <z_vprintk+0x2dd>
				out((int)*fmt, ctx);
40080bc2:	03bd      	mov.n	a11, a3
40080bc4:	a189      	s32i.n	a8, a1, 40
40080bc6:	0002e0        	callx8	a2
40080bc9:	008046        	j	40080dce <z_vprintk+0x232>
			switch (*fmt) {
40080bcc:	64a092        	movi	a9, 100
40080bcf:	029a97        	bne	a10, a9, 40080bd5 <z_vprintk+0x39>
40080bd2:	003186        	j	40080c9c <z_vprintk+0x100>
40080bd5:	3739a7        	bltu	a9, a10, 40080c10 <z_vprintk+0x74>
40080bd8:	993c      	movi.n	a9, 57
40080bda:	1c39a7        	bltu	a9, a10, 40080bfa <z_vprintk+0x5e>
40080bdd:	193c      	movi.n	a9, 49
40080bdf:	7bba97        	bgeu	a10, a9, 40080c5e <z_vprintk+0xc2>
40080be2:	d92c      	movi.n	a9, 45
40080be4:	029a97        	bne	a10, a9, 40080bea <z_vprintk+0x4e>
40080be7:	00a646        	j	40080e84 <z_vprintk+0x2e8>
40080bea:	093c      	movi.n	a9, 48
40080bec:	681a97        	beq	a10, a9, 40080c58 <z_vprintk+0xbc>
40080bef:	582c      	movi.n	a8, 37
40080bf1:	021a87        	beq	a10, a8, 40080bf7 <z_vprintk+0x5b>
40080bf4:	009a86        	j	40080e62 <z_vprintk+0x2c6>
40080bf7:	009886        	j	40080e5d <z_vprintk+0x2c1>
40080bfa:	885c      	movi.n	a8, 88
40080bfc:	029a87        	bne	a10, a8, 40080c02 <z_vprintk+0x66>
40080bff:	005286        	j	40080d4d <z_vprintk+0x1b1>
40080c02:	63a082        	movi	a8, 99
40080c05:	029a87        	bne	a10, a8, 40080c0b <z_vprintk+0x6f>
40080c08:	008b06        	j	40080e38 <z_vprintk+0x29c>
40080c0b:	0094c6        	j	40080e62 <z_vprintk+0x2c6>
40080c0e:	920000        	lsi	f0, a0, 0x248
40080c11:	9770a0        	lsi	f10, a0, 0x25c
40080c14:	029a      	add.n	a0, a2, a9
40080c16:	004806        	j	40080d3a <z_vprintk+0x19e>
40080c19:	1339a7        	bltu	a9, a10, 40080c30 <z_vprintk+0x94>
40080c1c:	69a092        	movi	a9, 105
40080c1f:	791a97        	beq	a10, a9, 40080c9c <z_vprintk+0x100>
40080c22:	6ca092        	movi	a9, 108
40080c25:	541a97        	beq	a10, a9, 40080c7d <z_vprintk+0xe1>
40080c28:	68a092        	movi	a9, 104
40080c2b:	000886        	j	40080c51 <z_vprintk+0xb5>
40080c2e:	920000        	lsi	f0, a0, 0x248
40080c31:	9775a0        	lsi	f10, a5, 0x25c
40080c34:	651a      	add.n	a6, a5, a1
40080c36:	0b39a7        	bltu	a9, a10, 40080c45 <z_vprintk+0xa9>
40080c39:	73a082        	movi	a8, 115
40080c3c:	029a87        	bne	a10, a8, 40080c42 <z_vprintk+0xa6>
40080c3f:	006446        	j	40080dd4 <z_vprintk+0x238>
40080c42:	008706        	j	40080e62 <z_vprintk+0x2c6>
40080c45:	78a092        	movi	a9, 120
40080c48:	029a97        	bne	a10, a9, 40080c4e <z_vprintk+0xb2>
40080c4b:	003f86        	j	40080d4d <z_vprintk+0x1b1>
40080c4e:	7aa092        	movi	a9, 122
40080c51:	281a97        	beq	a10, a9, 40080c7d <z_vprintk+0xe1>
40080c54:	008286        	j	40080e62 <z_vprintk+0x2c6>
40080c57:	25d600        	extui	a13, a0, 22, 3
				if (min_width < 0 && padding == PAD_NONE) {
40080c5a:	a71600        	lsi	f0, a6, 0x29c
40080c5d:	65d622        	addmi	a2, a6, 0x6500
				if (min_width < 0) {
40080c60:	ca5200        	float.s	f5, a2, 0
					min_width = *fmt - '0';
40080c63:	0346d0        	lsi	f13, a6, 12
40080c66:	e00000        	subx4	a0, a0, a0
					min_width = 10 * min_width + *fmt - '0';
40080c69:	5a1195        	call4	400dad84 <_iram_text_end+0x571a2>
40080c6c:	f059      	s32i.n	a5, a0, 60
40080c6e:	521155        	call4	400d2d84 <_iram_text_end+0x4f1a2>
40080c71:	5ad0c5        	call0	400db980 <_iram_text_end+0x57d9e>
40080c74:	565a      	add.n	a5, a6, a5
				if (padding == PAD_NONE) {
40080c76:	0c2237        	blt	a2, a3, 40080c86 <z_vprintk+0xea>
					padding = PAD_SPACE_BEFORE;
40080c79:	878627        	bany	a6, a2, 40080c04 <z_vprintk+0x68>
40080c7c:	a09200        	addx4	a9, a2, a0
				if (*fmt == 'h' && length_mod == 'h') {
40080c7f:	9768      	l32i.n	a6, a7, 36
40080c81:	059a      	add.n	a0, a5, a9
40080c83:	0d94a7        	bne	a4, a10, 40080c94 <z_vprintk+0xf8>
40080c86:	008146        	j	40080e8f <z_vprintk+0x2f3>
				} else if (*fmt == 'l' && length_mod == 'l') {
40080c89:	94c492        	addi	a9, a4, -108
40080c8c:	49cc      	bnez.n	a9, 40080c94 <z_vprintk+0xf8>
40080c8e:	94ca92        	addi	a9, a10, -108
40080c91:	1ff916        	beqz	a9, 40080e94 <z_vprintk+0x2f8>
				} else if (length_mod == 0) {
40080c94:	202416        	beqz	a4, 40080e9a <z_vprintk+0x2fe>
					out((int)'%', ctx);
40080c97:	0071c6        	j	40080e62 <z_vprintk+0x2c6>
40080c9a:	920000        	lsi	f0, a0, 0x248
				if (length_mod == 'z') {
40080c9d:	1c7aa0        	lsi	f10, a10, 112
40080ca0:	9788      	l32i.n	a8, a7, 36
40080ca2:	060394        	lsi	f9, a3, 24
					d = va_arg(ap, ssize_t);
40080ca5:	000c      	movi.n	a0, 0
40080ca7:	a09200        	addx4	a9, a2, a0
				} else if (length_mod == 'l') {
40080caa:	976c      	movi.n	a7, -23
40080cac:	860294        	lsi	f9, a2, 0x218
					d = va_arg(ap, long);
40080caf:	0009      	s32i.n	a0, a0, 0
				} else if (length_mod == 'L') {
40080cb1:	c94c      	movi.n	a9, 76
40080cb3:	219497        	bne	a4, a9, 40080cd8 <z_vprintk+0x13c>
					long long lld = va_arg(ap, long long);
40080cb6:	897c      	movi.n	a9, -8
40080cb8:	c67b      	addi.n	a12, a6, 7
40080cba:	10cc90        	and	a12, a12, a9
40080cbd:	9c8b      	addi.n	a9, a12, 8
40080cbf:	81b8      	l32i.n	a11, a1, 32
40080cc1:	07a897        	bge	a8, a9, 40080ccc <z_vprintk+0x130>
40080cc4:	0228c7        	blt	a8, a12, 40080cca <z_vprintk+0x12e>
40080cc7:	28a092        	movi	a9, 40
40080cca:	71b8      	l32i.n	a11, a1, 28
40080ccc:	8b9a      	add.n	a8, a11, a9
40080cce:	f8c882        	addi	a8, a8, -8
					d = (printk_val_t) lld;
40080cd1:	08c8      	l32i.n	a12, a8, 0
40080cd3:	1868      	l32i.n	a6, a8, 4
40080cd5:	0005c6        	j	40080cf0 <z_vprintk+0x154>
					d = va_arg(ap, int);
40080cd8:	964b      	addi.n	a9, a6, 4
40080cda:	81b8      	l32i.n	a11, a1, 32
40080cdc:	06a897        	bge	a8, a9, 40080ce6 <z_vprintk+0x14a>
40080cdf:	012867        	blt	a8, a6, 40080ce4 <z_vprintk+0x148>
40080ce2:	492c      	movi.n	a9, 36
40080ce4:	71b8      	l32i.n	a11, a1, 28
40080ce6:	bb9a      	add.n	a11, a11, a9
40080ce8:	fccbb2        	addi	a11, a11, -4
40080ceb:	0bc8      	l32i.n	a12, a11, 0
40080ced:	316fc0        	srai	a6, a12, 31
				if (*fmt != 'u' && negative(d)) {
40080cf0:	75a082        	movi	a8, 117
40080cf3:	251a87        	beq	a10, a8, 40080d1c <z_vprintk+0x180>
40080cf6:	0226d6        	bgez	a6, 40080d1c <z_vprintk+0x180>
					out((int)'-', ctx);
40080cf9:	03bd      	mov.n	a11, a3
40080cfb:	da2c      	movi.n	a10, 45
40080cfd:	0b6192        	s32i	a9, a1, 44
40080d00:	0a61c2        	s32i	a12, a1, 40
40080d03:	0002e0        	callx8	a2
					d = -d;
40080d06:	a1c8      	l32i.n	a12, a1, 40
40080d08:	180c      	movi.n	a8, 1
40080d0a:	60c0c0        	neg	a12, a12
40080d0d:	0a0c      	movi.n	a10, 0
40080d0f:	838ac0        	moveqz	a8, a10, a12
40080d12:	60d060        	neg	a13, a6
					min_width--;
40080d15:	b198      	l32i.n	a9, a1, 44
					d = -d;
40080d17:	c06d80        	sub	a6, a13, a8
					min_width--;
40080d1a:	550b      	addi.n	a5, a5, -1
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
40080d1c:	fdc7a2        	addi	a10, a7, -3
40080d1f:	080c      	movi.n	a8, 0
40080d21:	1f0c      	movi.n	a15, 1
40080d23:	0e3c      	movi.n	a14, 48
40080d25:	83f8a0        	moveqz	a15, a8, a10
40080d28:	0b2c      	movi.n	a11, 32
40080d2a:	a70b      	addi.n	a10, a7, -1
40080d2c:	83bea0        	moveqz	a11, a14, a10
40080d2f:	1159      	s32i.n	a5, a1, 4
40080d31:	01b9      	s32i.n	a11, a1, 0
40080d33:	ae0c      	movi.n	a14, 10
40080d35:	06dd      	mov.n	a13, a6
40080d37:	002106        	j	40080dbf <z_vprintk+0x223>
				out('0', ctx);
40080d3a:	03bd      	mov.n	a11, a3
40080d3c:	0a3c      	movi.n	a10, 48
40080d3e:	0002e0        	callx8	a2
				out('x', ctx);
40080d41:	03bd      	mov.n	a11, a3
40080d43:	78a0a2        	movi	a10, 120
40080d46:	0002e0        	callx8	a2
				min_width = sizeof(void *) * 2;
40080d49:	850c      	movi.n	a5, 8
				padding = PAD_ZERO_BEFORE;
40080d4b:	170c      	movi.n	a7, 1
				if (*fmt == 'p') {
40080d4d:	9198      	l32i.n	a9, a1, 36
40080d4f:	881c      	movi.n	a8, 24
40080d51:	0009a2        	l8ui	a10, a9, 0
40080d54:	70a092        	movi	a9, 112
40080d57:	029a97        	bne	a10, a9, 40080d5d <z_vprintk+0x1c1>
					x = (uintptr_t)va_arg(ap, void *);
40080d5a:	000b86        	j	40080d8c <z_vprintk+0x1f0>
				} else if (length_mod == 'l') {
40080d5d:	6ca092        	movi	a9, 108
40080d60:	029497        	bne	a4, a9, 40080d66 <z_vprintk+0x1ca>
					x = va_arg(ap, unsigned long);
40080d63:	000946        	j	40080d8c <z_vprintk+0x1f0>
				} else if (length_mod == 'L') {
40080d66:	c94c      	movi.n	a9, 76
40080d68:	209497        	bne	a4, a9, 40080d8c <z_vprintk+0x1f0>
					x = va_arg(ap, unsigned long long);
40080d6b:	897c      	movi.n	a9, -8
40080d6d:	c67b      	addi.n	a12, a6, 7
40080d6f:	10cc90        	and	a12, a12, a9
40080d72:	9c8b      	addi.n	a9, a12, 8
40080d74:	81a8      	l32i.n	a10, a1, 32
40080d76:	06a897        	bge	a8, a9, 40080d80 <z_vprintk+0x1e4>
40080d79:	0128c7        	blt	a8, a12, 40080d7e <z_vprintk+0x1e2>
40080d7c:	892c      	movi.n	a9, 40
40080d7e:	71a8      	l32i.n	a10, a1, 28
40080d80:	8a9a      	add.n	a8, a10, a9
40080d82:	f8c882        	addi	a8, a8, -8
40080d85:	08c8      	l32i.n	a12, a8, 0
40080d87:	18d8      	l32i.n	a13, a8, 4
40080d89:	000646        	j	40080da6 <z_vprintk+0x20a>
					x = va_arg(ap, unsigned int);
40080d8c:	964b      	addi.n	a9, a6, 4
40080d8e:	81a8      	l32i.n	a10, a1, 32
40080d90:	06a897        	bge	a8, a9, 40080d9a <z_vprintk+0x1fe>
40080d93:	012867        	blt	a8, a6, 40080d98 <z_vprintk+0x1fc>
40080d96:	492c      	movi.n	a9, 36
40080d98:	71a8      	l32i.n	a10, a1, 28
40080d9a:	80aa90        	add	a10, a10, a9
40080d9d:	fccaa2        	addi	a10, a10, -4
40080da0:	002ac2        	l32i	a12, a10, 0
40080da3:	00a0d2        	movi	a13, 0
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
40080da6:	fdc7a2        	addi	a10, a7, -3
40080da9:	080c      	movi.n	a8, 0
40080dab:	1f0c      	movi.n	a15, 1
40080dad:	0e3c      	movi.n	a14, 48
40080daf:	83f8a0        	moveqz	a15, a8, a10
40080db2:	0b2c      	movi.n	a11, 32
40080db4:	a70b      	addi.n	a10, a7, -1
40080db6:	83bea0        	moveqz	a11, a14, a10
40080db9:	1159      	s32i.n	a5, a1, 4
40080dbb:	01b9      	s32i.n	a11, a1, 0
40080dbd:	0e1c      	movi.n	a14, 16
40080dbf:	03bd      	mov.n	a11, a3
40080dc1:	02ad      	mov.n	a10, a2
40080dc3:	b199      	s32i.n	a9, a1, 44
40080dc5:	a189      	s32i.n	a8, a1, 40
40080dc7:	ffcfe5        	call8	40080ac4 <print_digits>
40080dca:	b198      	l32i.n	a9, a1, 44
40080dcc:	096d      	mov.n	a6, a9
			might_format = 0;
40080dce:	a188      	l32i.n	a8, a1, 40
40080dd0:	003206        	j	40080e9c <z_vprintk+0x300>
40080dd3:	964b00        	lsi	f0, a11, 0x258
				char *s = va_arg(ap, char *);
40080dd6:	881c      	movi.n	a8, 24
40080dd8:	0ca897        	bge	a8, a9, 40080de8 <z_vprintk+0x24c>
40080ddb:	012867        	blt	a8, a6, 40080de0 <z_vprintk+0x244>
40080dde:	492c      	movi.n	a9, 36
40080de0:	096d      	mov.n	a6, a9
40080de2:	7188      	l32i.n	a8, a1, 28
40080de4:	000106        	j	40080dec <z_vprintk+0x250>
40080de7:	818800        	src	a8, a8, a0
40080dea:	096d      	mov.n	a6, a9
40080dec:	889a      	add.n	a8, a8, a9
40080dee:	fcc882        	addi	a8, a8, -4
40080df1:	08d8      	l32i.n	a13, a8, 0
40080df3:	0d9d      	mov.n	a9, a13
				while (*s) {
40080df5:	0003c6        	j	40080e08 <z_vprintk+0x26c>
					out((int)(*s++), ctx);
40080df8:	991b      	addi.n	a9, a9, 1
40080dfa:	03bd      	mov.n	a11, a3
40080dfc:	b199      	s32i.n	a9, a1, 44
40080dfe:	0a61d2        	s32i	a13, a1, 40
40080e01:	0002e0        	callx8	a2
40080e04:	a1d8      	l32i.n	a13, a1, 40
40080e06:	b198      	l32i.n	a9, a1, 44
				while (*s) {
40080e08:	0009a2        	l8ui	a10, a9, 0
40080e0b:	fe9a56        	bnez	a10, 40080df8 <z_vprintk+0x25c>
			might_format = 0;
40080e0e:	0a8d      	mov.n	a8, a10
				if (padding == PAD_SPACE_AFTER) {
40080e10:	023726        	beqi	a7, 3, 40080e16 <z_vprintk+0x27a>
40080e13:	002146        	j	40080e9c <z_vprintk+0x300>
					int remaining = min_width - (s - start);
40080e16:	c099d0        	sub	a9, a9, a13
40080e19:	c09590        	sub	a9, a5, a9
						out(' ', ctx);
40080e1c:	082c      	movi.n	a8, 32
					while (remaining-- > 0) {
40080e1e:	000406        	j	40080e32 <z_vprintk+0x296>
						out(' ', ctx);
40080e21:	08ad      	mov.n	a10, a8
40080e23:	03bd      	mov.n	a11, a3
40080e25:	a189      	s32i.n	a8, a1, 40
40080e27:	b199      	s32i.n	a9, a1, 44
40080e29:	0002e0        	callx8	a2
40080e2c:	b198      	l32i.n	a9, a1, 44
40080e2e:	a188      	l32i.n	a8, a1, 40
40080e30:	990b      	addi.n	a9, a9, -1
					while (remaining-- > 0) {
40080e32:	eb19e6        	bgei	a9, 1, 40080e21 <z_vprintk+0x285>
40080e35:	000ec6        	j	40080e74 <z_vprintk+0x2d8>
				int c = va_arg(ap, int);
40080e38:	964b      	addi.n	a9, a6, 4
40080e3a:	8a1c      	movi.n	a10, 24
40080e3c:	8188      	l32i.n	a8, a1, 32
40080e3e:	06aa97        	bge	a10, a9, 40080e48 <z_vprintk+0x2ac>
40080e41:	012a67        	blt	a10, a6, 40080e46 <z_vprintk+0x2aa>
40080e44:	492c      	movi.n	a9, 36
40080e46:	7188      	l32i.n	a8, a1, 28
40080e48:	889a      	add.n	a8, a8, a9
40080e4a:	fcc882        	addi	a8, a8, -4
				out(c, ctx);
40080e4d:	08a8      	l32i.n	a10, a8, 0
40080e4f:	03bd      	mov.n	a11, a3
40080e51:	b199      	s32i.n	a9, a1, 44
40080e53:	0002e0        	callx8	a2
				break;
40080e56:	b198      	l32i.n	a9, a1, 44
40080e58:	096d      	mov.n	a6, a9
40080e5a:	000586        	j	40080e74 <z_vprintk+0x2d8>
				out((int)'%', ctx);
40080e5d:	03bd      	mov.n	a11, a3
40080e5f:	000386        	j	40080e71 <z_vprintk+0x2d5>
				out((int)'%', ctx);
40080e62:	03bd      	mov.n	a11, a3
40080e64:	25a0a2        	movi	a10, 37
40080e67:	0002e0        	callx8	a2
				out((int)*fmt, ctx);
40080e6a:	9188      	l32i.n	a8, a1, 36
40080e6c:	03bd      	mov.n	a11, a3
40080e6e:	0008a2        	l8ui	a10, a8, 0
40080e71:	0002e0        	callx8	a2
			might_format = 0;
40080e74:	080c      	movi.n	a8, 0
				break;
40080e76:	000886        	j	40080e9c <z_vprintk+0x300>
				length_mod = 0;
40080e79:	084d      	mov.n	a4, a8
				padding = PAD_NONE;
40080e7b:	087d      	mov.n	a7, a8
				min_width = -1;
40080e7d:	f57c      	movi.n	a5, -1
				might_format = 1;
40080e7f:	180c      	movi.n	a8, 1
40080e81:	0005c6        	j	40080e9c <z_vprintk+0x300>
				padding = PAD_SPACE_AFTER;
40080e84:	370c      	movi.n	a7, 3
40080e86:	000486        	j	40080e9c <z_vprintk+0x300>
					padding = PAD_ZERO_BEFORE;
40080e89:	170c      	movi.n	a7, 1
40080e8b:	000346        	j	40080e9c <z_vprintk+0x300>
40080e8e:	844c00        	extui	a4, a0, 12, 9
					length_mod = 'H';
40080e91:	0001c6        	j	40080e9c <z_vprintk+0x300>
					length_mod = 'L';
40080e94:	c44c      	movi.n	a4, 76
40080e96:	000086        	j	40080e9c <z_vprintk+0x300>
40080e99:	0a4d00        	add.s	f4, f13, f0
		++fmt;
40080e9c:	9198      	l32i.n	a9, a1, 36
40080e9e:	991b      	addi.n	a9, a9, 1
40080ea0:	9199      	s32i.n	a9, a1, 36
	while (*fmt) {
40080ea2:	9198      	l32i.n	a9, a1, 36
40080ea4:	0009a2        	l8ui	a10, a9, 0
40080ea7:	d0da56        	bnez	a10, 40080bb8 <z_vprintk+0x1c>
}
40080eaa:	f01d      	retw.n

40080eac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
40080eac:	008136        	entry	a1, 64
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
40080eaf:	fdc7a1        	l32r	a10, 400805cc <_iram_text_start+0x7c>
	struct out_context ctx = { 0 };
40080eb2:	00a082        	movi	a8, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080eb5:	20d330        	or	a13, a3, a3
40080eb8:	20e440        	or	a14, a4, a4
40080ebb:	05fd      	mov.n	a15, a5
40080ebd:	02cd      	mov.n	a12, a2
40080ebf:	01bd      	mov.n	a11, a1
	struct out_context ctx = { 0 };
40080ec1:	0189      	s32i.n	a8, a1, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080ec3:	ffcda5        	call8	40080b9c <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
40080ec6:	f01d      	retw.n

40080ec8 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
40080ec8:	00a136        	entry	a1, 80
	va_list ap;

	va_start(ap, fmt);
40080ecb:	10c1c2        	addi	a12, a1, 16
40080ece:	30c1b2        	addi	a11, a1, 48
40080ed1:	4d0c      	movi.n	a13, 4

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
40080ed3:	02ad      	mov.n	a10, a2
	va_start(ap, fmt);
40080ed5:	5139      	s32i.n	a3, a1, 20
40080ed7:	6149      	s32i.n	a4, a1, 24
40080ed9:	7159      	s32i.n	a5, a1, 28
40080edb:	8169      	s32i.n	a6, a1, 32
40080edd:	9179      	s32i.n	a7, a1, 36
40080edf:	11c9      	s32i.n	a12, a1, 4
40080ee1:	01b9      	s32i.n	a11, a1, 0
40080ee3:	21d9      	s32i.n	a13, a1, 8
		vprintk(fmt, ap);
40080ee5:	fffc65        	call8	40080eac <vprintk>
	}
	va_end(ap);
}
40080ee8:	f01d      	retw.n
	...

40080eec <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
40080eec:	004136        	entry	a1, 32
	entry(p1, p2, p3);
40080eef:	20c550        	or	a12, a5, a5
40080ef2:	20b440        	or	a11, a4, a4
40080ef5:	03ad      	mov.n	a10, a3
40080ef7:	0002e0        	callx8	a2
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
40080efa:	01fee5        	call8	40082ee8 <z_impl_k_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
40080efd:	0213e5        	call8	4008303c <z_impl_k_thread_abort>

40080f00 <chunk_field>:
	return (chunk_unit_t *)h;
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
40080f00:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f03:	1133d0        	slli	a3, a3, 3
40080f06:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f08:	fdb281        	l32r	a8, 400805d0 <_iram_text_start+0x80>
40080f0b:	2228      	l32i.n	a2, a2, 8
40080f0d:	0bb827        	bgeu	a8, a2, 40080f1c <chunk_field+0x1c>
		return ((uint32_t *)cmem)[f];
40080f10:	1144e0        	slli	a4, a4, 2
40080f13:	334a      	add.n	a3, a3, a4
40080f15:	0328      	l32i.n	a2, a3, 0
40080f17:	000246        	j	40080f24 <chunk_field+0x24>
40080f1a:	f00000        	subx8	a0, a0, a0
	} else {
		return ((uint16_t *)cmem)[f];
40080f1d:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080f20:	132233        	lsi	f3, a2, 76
40080f23:	f01d00        	subx8	a1, a13, a0
	...

40080f28 <chunk_set>:
	}
}

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
40080f28:	004136        	entry	a1, 32
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f2b:	1133d0        	slli	a3, a3, 3
40080f2e:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f30:	fda881        	l32r	a8, 400805d0 <_iram_text_start+0x80>
40080f33:	2228      	l32i.n	a2, a2, 8
40080f35:	0bb827        	bgeu	a8, a2, 40080f44 <chunk_set+0x1c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
40080f38:	1144e0        	slli	a4, a4, 2
40080f3b:	334a      	add.n	a3, a3, a4
40080f3d:	0359      	s32i.n	a5, a3, 0
40080f3f:	000246        	j	40080f4c <chunk_set+0x24>
40080f42:	f00000        	subx8	a0, a0, a0
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
40080f45:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080f48:	535233        	lsi	f3, a2, 0x14c
40080f4b:	f01d00        	subx8	a1, a13, a0
	...

40080f50 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
40080f50:	004136        	entry	a1, 32
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
40080f53:	1c0c      	movi.n	a12, 1
40080f55:	03bd      	mov.n	a11, a3
40080f57:	02ad      	mov.n	a10, a2
40080f59:	fffa65        	call8	40080f00 <chunk_field>
}
40080f5c:	4121a0        	srli	a2, a10, 1
40080f5f:	f01d      	retw.n
40080f61:	000000        	ill

40080f64 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
40080f64:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f67:	1133d0        	slli	a3, a3, 3
40080f6a:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f6c:	fd9981        	l32r	a8, 400805d0 <_iram_text_start+0x80>
40080f6f:	2228      	l32i.n	a2, a2, 8
40080f71:	17b827        	bgeu	a8, a2, 40080f8c <set_chunk_used+0x28>
		if (used) {
40080f74:	1388      	l32i.n	a8, a3, 4
40080f76:	648c      	beqz.n	a4, 40080f80 <set_chunk_used+0x1c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
40080f78:	120c      	movi.n	a2, 1
40080f7a:	208820        	or	a8, a8, a2
40080f7d:	000106        	j	40080f85 <set_chunk_used+0x21>
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
40080f80:	e27c      	movi.n	a2, -2
40080f82:	108820        	and	a8, a8, a2
40080f85:	1389      	s32i.n	a8, a3, 4
40080f87:	000586        	j	40080fa1 <set_chunk_used+0x3d>
40080f8a:	820000        	mull	a0, a0, a0
		}
	} else {
		if (used) {
40080f8d:	8c0113        	lsi	f1, a1, 0x230
40080f90:	120c64        	lsi	f6, a12, 72
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
40080f93:	208820        	or	a8, a8, a2
40080f96:	000106        	j	40080f9e <set_chunk_used+0x3a>
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
40080f99:	e27c      	movi.n	a2, -2
40080f9b:	108820        	and	a8, a8, a2
40080f9e:	015382        	s16i	a8, a3, 2
		}
	}
}
40080fa1:	f01d      	retw.n
	...

40080fa4 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
40080fa4:	004136        	entry	a1, 32
	chunk_set(h, c, SIZE_AND_USED, size << 1);
40080fa7:	11d4f0        	slli	a13, a4, 1
40080faa:	01a0c2        	movi	a12, 1
40080fad:	20b330        	or	a11, a3, a3
40080fb0:	20a220        	or	a10, a2, a2
40080fb3:	fff765        	call8	40080f28 <chunk_set>
}
40080fb6:	f01d      	retw.n

40080fb8 <bucket_idx>:
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
40080fb8:	004136        	entry	a1, 32
	return big_heap(h) ? 8 : 4;
40080fbb:	fd8591        	l32r	a9, 400805d0 <_iram_text_start+0x80>
40080fbe:	2228      	l32i.n	a2, a2, 8
40080fc0:	880c      	movi.n	a8, 8
40080fc2:	023927        	bltu	a9, a2, 40080fc8 <bucket_idx+0x10>
40080fc5:	04a082        	movi	a8, 4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40080fc8:	888b      	addi.n	a8, a8, 8
40080fca:	412380        	srli	a2, a8, 3
	size_t usable_sz = sz - min_chunk_size(h) + 1;
40080fcd:	331b      	addi.n	a3, a3, 1
40080fcf:	c03320        	sub	a3, a3, a2
	return 31 - __builtin_clz(usable_sz);
40080fd2:	40f330        	nsau	a3, a3
}
40080fd5:	f21c      	movi.n	a2, 31
40080fd7:	c02230        	sub	a2, a2, a3
40080fda:	f01d      	retw.n

40080fdc <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
40080fdc:	004136        	entry	a1, 32
	return sizeof(void *) > 4 || chunks > 0x7fff;
40080fdf:	03bd      	mov.n	a11, a3
40080fe1:	02ad      	mov.n	a10, a2
40080fe3:	fff6e5        	call8	40080f50 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
40080fe6:	fd7a51        	l32r	a5, 400805d0 <_iram_text_start+0x80>
40080fe9:	2248      	l32i.n	a4, a2, 8
40080feb:	05b547        	bgeu	a5, a4, 40080ff4 <free_list_add+0x18>
	if (!solo_free_header(h, c)) {
40080fee:	021a66        	bnei	a10, 1, 40080ff4 <free_list_add+0x18>
40080ff1:	001bc6        	j	40081064 <free_list_add+0x88>
		int bidx = bucket_idx(h, chunk_size(h, c));
40080ff4:	0abd      	mov.n	a11, a10
40080ff6:	02ad      	mov.n	a10, a2
40080ff8:	fffbe5        	call8	40080fb8 <bucket_idx>
	if (b->next == 0) {
40080ffb:	118ae0        	slli	a8, a10, 2
40080ffe:	828a      	add.n	a8, a2, a8
40081000:	4848      	l32i.n	a4, a8, 16
40081002:	44ec      	bnez.n	a4, 4008102a <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
40081004:	140c      	movi.n	a4, 1
40081006:	401a00        	ssl	a10
40081009:	a14400        	sll	a4, a4
4008100c:	32a8      	l32i.n	a10, a2, 12
	chunk_set(h, c, FREE_PREV, prev);
4008100e:	03dd      	mov.n	a13, a3
40081010:	20aa40        	or	a10, a10, a4
40081013:	32a9      	s32i.n	a10, a2, 12
40081015:	2c0c      	movi.n	a12, 2
40081017:	03bd      	mov.n	a11, a3
		b->next = c;
40081019:	4839      	s32i.n	a3, a8, 16
4008101b:	02ad      	mov.n	a10, a2
4008101d:	fff0a5        	call8	40080f28 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40081020:	03dd      	mov.n	a13, a3
40081022:	3c0c      	movi.n	a12, 3
40081024:	03bd      	mov.n	a11, a3
40081026:	000d46        	j	4008105f <free_list_add+0x83>
40081029:	a0c200        	addx4	a12, a2, a0
	return chunk_field(h, c, FREE_PREV);
4008102c:	b44002        	s8i	a0, a0, 180
4008102f:	a22020        	muluh	a2, a0, a2
40081032:	ece520        	lsi	f2, a5, 0x3b0
40081035:	ff          	.byte 0xff
	chunk_set(h, c, FREE_PREV, prev);
40081036:	0add      	mov.n	a13, a10
	return chunk_field(h, c, FREE_PREV);
40081038:	0a5d      	mov.n	a5, a10
	chunk_set(h, c, FREE_PREV, prev);
4008103a:	2c0c      	movi.n	a12, 2
4008103c:	03bd      	mov.n	a11, a3
4008103e:	02ad      	mov.n	a10, a2
40081040:	ffee65        	call8	40080f28 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40081043:	04dd      	mov.n	a13, a4
40081045:	3c0c      	movi.n	a12, 3
40081047:	03bd      	mov.n	a11, a3
40081049:	02ad      	mov.n	a10, a2
4008104b:	ffede5        	call8	40080f28 <chunk_set>
4008104e:	03dd      	mov.n	a13, a3
40081050:	3c0c      	movi.n	a12, 3
40081052:	05bd      	mov.n	a11, a5
40081054:	02ad      	mov.n	a10, a2
40081056:	ffed25        	call8	40080f28 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
40081059:	03dd      	mov.n	a13, a3
4008105b:	2c0c      	movi.n	a12, 2
4008105d:	04bd      	mov.n	a11, a4
4008105f:	02ad      	mov.n	a10, a2
40081061:	ffec65        	call8	40080f28 <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
40081064:	f01d      	retw.n
	...

40081068 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
40081068:	004136        	entry	a1, 32
	return big_heap_bytes(size) ? 8 : 4;
4008106b:	fd5a51        	l32r	a5, 400805d4 <_iram_text_start+0x84>
4008106e:	890c      	movi.n	a9, 8
40081070:	013547        	bltu	a5, a4, 40081075 <sys_heap_init+0xd>
40081073:	490c      	movi.n	a9, 4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
40081075:	c04490        	sub	a4, a4, a9

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40081078:	887c      	movi.n	a8, -8
4008107a:	537b      	addi.n	a5, a3, 7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
4008107c:	334a      	add.n	a3, a3, a4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
4008107e:	105580        	and	a5, a5, a8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081081:	103380        	and	a3, a3, a8
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
40081084:	fd5591        	l32r	a9, 400805d8 <_iram_text_start+0x88>
40081087:	fd5481        	l32r	a8, 400805d8 <_iram_text_start+0x88>
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
4008108a:	c03350        	sub	a3, a3, a5
	heap->heap = h;
4008108d:	0259      	s32i.n	a5, a2, 0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
4008108f:	413330        	srli	a3, a3, 3
	h->len = buf_sz;
	h->avail_buckets = 0;
40081092:	040c      	movi.n	a4, 0
	h->chunk0_hdr_area = 0;
40081094:	0589      	s32i.n	a8, a5, 0
40081096:	1599      	s32i.n	a9, a5, 4

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40081098:	03bd      	mov.n	a11, a3
	h->len = buf_sz;
4008109a:	2539      	s32i.n	a3, a5, 8
	h->avail_buckets = 0;
4008109c:	3549      	s32i.n	a4, a5, 12
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
4008109e:	20a550        	or	a10, a5, a5
400810a1:	fff165        	call8	40080fb8 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
400810a4:	112ae0        	slli	a2, a10, 2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
400810a7:	1bc222        	addi	a2, a2, 27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
400810aa:	ba1b      	addi.n	a11, a10, 1
400810ac:	412320        	srli	a2, a2, 3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
400810af:	10c592        	addi	a9, a5, 16
400810b2:	048d      	mov.n	a8, a4
400810b4:	000186        	j	400810be <sys_heap_init+0x56>
400810b7:	094900        	l32e	a0, a9, -48
400810ba:	881b      	addi.n	a8, a8, 1
400810bc:	994b      	addi.n	a9, a9, 4
400810be:	f628b7        	blt	a8, a11, 400810b8 <sys_heap_init+0x50>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
400810c1:	02cd      	mov.n	a12, a2
400810c3:	05ad      	mov.n	a10, a5
400810c5:	0b0c      	movi.n	a11, 0
400810c7:	ffede5        	call8	40080fa4 <set_chunk_size>
	set_chunk_used(h, 0, true);
400810ca:	05ad      	mov.n	a10, a5
400810cc:	1c0c      	movi.n	a12, 1
400810ce:	0b0c      	movi.n	a11, 0
400810d0:	ffe925        	call8	40080f64 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
400810d3:	c04320        	sub	a4, a3, a2
400810d6:	04cd      	mov.n	a12, a4
400810d8:	02bd      	mov.n	a11, a2
400810da:	05ad      	mov.n	a10, a5
400810dc:	ffec65        	call8	40080fa4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
400810df:	02dd      	mov.n	a13, a2
400810e1:	02bd      	mov.n	a11, a2
400810e3:	05ad      	mov.n	a10, a5
400810e5:	0c0c      	movi.n	a12, 0
400810e7:	ffe425        	call8	40080f28 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
400810ea:	03bd      	mov.n	a11, a3
400810ec:	05ad      	mov.n	a10, a5
400810ee:	0c0c      	movi.n	a12, 0
400810f0:	ffeb25        	call8	40080fa4 <set_chunk_size>
400810f3:	04dd      	mov.n	a13, a4
400810f5:	03bd      	mov.n	a11, a3
400810f7:	05ad      	mov.n	a10, a5
400810f9:	0c0c      	movi.n	a12, 0
400810fb:	ffe2e5        	call8	40080f28 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
400810fe:	03bd      	mov.n	a11, a3
40081100:	05ad      	mov.n	a10, a5
40081102:	1c0c      	movi.n	a12, 1
40081104:	ffe5e5        	call8	40080f64 <set_chunk_used>

	free_list_add(h, chunk0_size);
40081107:	02bd      	mov.n	a11, a2
40081109:	05ad      	mov.n	a10, a5
4008110b:	ffed25        	call8	40080fdc <free_list_add>
}
4008110e:	f01d      	retw.n

40081110 <arch_printk_char_out>:
	CODE_UNREACHABLE;
}

/* Boot-time static default printk handler, possibly to be overridden later. */
int arch_printk_char_out(int c)
{
40081110:	004136        	entry	a1, 32
	if (c == '\n') {
40081113:	079266        	bnei	a2, 10, 4008111e <arch_printk_char_out+0xe>
		esp32_rom_uart_tx_one_char('\r');
40081116:	da0c      	movi.n	a10, 13
40081118:	fd3181        	l32r	a8, 400805dc <_iram_text_start+0x8c>
4008111b:	0008e0        	callx8	a8
	}
	esp32_rom_uart_tx_one_char(c);
4008111e:	74a020        	extui	a10, a2, 0, 8
40081121:	fd2e81        	l32r	a8, 400805dc <_iram_text_start+0x8c>
40081124:	0008e0        	callx8	a8
	return 0;
}
40081127:	020c      	movi.n	a2, 0
40081129:	f01d      	retw.n
	...

4008112c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
4008112c:	004136        	entry	a1, 32
4008112f:	fd2ca1        	l32r	a10, 400805e0 <_iram_text_start+0x90>
40081132:	015465        	call8	40082678 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
40081135:	fd2b21        	l32r	a2, 400805e4 <_iram_text_start+0x94>
40081138:	0062a2        	s32i	a10, a2, 0
	__stdout_hook_install(console_out);
4008113b:	fd2b21        	l32r	a2, 400805e8 <_iram_text_start+0x98>
4008113e:	02ad      	mov.n	a10, a2
40081140:	00a9a5        	call8	40081bdc <__stdout_hook_install>
	__printk_hook_install(console_out);
40081143:	02ad      	mov.n	a10, a2
40081145:	ffa4a5        	call8	40080b90 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
40081148:	020c      	movi.n	a2, 0
4008114a:	f01d      	retw.n

4008114c <console_out>:
{
4008114c:	004136        	entry	a1, 32
	if ('\n' == c) {
4008114f:	fd2531        	l32r	a3, 400805e4 <_iram_text_start+0x94>
40081152:	0a9266        	bnei	a2, 10, 40081160 <console_out+0x14>
40081155:	03a8      	l32i.n	a10, a3, 0
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
40081157:	2a88      	l32i.n	a8, a10, 8
40081159:	db0c      	movi.n	a11, 13
4008115b:	1888      	l32i.n	a8, a8, 4
4008115d:	0008e0        	callx8	a8
	uart_poll_out(uart_console_dev, c);
40081160:	03a8      	l32i.n	a10, a3, 0
40081162:	2a38      	l32i.n	a3, a10, 8
40081164:	74b020        	extui	a11, a2, 0, 8
40081167:	1338      	l32i.n	a3, a3, 4
40081169:	0003e0        	callx8	a3
}
4008116c:	f01d      	retw.n
	...

40081170 <clock_control_esp32_on>:
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
}

static int clock_control_esp32_on(const struct device *dev,
				  clock_control_subsys_t sys)
{
40081170:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
	uint32_t offset =  GET_REG_OFFSET(sys);

	__ASSERT_NO_MSG(bank >= CLOCK_REGS_BANK_COUNT);

	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
40081173:	180c      	movi.n	a8, 1
	uint32_t bank = GET_REG_BANK(sys);
40081175:	419530        	srli	a9, a3, 5
	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
40081178:	401300        	ssl	a3
4008117b:	a13800        	sll	a3, a8
4008117e:	fd1b81        	l32r	a8, 400805ec <_iram_text_start+0x9c>
40081181:	1199d0        	slli	a9, a9, 3
40081184:	889a      	add.n	a8, a8, a9
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
40081186:	08a8      	l32i.n	a10, a8, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].rst);
	return 0;
}
40081188:	020c      	movi.n	a2, 0
4008118a:	0020c0        	memw
4008118d:	0a98      	l32i.n	a9, a10, 0
#include <stdbool.h>
#include <arch/xtensa/arch.h>

static inline void esp32_set_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
4008118f:	209390        	or	a9, a3, a9
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
40081192:	0020c0        	memw
40081195:	0a99      	s32i.n	a9, a10, 0
	return *(volatile uint32_t *)addr;
40081197:	1898      	l32i.n	a9, a8, 4
}

static inline void esp32_clear_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081199:	f87c      	movi.n	a8, -1
4008119b:	0020c0        	memw
4008119e:	09a8      	l32i.n	a10, a9, 0
400811a0:	308830        	xor	a8, a8, a3
400811a3:	1088a0        	and	a8, a8, a10
	*(volatile uint32_t *)addr = data;
400811a6:	0020c0        	memw
400811a9:	0989      	s32i.n	a8, a9, 0
400811ab:	f01d      	retw.n
400811ad:	000000        	ill

400811b0 <clock_control_esp32_get_status>:
	return 0;
}

static enum clock_control_status clock_control_esp32_get_status(const struct device *dev,
								clock_control_subsys_t sys)
{
400811b0:	004136        	entry	a1, 32
	ARG_UNUSED(dev);
	uint32_t bank = GET_REG_BANK(sys);
400811b3:	418530        	srli	a8, a3, 5
	uint32_t offset =  GET_REG_OFFSET(sys);

	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400811b6:	1198d0        	slli	a9, a8, 3
400811b9:	fd0c81        	l32r	a8, 400805ec <_iram_text_start+0x9c>
400811bc:	889a      	add.n	a8, a8, a9
 * @return Value
 */
static inline uint32_t IRAM_ATTR DPORT_READ_PERI_REG(uint32_t reg)
{
#if defined(BOOTLOADER_BUILD) || defined(CONFIG_FREERTOS_UNICORE) || !defined(ESP_PLATFORM)
    return _DPORT_REG_READ(reg);
400811be:	0828      	l32i.n	a2, a8, 0
		return CLOCK_CONTROL_STATUS_ON;
	}
	return CLOCK_CONTROL_STATUS_OFF;
}
400811c0:	180c      	movi.n	a8, 1
400811c2:	0020c0        	memw
400811c5:	0228      	l32i.n	a2, a2, 0
	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400811c7:	400300        	ssr	a3
400811ca:	912020        	srl	a2, a2
400811cd:	043020        	extui	a3, a2, 0, 1
}
400811d0:	220c      	movi.n	a2, 2
400811d2:	832830        	moveqz	a2, a8, a3
400811d5:	f01d      	retw.n
	...

400811d8 <clock_control_esp32_get_rate>:

static int clock_control_esp32_get_rate(const struct device *dev,
					clock_control_subsys_t sub_system,
					uint32_t *rate)
{
400811d8:	004136        	entry	a1, 32
	ARG_UNUSED(sub_system);

	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
	uint32_t soc_clk_sel = REG_GET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL);
400811db:	fd0581        	l32r	a8, 400805f0 <_iram_text_start+0xa0>
400811de:	0020c0        	memw
400811e1:	0888      	l32i.n	a8, a8, 0
400811e3:	158b80        	extui	a8, a8, 27, 2

	switch (soc_clk_sel) {
400811e6:	688c      	beqz.n	a8, 400811f0 <clock_control_esp32_get_rate+0x18>
400811e8:	020c      	movi.n	a2, 0
400811ea:	171826        	beqi	a8, 1, 40081205 <clock_control_esp32_get_rate+0x2d>
400811ed:	000706        	j	4008120d <clock_control_esp32_get_rate+0x35>
	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
400811f0:	1228      	l32i.n	a2, a2, 4
	case RTC_CNTL_SOC_CLK_SEL_XTL:
		*rate = xtal_freq[xtal_freq_sel];
400811f2:	2228      	l32i.n	a2, a2, 8
400811f4:	1192e0        	slli	a9, a2, 2
400811f7:	fcff21        	l32r	a2, 400805f4 <_iram_text_start+0xa4>
400811fa:	229a      	add.n	a2, a2, a9
400811fc:	0228      	l32i.n	a2, a2, 0
400811fe:	0429      	s32i.n	a2, a4, 0
		return 0;
40081200:	082d      	mov.n	a2, a8
40081202:	000306        	j	40081212 <clock_control_esp32_get_rate+0x3a>
	case RTC_CNTL_SOC_CLK_SEL_PLL:
		*rate = MHZ(80);
40081205:	fcfc81        	l32r	a8, 400805f8 <_iram_text_start+0xa8>
40081208:	0489      	s32i.n	a8, a4, 0
		return 0;
4008120a:	000106        	j	40081212 <clock_control_esp32_get_rate+0x3a>
	default:
		*rate = 0;
4008120d:	0429      	s32i.n	a2, a4, 0
		return -ENOTSUP;
4008120f:	ddaf22        	movi	a2, -35
	}
}
40081212:	f01d      	retw.n

40081214 <clock_control_esp32_init>:

static int clock_control_esp32_init(const struct device *dev)
{
40081214:	004136        	entry	a1, 32
	struct esp32_clock_config *cfg = DEV_CFG(dev);
40081217:	1238      	l32i.n	a3, a2, 4

	/* Wait for UART first before changing freq to avoid garbage on console */
	esp32_rom_uart_tx_wait_idle(0);
40081219:	0a0c      	movi.n	a10, 0
4008121b:	fd0481        	l32r	a8, 4008062c <_iram_text_start+0xdc>
4008121e:	0008e0        	callx8	a8

	switch (cfg->clk_src_sel) {
40081221:	0368      	l32i.n	a6, a3, 0
40081223:	968c      	beqz.n	a6, 40081230 <clock_control_esp32_init+0x1c>
		break;
	case ESP32_CLK_SRC_PLL:
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
		break;
	default:
		return -EINVAL;
40081225:	a26c      	movi.n	a2, -22
	switch (cfg->clk_src_sel) {
40081227:	021626        	beqi	a6, 1, 4008122d <clock_control_esp32_init+0x19>
4008122a:	006ec6        	j	400813e9 <clock_control_esp32_init+0x1d5>
4008122d:	001186        	j	40081277 <clock_control_esp32_init+0x63>
		REG_SET_FIELD(APB_CTRL_SYSCLK_CONF_REG, APB_CTRL_PRE_DIV_CNT, cfg->xtal_div);
40081230:	fcf351        	l32r	a5, 400805fc <_iram_text_start+0xac>
40081233:	3328      	l32i.n	a2, a3, 12
40081235:	0020c0        	memw
40081238:	0548      	l32i.n	a4, a5, 0
4008123a:	00ac62        	movi	a6, 0xfffffc00
4008123d:	104460        	and	a4, a4, a6
40081240:	942020        	extui	a2, a2, 0, 10
40081243:	202240        	or	a2, a2, a4
40081246:	0020c0        	memw
40081249:	0529      	s32i.n	a2, a5, 0
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
4008124b:	2328      	l32i.n	a2, a3, 8
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
4008124d:	fced51        	l32r	a5, 40080604 <_iram_text_start+0xb4>
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
40081250:	1142e0        	slli	a4, a2, 2
40081253:	fce821        	l32r	a2, 400805f4 <_iram_text_start+0xa4>
40081256:	224a      	add.n	a2, a2, a4
40081258:	0228      	l32i.n	a2, a2, 0
4008125a:	fce941        	l32r	a4, 40080600 <_iram_text_start+0xb0>
4008125d:	220b      	addi.n	a2, a2, -1
4008125f:	0020c0        	memw
40081262:	0429      	s32i.n	a2, a4, 0
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081264:	fce341        	l32r	a4, 400805f0 <_iram_text_start+0xa0>
40081267:	0020c0        	memw
4008126a:	0428      	l32i.n	a2, a4, 0
4008126c:	102250        	and	a2, a2, a5
4008126f:	0020c0        	memw
40081272:	0429      	s32i.n	a2, a4, 0
		break;
40081274:	0051c6        	j	400813bf <clock_control_esp32_init+0x1ab>
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081277:	1328      	l32i.n	a2, a3, 4
	switch (cpu_freq) {
40081279:	a0a042        	movi	a4, 160
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
4008127c:	2378      	l32i.n	a7, a3, 8
	switch (cpu_freq) {
4008127e:	0c1247        	beq	a2, a4, 4008128e <clock_control_esp32_init+0x7a>
40081281:	f0a052        	movi	a5, 240
		cpu_period_sel = DPORT_CPUPERIOD_SEL_240;
40081284:	240c      	movi.n	a4, 2
	switch (cpu_freq) {
40081286:	081257        	beq	a2, a5, 40081292 <clock_control_esp32_init+0x7e>
	uint32_t cpu_period_sel = DPORT_CPUPERIOD_SEL_80;
40081289:	040c      	movi.n	a4, 0
4008128b:	000046        	j	40081290 <clock_control_esp32_init+0x7c>
		cpu_period_sel = DPORT_CPUPERIOD_SEL_160;
4008128e:	064d      	mov.n	a4, a6
		pll_freq = RTC_PLL_FREQ_320M;
40081290:	060c      	movi.n	a6, 0
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
40081292:	fcdd51        	l32r	a5, 40080608 <_iram_text_start+0xb8>
40081295:	fcdd81        	l32r	a8, 4008060c <_iram_text_start+0xbc>
40081298:	0020c0        	memw
4008129b:	0528      	l32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
4008129d:	8d1c      	movi.n	a13, 24
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
4008129f:	102280        	and	a2, a2, a8
400812a2:	0020c0        	memw
400812a5:	0529      	s32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
400812a7:	0c0c      	movi.n	a12, 0
400812a9:	04a0b2        	movi	a11, 4
400812ac:	66a0a2        	movi	a10, 102
400812af:	fce081        	l32r	a8, 40080630 <_iram_text_start+0xe0>
400812b2:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_EXT_CAP, BBPLL_IR_CAL_EXT_CAP_VAL);
400812b5:	0d2c      	movi.n	a13, 32
400812b7:	1c0c      	movi.n	a12, 1
400812b9:	04a0b2        	movi	a11, 4
400812bc:	66a0a2        	movi	a10, 102
400812bf:	fcdc81        	l32r	a8, 40080630 <_iram_text_start+0xe0>
400812c2:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_FCAL, BBPLL_OC_ENB_FCAL_VAL);
400812c5:	4c0c      	movi.n	a12, 4
400812c7:	0cbd      	mov.n	a11, a12
400812c9:	9aa0d2        	movi	a13, 154
400812cc:	66a0a2        	movi	a10, 102
400812cf:	fcd881        	l32r	a8, 40080630 <_iram_text_start+0xe0>
400812d2:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_VCON, BBPLL_OC_ENB_VCON_VAL);
400812d5:	0d0c      	movi.n	a13, 0
400812d7:	ac0c      	movi.n	a12, 10
400812d9:	4b0c      	movi.n	a11, 4
400812db:	66a0a2        	movi	a10, 102
400812de:	fcd481        	l32r	a8, 40080630 <_iram_text_start+0xe0>
400812e1:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_CAL_7_0, BBPLL_BBADC_CAL_7_0_VAL);
400812e4:	0d0c      	movi.n	a13, 0
400812e6:	cc0c      	movi.n	a12, 12
400812e8:	4b0c      	movi.n	a11, 4
400812ea:	66a0a2        	movi	a10, 102
400812ed:	fcd081        	l32r	a8, 40080630 <_iram_text_start+0xe0>
400812f0:	0008e0        	callx8	a8
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400812f3:	fcc721        	l32r	a2, 40080610 <_iram_text_start+0xc0>
400812f6:	fcc781        	l32r	a8, 40080614 <_iram_text_start+0xc4>
400812f9:	0020c0        	memw
400812fc:	0258      	l32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400812fe:	bc0c      	movi.n	a12, 11
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
40081300:	105580        	and	a5, a5, a8
40081303:	fcc581        	l32r	a8, 40080618 <_iram_text_start+0xc8>
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
40081306:	4b0c      	movi.n	a11, 4
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
40081308:	205580        	or	a5, a5, a8
4008130b:	0020c0        	memw
4008130e:	0259      	s32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
40081310:	fcc351        	l32r	a5, 4008061c <_iram_text_start+0xcc>
40081313:	1126c0        	slli	a2, a6, 4
40081316:	c06260        	sub	a6, a2, a6
40081319:	256a      	add.n	a2, a5, a6
4008131b:	0102d2        	l8ui	a13, a2, 1
4008131e:	66a0a2        	movi	a10, 102
40081321:	fcc381        	l32r	a8, 40080630 <_iram_text_start+0xe0>
40081324:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081327:	0202d2        	l8ui	a13, a2, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008132a:	1127f0        	slli	a2, a7, 1
4008132d:	227a      	add.n	a2, a2, a7
4008132f:	1122f0        	slli	a2, a2, 1
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081332:	9c0c      	movi.n	a12, 9
40081334:	4b0c      	movi.n	a11, 4
40081336:	66a0a2        	movi	a10, 102
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081339:	226a      	add.n	a2, a2, a6
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
4008133b:	fcbd81        	l32r	a8, 40080630 <_iram_text_start+0xe0>
4008133e:	0008e0        	callx8	a8
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081341:	252a      	add.n	a2, a5, a2
40081343:	0602d2        	l8ui	a13, a2, 6
40081346:	050252        	l8ui	a5, a2, 5
40081349:	11dd90        	slli	a13, a13, 7
4008134c:	1155c0        	slli	a5, a5, 4
4008134f:	20dd50        	or	a13, a13, a5
40081352:	030252        	l8ui	a5, a2, 3
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081355:	2c0c      	movi.n	a12, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081357:	20dd50        	or	a13, a13, a5
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
4008135a:	74d0d0        	extui	a13, a13, 0, 8
4008135d:	4b0c      	movi.n	a11, 4
4008135f:	66a0a2        	movi	a10, 102
40081362:	fcb381        	l32r	a8, 40080630 <_iram_text_start+0xe0>
40081365:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DIV_7_0, bb_cfg->div7_0);
40081368:	0402d2        	l8ui	a13, a2, 4
4008136b:	3c0c      	movi.n	a12, 3
4008136d:	4b0c      	movi.n	a11, 4
4008136f:	66a0a2        	movi	a10, 102
40081372:	fcaf81        	l32r	a8, 40080630 <_iram_text_start+0xe0>
40081375:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DCUR, ((bb_cfg->bw << 6) | bb_cfg->dcur));
40081378:	0802d2        	l8ui	a13, a2, 8
4008137b:	070222        	l8ui	a2, a2, 7
4008137e:	11dda0        	slli	a13, a13, 6
40081381:	20dd20        	or	a13, a13, a2
40081384:	74d0d0        	extui	a13, a13, 0, 8
40081387:	5c0c      	movi.n	a12, 5
40081389:	4b0c      	movi.n	a11, 4
4008138b:	66a0a2        	movi	a10, 102
4008138e:	fca881        	l32r	a8, 40080630 <_iram_text_start+0xe0>
40081391:	0008e0        	callx8	a8
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
40081394:	fca321        	l32r	a2, 40080620 <_iram_text_start+0xd0>
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
40081397:	fc9b51        	l32r	a5, 40080604 <_iram_text_start+0xb4>
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
4008139a:	0020c0        	memw
4008139d:	0249      	s32i.n	a4, a2, 0
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
4008139f:	fc9441        	l32r	a4, 400805f0 <_iram_text_start+0xa0>
400813a2:	0020c0        	memw
400813a5:	0428      	l32i.n	a2, a4, 0
400813a7:	102250        	and	a2, a2, a5
400813aa:	fc9e51        	l32r	a5, 40080624 <_iram_text_start+0xd4>
400813ad:	202250        	or	a2, a2, a5
400813b0:	0020c0        	memw
400813b3:	0429      	s32i.n	a2, a4, 0
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
400813b5:	fc9c21        	l32r	a2, 40080628 <_iram_text_start+0xd8>
400813b8:	f44c      	movi.n	a4, 79
400813ba:	0020c0        	memw
400813bd:	0249      	s32i.n	a4, a2, 0

	/* Re-calculate the CCOUNT register value to make time calculation correct.
	 * This should be updated on each frequency change
	 * New CCOUNT = Current CCOUNT * (new freq / old freq)
	 */
	XTHAL_SET_CCOUNT((uint64_t)XTHAL_GET_CCOUNT() * cfg->cpu_freq / xtal_freq[cfg->xtal_freq_sel]);
400813bf:	03ea40        	rsr.ccount	a4
400813c2:	13a8      	l32i.n	a10, a3, 4
400813c4:	2338      	l32i.n	a3, a3, 8
400813c6:	312f40        	srai	a2, a4, 31
400813c9:	1153e0        	slli	a5, a3, 2
400813cc:	fc8a31        	l32r	a3, 400805f4 <_iram_text_start+0xa4>
400813cf:	8222a0        	mull	a2, a2, a10
400813d2:	a2ba40        	muluh	a11, a10, a4
400813d5:	335a      	add.n	a3, a3, a5
400813d7:	03c8      	l32i.n	a12, a3, 0
400813d9:	82aa40        	mull	a10, a10, a4
400813dc:	0d0c      	movi.n	a13, 0
400813de:	80b2b0        	add	a11, a2, a11
400813e1:	0231e5        	call8	40083700 <__udivdi3>
400813e4:	13eaa0        	wsr.ccount	a10
	return 0;
400813e7:	020c      	movi.n	a2, 0
}
400813e9:	f01d      	retw.n
	...

400813ec <clock_control_esp32_off>:
{
400813ec:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
400813ef:	419530        	srli	a9, a3, 5
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400813f2:	180c      	movi.n	a8, 1
400813f4:	401300        	ssl	a3
400813f7:	a13800        	sll	a3, a8
400813fa:	1189d0        	slli	a8, a9, 3
400813fd:	fc7b91        	l32r	a9, 400805ec <_iram_text_start+0x9c>
}
40081400:	020c      	movi.n	a2, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
40081402:	998a      	add.n	a9, a9, a8
	return *(volatile uint32_t *)addr;
40081404:	09a8      	l32i.n	a10, a9, 0
40081406:	f87c      	movi.n	a8, -1
40081408:	0020c0        	memw
4008140b:	0ab8      	l32i.n	a11, a10, 0
4008140d:	308830        	xor	a8, a8, a3
40081410:	1088b0        	and	a8, a8, a11
	*(volatile uint32_t *)addr = data;
40081413:	0020c0        	memw
40081416:	0a89      	s32i.n	a8, a10, 0
	return *(volatile uint32_t *)addr;
40081418:	1988      	l32i.n	a8, a9, 4
4008141a:	0020c0        	memw
4008141d:	0898      	l32i.n	a9, a8, 0
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
4008141f:	203390        	or	a3, a3, a9
	*(volatile uint32_t *)addr = data;
40081422:	0020c0        	memw
40081425:	0839      	s32i.n	a3, a8, 0
}
40081427:	f01d      	retw.n
40081429:	000000        	ill

4008142c <set_reg>:

	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
}

static int set_reg(uint32_t pin, uint32_t clr_mask, uint32_t set_mask)
{
4008142c:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008142f:	782c      	movi.n	a8, 39
	volatile uint32_t *reg = reg_for_pin(pin);
	uint32_t v;

	if (!reg) {
		return -EINVAL;
40081431:	aa6c      	movi.n	a10, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081433:	253827        	bltu	a8, a2, 4008145c <set_reg+0x30>
	off = pin_mux_off[pin];
40081436:	fc7f91        	l32r	a9, 40080634 <_iram_text_start+0xe4>
40081439:	992a      	add.n	a9, a9, a2
4008143b:	000992        	l8ui	a9, a9, 0
	if (!off) {
4008143e:	a99c      	beqz.n	a9, 4008145c <set_reg+0x30>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081440:	fc7e21        	l32r	a2, 40080638 <_iram_text_start+0xe8>
	}

	v = *reg;
	v &= ~clr_mask;
40081443:	f87c      	movi.n	a8, -1
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081445:	992a      	add.n	a9, a9, a2
	v = *reg;
40081447:	0020c0        	memw
4008144a:	0928      	l32i.n	a2, a9, 0
	v &= ~clr_mask;
4008144c:	308830        	xor	a8, a8, a3
4008144f:	108820        	and	a8, a8, a2
	v |= set_mask;
40081452:	208840        	or	a8, a8, a4
	*reg = v;
40081455:	0020c0        	memw
40081458:	0989      	s32i.n	a8, a9, 0

	return 0;
4008145a:	0a0c      	movi.n	a10, 0
}
4008145c:	0a2d      	mov.n	a2, a10
4008145e:	f01d      	retw.n

40081460 <pinmux_set>:

static int pinmux_set(const struct device *dev, uint32_t pin, uint32_t func)
{
40081460:	004136        	entry	a1, 32
40081463:	20a330        	or	a10, a3, a3
	 * value due to a deficiency in the pinmux API.  This setting is
	 * part of the GPIO API.
	 */

	if (func > 6) {
		return -EINVAL;
40081466:	eaaf22        	movi	a2, -22
	if (func > 6) {
40081469:	1174f6        	bgeui	a4, 7, 4008147e <pinmux_set+0x1e>
	}

	return set_reg(pin, MCU_SEL_M, func<<MCU_SEL_S | 2<<FUN_DRV_S);
4008146c:	fc74c1        	l32r	a12, 4008063c <_iram_text_start+0xec>
4008146f:	114440        	slli	a4, a4, 12
40081472:	fc73b1        	l32r	a11, 40080640 <_iram_text_start+0xf0>
40081475:	20c4c0        	or	a12, a4, a12
40081478:	fffb25        	call8	4008142c <set_reg>
4008147b:	202aa0        	or	a2, a10, a10
}
4008147e:	f01d      	retw.n

40081480 <pinmux_input>:
	return -EINVAL;
}

#define CFG(id)   ((GPIO_ ## id ## _REG) & 0xff)
static int pinmux_input(const struct device *dev, uint32_t pin, uint8_t func)
{
40081480:	004136        	entry	a1, 32
	static const uint8_t offs[2][3] = {
		{ CFG(ENABLE1_W1TC), CFG(ENABLE1_W1TS), 32 },
		{ CFG(ENABLE_W1TC), CFG(ENABLE_W1TS), 0 },
	};
	const uint8_t *line = offs[pin < 32];
40081483:	f81c      	movi.n	a8, 31
{
40081485:	744040        	extui	a4, a4, 0, 8
	const uint8_t *line = offs[pin < 32];
40081488:	00a052        	movi	a5, 0
4008148b:	013837        	bltu	a8, a3, 40081490 <pinmux_input+0x10>
4008148e:	350c      	movi.n	a5, 3
40081490:	fc6d81        	l32r	a8, 40080644 <_iram_text_start+0xf4>
	/* Since PINMUX_INPUT_ENABLED == 1 and PINMUX_OUTPUT_ENABLED == 0,
	 * we can not set a gpio port as input and output at the same time,
	 * So we always set the gpio as input. Thus, the gpio can be used on
	 * I2C drivers for example.
	 */
	r = set_reg(pin, 0, FUN_IE);
40081493:	00a2c2        	movi	a12, 0x200
40081496:	0b0c      	movi.n	a11, 0
40081498:	03ad      	mov.n	a10, a3
	const uint8_t *line = offs[pin < 32];
4008149a:	805580        	add	a5, a5, a8
	r = set_reg(pin, 0, FUN_IE);
4008149d:	fff8e5        	call8	4008142c <set_reg>
	if (func == PINMUX_INPUT_ENABLED) {
400814a0:	051466        	bnei	a4, 1, 400814a9 <pinmux_input+0x29>
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[0]);
400814a3:	000582        	l8ui	a8, a5, 0
400814a6:	000286        	j	400814b4 <pinmux_input+0x34>
	} else if (func == PINMUX_OUTPUT_ENABLED) {
400814a9:	74ec      	bnez.n	a4, 400814d4 <pinmux_input+0x54>
		if (pin >= 34U && pin <= 39U) {
400814ab:	dec342        	addi	a4, a3, -34
400814ae:	2264b6        	bltui	a4, 6, 400814d4 <pinmux_input+0x54>
			/* These pins are input only */
			return -EINVAL;
		}
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[1]);
400814b1:	010582        	l8ui	a8, a5, 1
400814b4:	fc6541        	l32r	a4, 40080648 <_iram_text_start+0xf8>
400814b7:	884a      	add.n	a8, a8, a4
	} else {
		return -EINVAL;
	}

	if (r < 0) {
400814b9:	019a96        	bltz	a10, 400814d6 <pinmux_input+0x56>
		return r;
	}

	*reg = BIT(pin - line[2]);
400814bc:	020542        	l8ui	a4, a5, 2
400814bf:	150c      	movi.n	a5, 1
400814c1:	c03340        	sub	a3, a3, a4
400814c4:	401300        	ssl	a3
400814c7:	a13500        	sll	a3, a5
400814ca:	0020c0        	memw
400814cd:	0839      	s32i.n	a3, a8, 0

	ARG_UNUSED(dev);
	return 0;
400814cf:	0a0c      	movi.n	a10, 0
400814d1:	000046        	j	400814d6 <pinmux_input+0x56>
		return -EINVAL;
400814d4:	aa6c      	movi.n	a10, -22
}
400814d6:	0a2d      	mov.n	a2, a10
400814d8:	f01d      	retw.n
	...

400814dc <pinmux_initialize>:
	.pullup = pinmux_pullup,
	.input = pinmux_input
};

static int pinmux_initialize(const struct device *device)
{
400814dc:	004136        	entry	a1, 32
	uint32_t pin;

	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400814df:	020c      	movi.n	a2, 0
		pinmux_set(NULL, pin, 0);
400814e1:	203220        	or	a3, a2, a2
400814e4:	20b220        	or	a11, a2, a2
400814e7:	20c330        	or	a12, a3, a3
400814ea:	20a330        	or	a10, a3, a3
400814ed:	fff725        	call8	40081460 <pinmux_set>
	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400814f0:	221b      	addi.n	a2, a2, 1
400814f2:	882c      	movi.n	a8, 40
400814f4:	ec9287        	bne	a2, a8, 400814e4 <pinmux_initialize+0x8>
	}

	ARG_UNUSED(device);
	return 0;
}
400814f7:	020c      	movi.n	a2, 0
400814f9:	f01d      	retw.n
	...

400814fc <pinmux_pullup>:
{
400814fc:	004136        	entry	a1, 32
400814ff:	744040        	extui	a4, a4, 0, 8
40081502:	03ad      	mov.n	a10, a3
	switch (func) {
40081504:	848c      	beqz.n	a4, 40081510 <pinmux_pullup+0x14>
40081506:	0f1426        	beqi	a4, 1, 40081519 <pinmux_pullup+0x1d>
	return -EINVAL;
40081509:	aa6c      	movi.n	a10, -22
4008150b:	0004c6        	j	40081522 <pinmux_pullup+0x26>
4008150e:	c20000        	quou	a0, a0, a0
		return set_reg(pin, FUN_PU, FUN_PD);
40081511:	b280a0        	mulsh	a8, a0, a10
40081514:	4600a1        	l32r	a10, 40052d14 <esp32_rom_gpio_matrix_out+0x48e08>
40081517:	c20001        	l32r	a0, 40071d18 <esp32_rom_gpio_matrix_out+0x67e0c>
		return set_reg(pin, FUN_PD, FUN_PU);
4008151a:	b200a1        	l32r	a10, 4006dd1c <esp32_rom_gpio_matrix_out+0x63e10>
4008151d:	e580a0        	extui	a8, a10, 16, 15
40081520:	2dfff0        	lsi	f15, a15, 180
}
40081523:	1d0a      	add.n	a1, a13, a0
40081525:	0000f0        	callx12	a0

40081528 <pinmux_get>:
{
40081528:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008152b:	782c      	movi.n	a8, 39
		return -EINVAL;
4008152d:	a26c      	movi.n	a2, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008152f:	1d3837        	bltu	a8, a3, 40081550 <pinmux_get+0x28>
	off = pin_mux_off[pin];
40081532:	fc4021        	l32r	a2, 40080634 <_iram_text_start+0xe4>
40081535:	223a      	add.n	a2, a2, a3
40081537:	000282        	l8ui	a8, a2, 0
		return -EINVAL;
4008153a:	a26c      	movi.n	a2, -22
	if (!off) {
4008153c:	089c      	beqz.n	a8, 40081550 <pinmux_get+0x28>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
4008153e:	fc3e21        	l32r	a2, 40080638 <_iram_text_start+0xe8>
40081541:	882a      	add.n	a8, a8, a2
	*func = (*reg & MCU_SEL_M) >> MCU_SEL_S;
40081543:	0020c0        	memw
40081546:	0828      	l32i.n	a2, a8, 0
40081548:	242c20        	extui	a2, a2, 12, 3
4008154b:	0429      	s32i.n	a2, a4, 0
	return 0;
4008154d:	00a022        	movi	a2, 0
}
40081550:	f01d      	retw.n
	...

40081554 <ccompare_isr>:
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
	return val;
}

static void ccompare_isr(const void *arg)
{
40081554:	004136        	entry	a1, 32
	z_xt_ints_off(1 << irq);
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081557:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008155a:	03eaa0        	rsr.ccount	a10
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount();
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
4008155d:	fc3b91        	l32r	a9, 4008064c <_iram_text_start+0xfc>
40081560:	fc3c81        	l32r	a8, 40080650 <_iram_text_start+0x100>
40081563:	0029b2        	l32i	a11, a9, 0
40081566:	c0aab0        	sub	a10, a10, a11
40081569:	a2aa80        	muluh	a10, a10, a8

	last_count += dticks * CYC_PER_TICK;
4008156c:	fc3a81        	l32r	a8, 40080654 <_iram_text_start+0x104>
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
4008156f:	41a9a0        	srli	a10, a10, 9
	last_count += dticks * CYC_PER_TICK;
40081572:	828a80        	mull	a8, a10, a8
40081575:	8088b0        	add	a8, a8, a11
40081578:	006982        	s32i	a8, a9, 0
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	XTOS_RESTORE_INTLEVEL(key);
4008157b:	13e6c0        	wsr.ps	a12
4008157e:	002010        	rsync
		}
		set_ccompare(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
40081581:	01d2a5        	call8	400832ac <z_clock_announce>
}
40081584:	f01d      	retw.n
	...

40081588 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
40081588:	004136        	entry	a1, 32
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008158b:	03ea80        	rsr.ccount	a8
	ARG_UNUSED(device);

	IRQ_CONNECT(TIMER_IRQ, 0, ccompare_isr, 0, 0);
	set_ccompare(ccount() + CYC_PER_TICK);
4008158e:	fc3191        	l32r	a9, 40080654 <_iram_text_start+0x104>
40081591:	889a      	add.n	a8, a8, a9
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
40081593:	13f180        	wsr.ccompare1	a8
 */
static inline void z_xt_ints_on(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081596:	03e480        	rsr.intenable	a8
	val |= mask;
40081599:	fc2f91        	l32r	a9, 40080658 <_iram_text_start+0x108>
4008159c:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
4008159f:	13e480        	wsr.intenable	a8
400815a2:	002010        	rsync
	irq_enable(TIMER_IRQ);
	return 0;
}
400815a5:	020c      	movi.n	a2, 0
400815a7:	f01d      	retw.n
400815a9:	000000        	ill

400815ac <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
400815ac:	004136        	entry	a1, 32
	ARG_UNUSED(idle);

#if defined(CONFIG_TICKLESS_KERNEL)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
400815af:	020266        	bnei	a2, -1, 400815b5 <z_clock_set_timeout+0x9>
400815b2:	fc2a21        	l32r	a2, 4008065c <_iram_text_start+0x10c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400815b5:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400815b8:	03eab0        	rsr.ccount	a11

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount(), cyc, adj;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK;
400815bb:	080c      	movi.n	a8, 0
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
400815bd:	220b      	addi.n	a2, a2, -1
	cyc = ticks * CYC_PER_TICK;
400815bf:	532280        	max	a2, a2, a8
400815c2:	fc2681        	l32r	a8, 4008065c <_iram_text_start+0x10c>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815c5:	fc26a1        	l32r	a10, 40080660 <_iram_text_start+0x110>
	cyc = ticks * CYC_PER_TICK;
400815c8:	432280        	min	a2, a2, a8
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815cb:	fc2081        	l32r	a8, 4008064c <_iram_text_start+0xfc>
	cyc = ticks * CYC_PER_TICK;
400815ce:	fc21d1        	l32r	a13, 40080654 <_iram_text_start+0x104>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815d1:	0898      	l32i.n	a9, a8, 0
	cyc = ticks * CYC_PER_TICK;
400815d3:	8222d0        	mull	a2, a2, a13
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815d6:	c0aa90        	sub	a10, a10, a9
400815d9:	aaba      	add.n	a10, a10, a11
	if (cyc <= MAX_CYC - adj) {
400815db:	f87c      	movi.n	a8, -1
400815dd:	30e8a0        	xor	a14, a8, a10
400815e0:	013e27        	bltu	a14, a2, 400815e5 <z_clock_set_timeout+0x39>
		cyc += adj;
400815e3:	82aa      	add.n	a8, a2, a10
	} else {
		cyc = MAX_CYC;
	}
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400815e5:	fc1a21        	l32r	a2, 40080650 <_iram_text_start+0x100>
400815e8:	a28820        	muluh	a8, a8, a2
	cyc += last_count;

	if ((cyc - curr) < MIN_DELAY) {
400815eb:	e7a322        	movi	a2, 0x3e7
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400815ee:	418980        	srli	a8, a8, 9
400815f1:	8288d0        	mull	a8, a8, a13
	cyc += last_count;
400815f4:	808980        	add	a8, a9, a8
	if ((cyc - curr) < MIN_DELAY) {
400815f7:	c0b8b0        	sub	a11, a8, a11
400815fa:	0232b7        	bltu	a2, a11, 40081600 <z_clock_set_timeout+0x54>
		cyc += CYC_PER_TICK;
400815fd:	8088d0        	add	a8, a8, a13
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
40081600:	13f180        	wsr.ccompare1	a8
	XTOS_RESTORE_INTLEVEL(key);
40081603:	13e6c0        	wsr.ps	a12
40081606:	002010        	rsync
	}

	set_ccompare(cyc);
	k_spin_unlock(&lock, key);
#endif
}
40081609:	f01d      	retw.n
	...

4008160c <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
4008160c:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008160f:	006380        	rsil	a8, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081612:	03ea20        	rsr.ccount	a2
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (ccount() - last_count) / CYC_PER_TICK;
40081615:	fc0d91        	l32r	a9, 4008064c <_iram_text_start+0xfc>
40081618:	0998      	l32i.n	a9, a9, 0
4008161a:	c02290        	sub	a2, a2, a9
4008161d:	fc0c91        	l32r	a9, 40080650 <_iram_text_start+0x100>
40081620:	a22290        	muluh	a2, a2, a9
40081623:	412920        	srli	a2, a2, 9
	XTOS_RESTORE_INTLEVEL(key);
40081626:	13e680        	wsr.ps	a8
40081629:	002010        	rsync

	k_spin_unlock(&lock, key);
	return ret;
}
4008162c:	f01d      	retw.n
	...

40081630 <z_xtensa_fatal_error>:
	return "na";
#endif
}

void z_xtensa_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
40081630:	004136        	entry	a1, 32
	if (esf) {
40081633:	338c      	beqz.n	a3, 4008163a <z_xtensa_fatal_error+0xa>
		z_xtensa_dump_stack(esf);
40081635:	03ad      	mov.n	a10, a3
40081637:	01e0a5        	call8	40083440 <z_xtensa_dump_stack>
	}

	z_fatal_error(reason, esf);
4008163a:	20b330        	or	a11, a3, a3
4008163d:	20a220        	or	a10, a2, a2
40081640:	010925        	call8	400826d4 <z_fatal_error>
}
40081643:	000090        	retw
	...

40081648 <xtensa_spill_reg_windows>:
        SPILL_ALL_WINDOWS
40081648:	10ccc0        	and	a12, a12, a12
4008164b:	408030        	rotw	3
4008164e:	10ccc0        	and	a12, a12, a12
40081651:	408030        	rotw	3
40081654:	10ccc0        	and	a12, a12, a12
40081657:	408030        	rotw	3
4008165a:	10ccc0        	and	a12, a12, a12
4008165d:	408030        	rotw	3
40081660:	10ccc0        	and	a12, a12, a12
40081663:	408040        	rotw	4
        ret
40081666:	f00d      	ret.n

40081668 <xtensa_save_high_regs>:
	rsr.WINDOWSTART a2
40081668:	034920        	rsr.windowstart	a2
	slli a3, a2, (XCHAL_NUM_AREGS / 4)
4008166b:	113200        	slli	a3, a2, 16
	or a2, a2, a3
4008166e:	202230        	or	a2, a2, a3
	rsr.WINDOWBASE a3
40081671:	034830        	rsr.windowbase	a3
	ssr a3
40081674:	400300        	ssr	a3
	srl a2, a2
40081677:	912020        	srl	a2, a2
	mov a3, a1 /* Stash our original stack pointer */
4008167a:	013d      	mov.n	a3, a1
	bbsi a2, 1, _high_gpr_spill_done
4008167c:	28e217        	bbsi	a2, 1, 400816a8 <_high_gpr_spill_done>
	addi a1, a1, -16
4008167f:	f0c112        	addi	a1, a1, -16
	s32i a4, a1, 0
40081682:	0149      	s32i.n	a4, a1, 0
	s32i a5, a1, 4
40081684:	1159      	s32i.n	a5, a1, 4
	s32i a6, a1, 8
40081686:	2169      	s32i.n	a6, a1, 8
	s32i a7, a1, 12
40081688:	3179      	s32i.n	a7, a1, 12
	bbsi a2, 2, _high_gpr_spill_done
4008168a:	1ae227        	bbsi	a2, 2, 400816a8 <_high_gpr_spill_done>
	addi a1, a1, -16
4008168d:	f0c112        	addi	a1, a1, -16
	s32i a8, a1, 0
40081690:	0189      	s32i.n	a8, a1, 0
	s32i a9, a1, 4
40081692:	1199      	s32i.n	a9, a1, 4
	s32i a10, a1, 8
40081694:	21a9      	s32i.n	a10, a1, 8
	s32i a11, a1, 12
40081696:	31b9      	s32i.n	a11, a1, 12
	bbsi a2, 3, _high_gpr_spill_done
40081698:	0ce237        	bbsi	a2, 3, 400816a8 <_high_gpr_spill_done>
	addi a1, a1, -16
4008169b:	f0c112        	addi	a1, a1, -16
	s32i a12, a1, 0
4008169e:	01c9      	s32i.n	a12, a1, 0
	s32i a13, a1, 4
400816a0:	11d9      	s32i.n	a13, a1, 4
	s32i a14, a1, 8
400816a2:	0261e2        	s32i	a14, a1, 8
	s32i a15, a1, 12
400816a5:	0361f2        	s32i	a15, a1, 12

400816a8 <_high_gpr_spill_done>:
	addi a1, a1, -4
400816a8:	fcc112        	addi	a1, a1, -4
	s32i a3, a1, 0
400816ab:	0139      	s32i.n	a3, a1, 0
	ret
400816ad:	f00d      	ret.n
	...

400816b0 <xtensa_restore_high_regs>:
	l32i a2, a1, 0
400816b0:	0128      	l32i.n	a2, a1, 0
	addi a1, a1, 4
400816b2:	114b      	addi.n	a1, a1, 4
	mov a3, a2
400816b4:	023d      	mov.n	a3, a2
	beq a1, a2, _high_restore_done
400816b6:	261127        	beq	a1, a2, 400816e0 <_high_restore_done>
	addi a2, a2, -16
400816b9:	f0c222        	addi	a2, a2, -16
	l32i a4, a2, 0
400816bc:	0248      	l32i.n	a4, a2, 0
	l32i a5, a2, 4
400816be:	1258      	l32i.n	a5, a2, 4
	l32i a6, a2, 8
400816c0:	2268      	l32i.n	a6, a2, 8
	l32i a7, a2, 12
400816c2:	3278      	l32i.n	a7, a2, 12
	beq a1, a2, _high_restore_done
400816c4:	181127        	beq	a1, a2, 400816e0 <_high_restore_done>
	addi a2, a2, -16
400816c7:	f0c222        	addi	a2, a2, -16
	l32i a8, a2, 0
400816ca:	0288      	l32i.n	a8, a2, 0
	l32i a9, a2, 4
400816cc:	1298      	l32i.n	a9, a2, 4
	l32i a10, a2, 8
400816ce:	22a8      	l32i.n	a10, a2, 8
	l32i a11, a2, 12
400816d0:	32b8      	l32i.n	a11, a2, 12
	beq a1, a2, _high_restore_done
400816d2:	0a1127        	beq	a1, a2, 400816e0 <_high_restore_done>
	addi a2, a2, -16
400816d5:	f0c222        	addi	a2, a2, -16
	l32i a12, a2, 0
400816d8:	02c8      	l32i.n	a12, a2, 0
	l32i a13, a2, 4
400816da:	12d8      	l32i.n	a13, a2, 4
	l32i a14, a2, 8
400816dc:	22e8      	l32i.n	a14, a2, 8
	l32i a15, a2, 12
400816de:	32f8      	l32i.n	a15, a2, 12

400816e0 <_high_restore_done>:
	mov a1, a3 /* Original stack */
400816e0:	031d      	mov.n	a1, a3
	ret
400816e2:	f00d      	ret.n
	...

400816e5 <_restore_context>:
	call0 xtensa_restore_high_regs
400816e5:	fffc85        	call0	400816b0 <xtensa_restore_high_regs>
	l32i a0, a1, BSA_PC_OFF
400816e8:	6108      	l32i.n	a0, a1, 24
	wsr.EPC6 a0
400816ea:	13b600        	wsr.epc6	a0
	l32i a0, a1, BSA_PS_OFF
400816ed:	5108      	l32i.n	a0, a1, 20
	wsr.EPS6 a0
400816ef:	13c600        	wsr.eps6	a0
	l32i a0, a1, BSA_SAR_OFF
400816f2:	4108      	l32i.n	a0, a1, 16
	wsr.SAR a0
400816f4:	130300        	wsr.sar	a0
	l32i a0, a1, BSA_LBEG_OFF
400816f7:	3108      	l32i.n	a0, a1, 12
	wsr.LBEG a0
400816f9:	130000        	wsr.lbeg	a0
	l32i a0, a1, BSA_LEND_OFF
400816fc:	2108      	l32i.n	a0, a1, 8
	wsr.LEND a0
400816fe:	130100        	wsr.lend	a0
	l32i a0, a1, BSA_LCOUNT_OFF
40081701:	1108      	l32i.n	a0, a1, 4
	wsr.LCOUNT a0
40081703:	130200        	wsr.lcount	a0
	l32i a0, a1, BSA_SCOMPARE1_OFF
40081706:	0108      	l32i.n	a0, a1, 0
	wsr.SCOMPARE1 a0
40081708:	130c00        	wsr.scompare1	a0
	rsync
4008170b:	002010        	rsync
	l32i a0, a1, BSA_A0_OFF
4008170e:	7108      	l32i.n	a0, a1, 28
	l32i a2, a1, BSA_A2_OFF
40081710:	9128      	l32i.n	a2, a1, 36
	l32i a3, a1, BSA_A3_OFF
40081712:	a138      	l32i.n	a3, a1, 40
	addi a1, a1, BASE_SAVE_AREA_SIZE
40081714:	3cc112        	addi	a1, a1, 60
	rfi 6
40081717:	003610        	rfi	6
	...

4008171c <xtensa_switch>:
	entry a1, 16
4008171c:	002136        	entry	a1, 16
	SPILL_ALL_WINDOWS
4008171f:	10ccc0        	and	a12, a12, a12
40081722:	408030        	rotw	3
40081725:	10ccc0        	and	a12, a12, a12
40081728:	408030        	rotw	3
4008172b:	10ccc0        	and	a12, a12, a12
4008172e:	408030        	rotw	3
40081731:	10ccc0        	and	a12, a12, a12
40081734:	408030        	rotw	3
40081737:	10ccc0        	and	a12, a12, a12
4008173a:	408040        	rotw	4
	addi a1, a1, -BASE_SAVE_AREA_SIZE
4008173d:	c4c112        	addi	a1, a1, -60
	s32i a0, a1, BSA_A0_OFF
40081740:	7109      	s32i.n	a0, a1, 28
	s32i a2, a1, BSA_A2_OFF
40081742:	9129      	s32i.n	a2, a1, 36
	s32i a3, a1, BSA_A3_OFF
40081744:	a139      	s32i.n	a3, a1, 40
	ODD_REG_SAVE
40081746:	030300        	rsr.sar	a0
40081749:	4109      	s32i.n	a0, a1, 16
4008174b:	030000        	rsr.lbeg	a0
4008174e:	3109      	s32i.n	a0, a1, 12
40081750:	030100        	rsr.lend	a0
40081753:	2109      	s32i.n	a0, a1, 8
40081755:	030200        	rsr.lcount	a0
40081758:	1109      	s32i.n	a0, a1, 4
4008175a:	030c00        	rsr.scompare1	a0
4008175d:	0109      	s32i.n	a0, a1, 0
	rsr.PS a0
4008175f:	03e600        	rsr.ps	a0
	s32i a0, a1, BSA_PS_OFF
40081762:	5109      	s32i.n	a0, a1, 20
	movi a0, _switch_restore_pc
40081764:	fbc001        	l32r	a0, 40080664 <_iram_text_start+0x114>
	s32i a0, a1, BSA_PC_OFF
40081767:	6109      	s32i.n	a0, a1, 24
	call0 xtensa_save_high_regs
40081769:	ffefc5        	call0	40081668 <xtensa_save_high_regs>
	l32i a2, a1, 0
4008176c:	0128      	l32i.n	a2, a1, 0
	l32i a3, a2, BSA_A3_OFF
4008176e:	a238      	l32i.n	a3, a2, 40
	s32i a1, a3, 0
40081770:	0319      	s32i.n	a1, a3, 0
	l32i a1, a2, BSA_A2_OFF
40081772:	9218      	l32i.n	a1, a2, 36
	j _restore_context
40081774:	ffdb46        	j	400816e5 <_restore_context>

40081777 <_switch_restore_pc>:
	retw
40081777:	f01d      	retw.n
40081779:	000000        	ill

4008177c <_handle_excint>:
	EXCINT_HANDLER CONFIG_XTENSA_KERNEL_CPU_PTR_SR, ___cpu_t_nested_OFFSET, ___cpu_t_irq_stack_OFFSET
4008177c:	8129      	s32i.n	a2, a1, 32
4008177e:	030300        	rsr.sar	a0
40081781:	4109      	s32i.n	a0, a1, 16
40081783:	030000        	rsr.lbeg	a0
40081786:	3109      	s32i.n	a0, a1, 12
40081788:	030100        	rsr.lend	a0
4008178b:	2109      	s32i.n	a0, a1, 8
4008178d:	030200        	rsr.lcount	a0
40081790:	1109      	s32i.n	a0, a1, 4
40081792:	030c00        	rsr.scompare1	a0
40081795:	0109      	s32i.n	a0, a1, 0
40081797:	ffed05        	call0	40081668 <xtensa_save_high_regs>
4008179a:	0128      	l32i.n	a2, a1, 0
4008179c:	8228      	l32i.n	a2, a2, 32
4008179e:	03e600        	rsr.ps	a0
400817a1:	f30c      	movi.n	a3, 15
400817a3:	100030        	and	a0, a0, a3
400817a6:	a0cc      	bnez.n	a0, 400817b4 <_not_l1>
400817a8:	03e600        	rsr.ps	a0
400817ab:	01a032        	movi	a3, 1
400817ae:	200030        	or	a0, a0, a3
400817b1:	13e600        	wsr.ps	a0

400817b4 <_not_l1>:
400817b4:	03e600        	rsr.ps	a0
400817b7:	f36c      	movi.n	a3, -17
400817b9:	100030        	and	a0, a0, a3
400817bc:	13e600        	wsr.ps	a0
400817bf:	002010        	rsync
400817c2:	03f430        	rsr.misc0	a3
400817c5:	0308      	l32i.n	a0, a3, 0
400817c7:	708c      	beqz.n	a0, 400817d2 <_switch_stacks_3>
400817c9:	001b      	addi.n	a0, a0, 1
400817cb:	0309      	s32i.n	a0, a3, 0
400817cd:	013d      	mov.n	a3, a1
400817cf:	000146        	j	400817d8 <_do_call_3>

400817d2 <_switch_stacks_3>:
400817d2:	001b      	addi.n	a0, a0, 1
400817d4:	0309      	s32i.n	a0, a3, 0
400817d6:	1338      	l32i.n	a3, a3, 4

400817d8 <_do_call_3>:
400817d8:	036d      	mov.n	a6, a3
400817da:	01ad      	mov.n	a10, a1
400817dc:	013d      	mov.n	a3, a1
400817de:	02bd      	mov.n	a11, a2
400817e0:	0118      	l32i.n	a1, a1, 0
400817e2:	3cc112        	addi	a1, a1, 60
400817e5:	000095        	call4	400817f0 <_xstack_call0_5>
400817e8:	031d      	mov.n	a1, a3
400817ea:	062d      	mov.n	a2, a6
400817ec:	0003c6        	j	400817ff <_xstack_returned_5>
	...

400817f0 <_xstack_call0_5>:
400817f0:	002136        	entry	a1, 16
400817f3:	021d      	mov.n	a1, a2
400817f5:	000055        	call4	400817fc <_xstack_call1_5>
400817f8:	062d      	mov.n	a2, a6
400817fa:	f01d      	retw.n

400817fc <_xstack_call1_5>:
400817fc:	0007a0        	jx	a7

400817ff <_xstack_returned_5>:
400817ff:	006700        	rsil	a0, 7
40081802:	03f430        	rsr.misc0	a3
40081805:	0308      	l32i.n	a0, a3, 0
40081807:	000b      	addi.n	a0, a0, -1
40081809:	0309      	s32i.n	a0, a3, 0
4008180b:	251617        	beq	a6, a1, 40081834 <_restore_3>
4008180e:	0118      	l32i.n	a1, a1, 0
40081810:	3cc112        	addi	a1, a1, 60
40081813:	10ccc0        	and	a12, a12, a12
40081816:	408030        	rotw	3
40081819:	10ccc0        	and	a12, a12, a12
4008181c:	408030        	rotw	3
4008181f:	10ccc0        	and	a12, a12, a12
40081822:	408030        	rotw	3
40081825:	10ccc0        	and	a12, a12, a12
40081828:	408030        	rotw	3
4008182b:	10ccc0        	and	a12, a12, a12
4008182e:	408040        	rotw	4
40081831:	201660        	or	a1, a6, a6

40081834 <_restore_3>:
40081834:	ffab46        	j	400816e5 <_restore_context>
	...

40081838 <xtensa_init_stack>:
LOG_MODULE_DECLARE(os);

void *xtensa_init_stack(int *stack_top,
			void (*entry)(void *, void *, void *),
			void *arg1, void *arg2, void *arg3)
{
40081838:	004136        	entry	a1, 32
	 * arrange to enter the function with a CALLINC of 1 and a
	 * stack pointer 16 bytes above the top, so its ENTRY at the
	 * start will decrement the stack pointer by 16.
	 */
	const int bsasz = BASE_SAVE_AREA_SIZE - 16;
	void **bsa = (void **) (((char *) stack_top) - bsasz);
4008183b:	d4c272        	addi	a7, a2, -44

	(void)memset(bsa, 0, bsasz);
4008183e:	cc2c      	movi.n	a12, 44
40081840:	0b0c      	movi.n	a11, 0
40081842:	20a770        	or	a10, a7, a7
40081845:	01c1e5        	call8	40083464 <memset>

	bsa[BSA_PC_OFF/4] = z_thread_entry;
40081848:	fb8891        	l32r	a9, 40080668 <_iram_text_start+0x118>
4008184b:	ecc282        	addi	a8, a2, -20
4008184e:	0899      	s32i.n	a9, a8, 0
	bsa[BSA_PS_OFF/4] = (void *)(PS_WOE | PS_UM | PS_CALLINC(1));
40081850:	fb8791        	l32r	a9, 4008066c <_iram_text_start+0x11c>
40081853:	e8c282        	addi	a8, a2, -24
40081856:	0899      	s32i.n	a9, a8, 0
	/* Arguments to z_thread_entry().  Remember these start at A6,
	 * which will be rotated into A2 by the ENTRY instruction that
	 * begins the C function.  And A4-A7 and A8-A11 are optional
	 * quads that live below the BSA!
	 */
	bsa[-1] = arg1;  /* a7 */
40081858:	d0c282        	addi	a8, a2, -48
4008185b:	0849      	s32i.n	a4, a8, 0
	bsa[-2] = entry; /* a6 */
4008185d:	ccc282        	addi	a8, a2, -52
40081860:	0839      	s32i.n	a3, a8, 0
	bsa[-3] = 0;     /* a5 */
40081862:	c8c292        	addi	a9, a2, -56
40081865:	080c      	movi.n	a8, 0
40081867:	0989      	s32i.n	a8, a9, 0
	bsa[-4] = 0;     /* a4 */
40081869:	c4c292        	addi	a9, a2, -60
4008186c:	0989      	s32i.n	a8, a9, 0

	bsa[-5] = 0;     /* a11 */
4008186e:	c0c292        	addi	a9, a2, -64
40081871:	0989      	s32i.n	a8, a9, 0
	bsa[-6] = 0;     /* a10 */
40081873:	bcc292        	addi	a9, a2, -68
40081876:	0989      	s32i.n	a8, a9, 0
	bsa[-7] = arg3;  /* a9 */
40081878:	b8c282        	addi	a8, a2, -72
4008187b:	0869      	s32i.n	a6, a8, 0
	bsa[-8] = arg2;  /* a8 */
4008187d:	b4c282        	addi	a8, a2, -76
40081880:	0859      	s32i.n	a5, a8, 0

	/* Finally push the BSA pointer and return the stack pointer
	 * as the handle
	 */
	bsa[-9] = bsa;
40081882:	b0c222        	addi	a2, a2, -80
40081885:	0279      	s32i.n	a7, a2, 0
	return &bsa[-9];
}
40081887:	f01d      	retw.n
40081889:	000000        	ill

4008188c <arch_new_thread>:

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
4008188c:	004136        	entry	a1, 32
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
4008188f:	81e8      	l32i.n	a14, a1, 32
{
40081891:	07dd      	mov.n	a13, a7
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
40081893:	06cd      	mov.n	a12, a6
40081895:	05bd      	mov.n	a11, a5
40081897:	04ad      	mov.n	a10, a4
40081899:	fff9e5        	call8	40081838 <xtensa_init_stack>
4008189c:	1462a2        	s32i	a10, a2, 80
						  p1, p2, p3);
}
4008189f:	f01d      	retw.n
400818a1:	000000        	ill

400818a4 <z_irq_spurious>:

void z_irq_spurious(const void *arg)
{
400818a4:	004136        	entry	a1, 32
	int irqs, ie;

	ARG_UNUSED(arg);

	__asm__ volatile("rsr.interrupt %0" : "=r"(irqs));
400818a7:	03e280        	rsr.interrupt	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(ie));
400818aa:	03e480        	rsr.intenable	a8
	LOG_ERR(" ** Spurious INTERRUPT(s) %p, INTENABLE = %p",
		(void *)irqs, (void *)ie);
	z_xtensa_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
400818ad:	0b0c      	movi.n	a11, 0
400818af:	1a0c      	movi.n	a10, 1
400818b1:	ffd7e5        	call8	40081630 <z_xtensa_fatal_error>
}
400818b4:	f01d      	retw.n
	...

400818b8 <xtensa_int2_c>:
		__asm__ volatile("wsr.intclear %0" : : "r"(m)); \
	}							\
	return z_get_next_switch_handle(interrupted_stack);		\
}

DEF_INT_C_HANDLER(2)
400818b8:	004136        	entry	a1, 32
400818bb:	03e240        	rsr.interrupt	a4
400818be:	03e430        	rsr.intenable	a3

static inline int _xtensa_handle_one_int2(unsigned int mask)
{
	int irq;

	if (mask & BIT(19)) {
400818c1:	fb6b51        	l32r	a5, 40080670 <_iram_text_start+0x120>
400818c4:	104430        	and	a4, a4, a3
400818c7:	0e8457        	bany	a4, a5, 400818d9 <xtensa_int2_c+0x21>
		mask = BIT(19);
		irq = 19;
		goto handle_irq;
	}
	if (mask & BIT(20)) {
400818ca:	fb6a31        	l32r	a3, 40080674 <_iram_text_start+0x124>
400818cd:	0f8437        	bany	a4, a3, 400818e0 <xtensa_int2_c+0x28>
		mask = BIT(20);
		irq = 20;
		goto handle_irq;
	}
	if (mask & BIT(21)) {
400818d0:	fb6a31        	l32r	a3, 40080678 <_iram_text_start+0x128>
400818d3:	0e8437        	bany	a4, a3, 400818e5 <xtensa_int2_c+0x2d>
400818d6:	000986        	j	40081900 <xtensa_int2_c+0x48>
		irq = 19;
400818d9:	381c      	movi.n	a8, 19
		mask = BIT(19);
400818db:	053d      	mov.n	a3, a5
400818dd:	000186        	j	400818e7 <xtensa_int2_c+0x2f>
		irq = 20;
400818e0:	481c      	movi.n	a8, 20
400818e2:	000046        	j	400818e7 <xtensa_int2_c+0x2f>
		mask = BIT(21);
		irq = 21;
400818e5:	581c      	movi.n	a8, 21
		goto handle_irq;
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400818e7:	fb6591        	l32r	a9, 4008067c <_iram_text_start+0x12c>
400818ea:	1188d0        	slli	a8, a8, 3
400818ed:	898a      	add.n	a8, a9, a8
400818ef:	1898      	l32i.n	a9, a8, 4
400818f1:	08a8      	l32i.n	a10, a8, 0
400818f3:	304430        	xor	a4, a4, a3
400818f6:	0009e0        	callx8	a9
400818f9:	13e330        	wsr.intclear	a3
400818fc:	fff1c6        	j	400818c7 <xtensa_int2_c+0xf>
400818ff:	a22000        	muluh	a2, a0, a0
40081902:	042520        	extui	a2, a2, 5, 1
40081905:	2aa001        	l32r	a0, 4004c388 <esp32_rom_gpio_matrix_out+0x4247c>
40081908:	009020        	all4	b2, b0:b1:b2:b3
	...

4008190c <xtensa_int3_c>:
DEF_INT_C_HANDLER(3)
4008190c:	004136        	entry	a1, 32
4008190f:	03e240        	rsr.interrupt	a4
40081912:	03e430        	rsr.intenable	a3
40081915:	104430        	and	a4, a4, a3
	if (mask & 0x408800) {
40081918:	fb5d31        	l32r	a3, 4008068c <_iram_text_start+0x13c>
4008191b:	150437        	bnone	a4, a3, 40081934 <xtensa_int3_c+0x28>
		if (mask & BIT(11)) {
4008191e:	fb4731        	l32r	a3, 4008063c <_iram_text_start+0xec>
40081921:	268437        	bany	a4, a3, 4008194b <xtensa_int3_c+0x3f>
		if (mask & BIT(15)) {
40081924:	fb4d31        	l32r	a3, 40080658 <_iram_text_start+0x108>
40081927:	258437        	bany	a4, a3, 40081950 <xtensa_int3_c+0x44>
		if (mask & BIT(22)) {
4008192a:	fb5531        	l32r	a3, 40080680 <_iram_text_start+0x130>
4008192d:	490437        	bnone	a4, a3, 4008197a <xtensa_int3_c+0x6e>
40081930:	000846        	j	40081955 <xtensa_int3_c+0x49>
40081933:	543100        	extui	a3, a0, 1, 6
		if (mask & BIT(23)) {
40081936:	37fb      	addi.n	a3, a7, 15
40081938:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(27)) {
4008193b:	fb3a      	add.n	a15, a11, a3
4008193d:	1f8437        	bany	a4, a3, 40081960 <xtensa_int3_c+0x54>
		if (mask & BIT(29)) {
40081940:	fb5231        	l32r	a3, 40080688 <_iram_text_start+0x138>
40081943:	330437        	bnone	a4, a3, 4008197a <xtensa_int3_c+0x6e>
			irq = 29;
40081946:	d81c      	movi.n	a8, 29
40081948:	000586        	j	40081962 <xtensa_int3_c+0x56>
			irq = 11;
4008194b:	b80c      	movi.n	a8, 11
4008194d:	000446        	j	40081962 <xtensa_int3_c+0x56>
			irq = 15;
40081950:	f80c      	movi.n	a8, 15
40081952:	000306        	j	40081962 <xtensa_int3_c+0x56>
			irq = 22;
40081955:	681c      	movi.n	a8, 22
40081957:	0001c6        	j	40081962 <xtensa_int3_c+0x56>
			irq = 23;
4008195a:	781c      	movi.n	a8, 23
4008195c:	000086        	j	40081962 <xtensa_int3_c+0x56>
4008195f:	b81c00        	lsi	f0, a12, 0x2e0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081962:	fb4691        	l32r	a9, 4008067c <_iram_text_start+0x12c>
40081965:	1188d0        	slli	a8, a8, 3
40081968:	898a      	add.n	a8, a9, a8
4008196a:	1898      	l32i.n	a9, a8, 4
4008196c:	08a8      	l32i.n	a10, a8, 0
4008196e:	304430        	xor	a4, a4, a3
40081971:	0009e0        	callx8	a9
40081974:	13e330        	wsr.intclear	a3
40081977:	ffe746        	j	40081918 <xtensa_int3_c+0xc>
4008197a:	20a220        	or	a10, a2, a2
4008197d:	00fc65        	call8	40082944 <z_get_next_switch_handle>
40081980:	202aa0        	or	a2, a10, a10
40081983:	000090        	retw
	...

40081988 <xtensa_int4_c>:
DEF_INT_C_HANDLER(4)
40081988:	004136        	entry	a1, 32
4008198b:	03e240        	rsr.interrupt	a4
4008198e:	03e430        	rsr.intenable	a3
40081991:	104430        	and	a4, a4, a3

static inline int _xtensa_handle_one_int4(unsigned int mask)
{
	int irq;

	if (mask & 0x3000000) {
40081994:	fb4331        	l32r	a3, 400806a0 <_iram_text_start+0x150>
40081997:	0e0437        	bnone	a4, a3, 400819a9 <xtensa_int4_c+0x21>
		if (mask & BIT(24)) {
4008199a:	fb3d31        	l32r	a3, 40080690 <_iram_text_start+0x140>
4008199d:	198437        	bany	a4, a3, 400819ba <xtensa_int4_c+0x32>
			mask = BIT(24);
			irq = 24;
			goto handle_irq;
		}
		if (mask & BIT(25)) {
400819a0:	fb3d31        	l32r	a3, 40080694 <_iram_text_start+0x144>
400819a3:	370437        	bnone	a4, a3, 400819de <xtensa_int4_c+0x56>
400819a6:	000546        	j	400819bf <xtensa_int4_c+0x37>
			mask = BIT(25);
			irq = 25;
			goto handle_irq;
		}
	} else {
		if (mask & BIT(28)) {
400819a9:	fb3b31        	l32r	a3, 40080698 <_iram_text_start+0x148>
400819ac:	148437        	bany	a4, a3, 400819c4 <xtensa_int4_c+0x3c>
			mask = BIT(28);
			irq = 28;
			goto handle_irq;
		}
		if (mask & BIT(30)) {
400819af:	fb3b31        	l32r	a3, 4008069c <_iram_text_start+0x14c>
400819b2:	280437        	bnone	a4, a3, 400819de <xtensa_int4_c+0x56>
			mask = BIT(30);
			irq = 30;
400819b5:	e81c      	movi.n	a8, 30
400819b7:	0002c6        	j	400819c6 <xtensa_int4_c+0x3e>
			irq = 24;
400819ba:	881c      	movi.n	a8, 24
400819bc:	000186        	j	400819c6 <xtensa_int4_c+0x3e>
			irq = 25;
400819bf:	981c      	movi.n	a8, 25
400819c1:	000046        	j	400819c6 <xtensa_int4_c+0x3e>
			irq = 28;
400819c4:	c81c      	movi.n	a8, 28
			goto handle_irq;
		}
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400819c6:	fb2d91        	l32r	a9, 4008067c <_iram_text_start+0x12c>
400819c9:	1188d0        	slli	a8, a8, 3
400819cc:	898a      	add.n	a8, a9, a8
400819ce:	1898      	l32i.n	a9, a8, 4
400819d0:	08a8      	l32i.n	a10, a8, 0
400819d2:	304430        	xor	a4, a4, a3
400819d5:	0009e0        	callx8	a9
400819d8:	13e330        	wsr.intclear	a3
400819db:	ffed46        	j	40081994 <xtensa_int4_c+0xc>
400819de:	20a220        	or	a10, a2, a2
400819e1:	00f625        	call8	40082944 <z_get_next_switch_handle>
400819e4:	202aa0        	or	a2, a10, a10
400819e7:	000090        	retw
	...

400819ec <xtensa_int5_c>:
DEF_INT_C_HANDLER(5)
400819ec:	004136        	entry	a1, 32
400819ef:	03e240        	rsr.interrupt	a4
400819f2:	03e430        	rsr.intenable	a3
	if (mask & BIT(16)) {
400819f5:	fb2b51        	l32r	a5, 400806a4 <_iram_text_start+0x154>
400819f8:	104430        	and	a4, a4, a3
400819fb:	0001c6        	j	40081a06 <xtensa_int5_c+0x1a>
400819fe:	300000        	xor	a0, a0, a0
40081a01:	303044        	lsi	f4, a0, 192
40081a04:	5713e3        	lsi	f14, a3, 0x15c
40081a07:	311084        	lsi	f8, a0, 196
	if (mask & BIT(26)) {
40081a0a:	37fb27        	bbsi	a11, 18, 40081a45 <xtensa_int6_c+0x1>
40081a0d:	d61184        	lsi	f8, a1, 0x358
	if (mask & BIT(31)) {
40081a10:	1c0254        	lsi	f5, a2, 112
		irq = 31;
40081a13:	31f8      	l32i.n	a15, a1, 12
		mask = BIT(31);
40081a15:	06fb26        	beqi	a11, 0x100, 40081a1f <xtensa_int5_c+0x33>
40081a18:	1c0002        	l8ui	a0, a0, 28
		irq = 16;
40081a1b:	3d08      	l32i.n	a0, a13, 12
		mask = BIT(16);
40081a1d:	004605        	call0	40081e80 <i2c_esp32_configure_pins+0x38>
40081a20:	a81c00        	lsi	f0, a12, 0x2a0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a23:	fb1691        	l32r	a9, 4008067c <_iram_text_start+0x12c>
40081a26:	1188d0        	slli	a8, a8, 3
40081a29:	808980        	add	a8, a9, a8
40081a2c:	012892        	l32i	a9, a8, 4
40081a2f:	0028a2        	l32i	a10, a8, 0
40081a32:	0009e0        	callx8	a9
40081a35:	fc7356        	bnez	a3, 40081a00 <xtensa_int5_c+0x14>
40081a38:	20a220        	or	a10, a2, a2
40081a3b:	00f0a5        	call8	40082944 <z_get_next_switch_handle>
40081a3e:	202aa0        	or	a2, a10, a10
40081a41:	000090        	retw

40081a44 <xtensa_int6_c>:
DEF_INT_C_HANDLER(6)
40081a44:	004136        	entry	a1, 32
40081a47:	20a220        	or	a10, a2, a2
40081a4a:	03e280        	rsr.interrupt	a8
40081a4d:	03e480        	rsr.intenable	a8
40081a50:	00ef25        	call8	40082944 <z_get_next_switch_handle>
40081a53:	202aa0        	or	a2, a10, a10
40081a56:	000090        	retw
40081a59:	000000        	ill

40081a5c <xtensa_int7_c>:
DEF_INT_C_HANDLER(7)
40081a5c:	004136        	entry	a1, 32
40081a5f:	03e230        	rsr.interrupt	a3
40081a62:	03e440        	rsr.intenable	a4
40081a65:	103340        	and	a3, a3, a4
	if (mask & BIT(14)) {
40081a68:	fb1241        	l32r	a4, 400806b0 <_iram_text_start+0x160>
40081a6b:	150347        	bnone	a3, a4, 40081a84 <xtensa_int7_c+0x28>
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a6e:	fb0381        	l32r	a8, 4008067c <_iram_text_start+0x12c>
40081a71:	303340        	xor	a3, a3, a4
40081a74:	1d2892        	l32i	a9, a8, 116
40081a77:	1c28a2        	l32i	a10, a8, 112
40081a7a:	0009e0        	callx8	a9
40081a7d:	13e340        	wsr.intclear	a4
40081a80:	fff9c6        	j	40081a6b <xtensa_int7_c+0xf>
40081a83:	a22000        	muluh	a2, a0, a0
40081a86:	ebe520        	f64cmpl	a14, a5, a2
40081a89:	2aa000        	mul.s	f10, f0, f0
40081a8c:	009020        	all4	b2, b0:b1:b2:b3
	...

40081a90 <xtensa_excint1_c>:
 * DEF_EXCINT 1 vector declaration in assembly code.  This one looks
 * different because exceptions and interrupts land at the same
 * vector; other interrupt levels have their own vectors.
 */
void *xtensa_excint1_c(int *interrupted_stack)
{
40081a90:	004136        	entry	a1, 32
	int cause, vaddr, *bsa = *(int **)interrupted_stack;

	__asm__ volatile("rsr.exccause %0" : "=r"(cause));
40081a93:	03e850        	rsr.exccause	a5

	if (cause == EXCCAUSE_LEVEL1_INTERRUPT) {
40081a96:	024526        	beqi	a5, 4, 40081a9c <xtensa_excint1_c+0xc>
40081a99:	0045c6        	j	40081bb4 <xtensa_excint1_c+0x124>
static inline DEF_INT_C_HANDLER(1)
40081a9c:	03e240        	rsr.interrupt	a4
40081a9f:	03e430        	rsr.intenable	a3
		if (mask & 0x780) {
40081aa2:	80a762        	movi	a6, 0x780
40081aa5:	104430        	and	a4, a4, a3
	if (mask & 0x7f) {
40081aa8:	643040        	extui	a3, a4, 0, 7
40081aab:	048316        	beqz	a3, 40081af7 <xtensa_excint1_c+0x67>
		if (mask & 0x7) {
40081aae:	243040        	extui	a3, a4, 0, 3
40081ab1:	739c      	beqz.n	a3, 40081acc <xtensa_excint1_c+0x3c>
			if (mask & BIT(0)) {
40081ab3:	043040        	extui	a3, a4, 0, 1
40081ab6:	09a356        	bnez	a3, 40081b54 <xtensa_excint1_c+0xc4>
			if (mask & BIT(1)) {
40081ab9:	290c      	movi.n	a9, 2
40081abb:	020497        	bnone	a4, a9, 40081ac1 <xtensa_excint1_c+0x31>
40081abe:	0025c6        	j	40081b59 <xtensa_excint1_c+0xc9>
			if (mask & BIT(2)) {
40081ac1:	430c      	movi.n	a3, 4
40081ac3:	028437        	bany	a4, a3, 40081ac9 <xtensa_excint1_c+0x39>
40081ac6:	004186        	j	40081bd0 <xtensa_excint1_c+0x140>
40081ac9:	0024c6        	j	40081b60 <xtensa_excint1_c+0xd0>
			if (mask & 0x18) {
40081acc:	831c      	movi.n	a3, 24
40081ace:	120437        	bnone	a4, a3, 40081ae4 <xtensa_excint1_c+0x54>
				if (mask & BIT(3)) {
40081ad1:	830c      	movi.n	a3, 8
40081ad3:	020437        	bnone	a4, a3, 40081ad9 <xtensa_excint1_c+0x49>
40081ad6:	0022c6        	j	40081b65 <xtensa_excint1_c+0xd5>
				if (mask & BIT(4)) {
40081ad9:	031c      	movi.n	a3, 16
40081adb:	028437        	bany	a4, a3, 40081ae1 <xtensa_excint1_c+0x51>
40081ade:	003b86        	j	40081bd0 <xtensa_excint1_c+0x140>
40081ae1:	002186        	j	40081b6b <xtensa_excint1_c+0xdb>
				if (mask & BIT(5)) {
40081ae4:	032c      	movi.n	a3, 32
40081ae6:	020437        	bnone	a4, a3, 40081aec <xtensa_excint1_c+0x5c>
40081ae9:	0020c6        	j	40081b70 <xtensa_excint1_c+0xe0>
				if (mask & BIT(6)) {
40081aec:	034c      	movi.n	a3, 64
40081aee:	028437        	bany	a4, a3, 40081af4 <xtensa_excint1_c+0x64>
40081af1:	0036c6        	j	40081bd0 <xtensa_excint1_c+0x140>
40081af4:	001f46        	j	40081b75 <xtensa_excint1_c+0xe5>
		if (mask & 0x780) {
40081af7:	2d0467        	bnone	a4, a6, 40081b28 <xtensa_excint1_c+0x98>
			if (mask & 0x180) {
40081afa:	80a132        	movi	a3, 0x180
40081afd:	130437        	bnone	a4, a3, 40081b14 <xtensa_excint1_c+0x84>
				if (mask & BIT(7)) {
40081b00:	80a032        	movi	a3, 128
40081b03:	738437        	bany	a4, a3, 40081b7a <xtensa_excint1_c+0xea>
				if (mask & BIT(8)) {
40081b06:	00a132        	movi	a3, 0x100
40081b09:	028437        	bany	a4, a3, 40081b0f <xtensa_excint1_c+0x7f>
40081b0c:	003006        	j	40081bd0 <xtensa_excint1_c+0x140>
40081b0f:	001b06        	j	40081b7f <xtensa_excint1_c+0xef>
40081b12:	320000        	orbc	b0, b0, b0
				if (mask & BIT(9)) {
40081b15:	3700a2        	l8ui	a10, a0, 55
40081b18:	326984        	lsi	f8, a9, 200
				if (mask & BIT(10)) {
40081b1b:	3700a4        	lsi	f10, a0, 220
40081b1e:	060284        	lsi	f8, a2, 24
40081b21:	002b      	addi.n	a0, a0, 2
40081b23:	001886        	j	40081b89 <xtensa_excint1_c+0xf9>
40081b26:	310000        	srai	a0, a0, 16
			if (mask & 0x3000) {
40081b29:	37fae6        	bgei	a10, 0x100, 40081b64 <xtensa_excint1_c+0xd4>
40081b2c:	311104        	lsi	f0, a1, 196
				if (mask & BIT(12)) {
40081b2f:	37fae1        	l32r	a14, 4004fb18 <esp32_rom_gpio_matrix_out+0x45c0c>
40081b32:	315984        	lsi	f8, a9, 196
				if (mask & BIT(13)) {
40081b35:	fab9      	s32i.n	a11, a10, 60
40081b37:	028437        	bany	a4, a3, 40081b3d <xtensa_excint1_c+0xad>
40081b3a:	002486        	j	40081bd0 <xtensa_excint1_c+0x140>
40081b3d:	001486        	j	40081b93 <xtensa_excint1_c+0x103>
				if (mask & BIT(17)) {
40081b40:	fade31        	l32r	a3, 400806b8 <_iram_text_start+0x168>
40081b43:	518437        	bany	a4, a3, 40081b98 <xtensa_excint1_c+0x108>
				if (mask & BIT(18)) {
40081b46:	fadd31        	l32r	a3, 400806bc <_iram_text_start+0x16c>
40081b49:	028437        	bany	a4, a3, 40081b4f <xtensa_excint1_c+0xbf>
40081b4c:	002006        	j	40081bd0 <xtensa_excint1_c+0x140>
					irq = 18;
40081b4f:	281c      	movi.n	a8, 18
40081b51:	001146        	j	40081b9a <xtensa_excint1_c+0x10a>
				irq = 0;
40081b54:	080c      	movi.n	a8, 0
40081b56:	001006        	j	40081b9a <xtensa_excint1_c+0x10a>
				irq = 1;
40081b59:	180c      	movi.n	a8, 1
				mask = BIT(1);
40081b5b:	093d      	mov.n	a3, a9
40081b5d:	000e46        	j	40081b9a <xtensa_excint1_c+0x10a>
				irq = 2;
40081b60:	098d      	mov.n	a8, a9
40081b62:	000d06        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 3;
40081b65:	380c      	movi.n	a8, 3
40081b67:	000bc6        	j	40081b9a <xtensa_excint1_c+0x10a>
40081b6a:	058d00        	extui	a8, a0, 29, 1
					irq = 4;
40081b6d:	000a46        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 5;
40081b70:	580c      	movi.n	a8, 5
40081b72:	000906        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 6;
40081b75:	680c      	movi.n	a8, 6
40081b77:	0007c6        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 7;
40081b7a:	780c      	movi.n	a8, 7
40081b7c:	000686        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 8;
40081b7f:	880c      	movi.n	a8, 8
40081b81:	000546        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 9;
40081b84:	980c      	movi.n	a8, 9
40081b86:	000406        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 10;
40081b89:	a80c      	movi.n	a8, 10
40081b8b:	0002c6        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 12;
40081b8e:	c80c      	movi.n	a8, 12
40081b90:	000186        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 13;
40081b93:	d80c      	movi.n	a8, 13
40081b95:	000046        	j	40081b9a <xtensa_excint1_c+0x10a>
					irq = 17;
40081b98:	181c      	movi.n	a8, 17
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081b9a:	fab891        	l32r	a9, 4008067c <_iram_text_start+0x12c>
40081b9d:	1188d0        	slli	a8, a8, 3
40081ba0:	898a      	add.n	a8, a9, a8
40081ba2:	1898      	l32i.n	a9, a8, 4
40081ba4:	08a8      	l32i.n	a10, a8, 0
40081ba6:	304430        	xor	a4, a4, a3
40081ba9:	0009e0        	callx8	a9
40081bac:	13e330        	wsr.intclear	a3
40081baf:	ffbd46        	j	40081aa8 <xtensa_excint1_c+0x18>
40081bb2:	660000        	lsi	f0, a0, 0x198

		return xtensa_int1_c(interrupted_stack);

	} else if (cause == EXCCAUSE_SYSCALL) {
40081bb5:	480c15        	call4	400c9c78 <_iram_text_end+0x46096>
	int cause, vaddr, *bsa = *(int **)interrupted_stack;
40081bb8:	643802        	lsi	f0, a8, 0x190

		/* Xtensa exceptions don't automatically advance PC,
		 * have to skip the SYSCALL instruction manually or
		 * else it will just loop forever
		 */
		bsa[BSA_PC_OFF/4] += 3;
40081bbb:	333b      	addi.n	a3, a3, 3
40081bbd:	6439      	s32i.n	a3, a4, 24
40081bbf:	000346        	j	40081bd0 <xtensa_excint1_c+0x140>
40081bc2:	300000        	xor	a0, a0, a0

	} else {
		uint32_t ps = bsa[BSA_PS_OFF/4];

		__asm__ volatile("rsr.excvaddr %0" : "=r"(vaddr));
40081bc5:	ee          	.byte 0xee
40081bc6:	a0a203        	lsi	f0, a2, 0x280
		/* FIXME: legacy xtensa port reported "HW" exception
		 * for all unhandled exceptions, which seems incorrect
		 * as these are software errors.  Should clean this
		 * up.
		 */
		z_xtensa_fatal_error(K_ERR_CPU_EXCEPTION,
40081bc9:	b22000        	mulsh	a2, a0, a0
40081bcc:	a62520        	lsi	f2, a5, 0x298
40081bcf:	ff          	.byte 0xff
				     (void *)interrupted_stack);
	}

	return z_get_next_switch_handle(interrupted_stack);
40081bd0:	02ad      	mov.n	a10, a2
40081bd2:	00d725        	call8	40082944 <z_get_next_switch_handle>
}
40081bd5:	0a2d      	mov.n	a2, a10
40081bd7:	f01d      	retw.n
40081bd9:	000000        	ill

40081bdc <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
40081bdc:	004136        	entry	a1, 32
	_stdout_hook = hook;
40081bdf:	fab981        	l32r	a8, 400806c4 <_iram_text_start+0x174>
40081be2:	0829      	s32i.n	a2, a8, 0
}
40081be4:	f01d      	retw.n
	...

40081be8 <gpio_esp32_pin_interrupt_configure>:

static int gpio_esp32_pin_interrupt_configure(const struct device *port,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
40081be8:	004136        	entry	a1, 32
	if (mode == GPIO_INT_MODE_DISABLED) {
40081beb:	fa8b81        	l32r	a8, 40080618 <_iram_text_start+0xc8>
{
40081bee:	743030        	extui	a3, a3, 0, 8
	if (mode == GPIO_INT_MODE_DISABLED) {
40081bf1:	211487        	beq	a4, a8, 40081c16 <gpio_esp32_pin_interrupt_configure+0x2e>
	if (mode == GPIO_INT_MODE_LEVEL) {
40081bf4:	faaf91        	l32r	a9, 400806b0 <_iram_text_start+0x160>
			return -ENOTSUP;
40081bf7:	ddaf82        	movi	a8, -35
	if (mode == GPIO_INT_MODE_LEVEL) {
40081bfa:	4f1497        	beq	a4, a9, 40081c4d <gpio_esp32_pin_interrupt_configure+0x65>
		switch (trig) {
40081bfd:	faaf41        	l32r	a4, 400806bc <_iram_text_start+0x16c>
40081c00:	181547        	beq	a5, a4, 40081c1c <gpio_esp32_pin_interrupt_configure+0x34>
40081c03:	fab141        	l32r	a4, 400806c8 <_iram_text_start+0x178>
40081c06:	431547        	beq	a5, a4, 40081c4d <gpio_esp32_pin_interrupt_configure+0x65>
40081c09:	faab41        	l32r	a4, 400806b8 <_iram_text_start+0x168>
			return -EINVAL;
40081c0c:	a86c      	movi.n	a8, -22
		switch (trig) {
40081c0e:	3b9547        	bne	a5, a4, 40081c4d <gpio_esp32_pin_interrupt_configure+0x65>
			return 2;
40081c11:	280c      	movi.n	a8, 2
40081c13:	0001c6        	j	40081c1e <gpio_esp32_pin_interrupt_configure+0x36>
		return 0;       /* Disables interrupt for a pin. */
40081c16:	080c      	movi.n	a8, 0
40081c18:	000086        	j	40081c1e <gpio_esp32_pin_interrupt_configure+0x36>
40081c1b:	180c00        	lsxp	f0, a12, a0
	struct gpio_esp32_data *data = port->data;
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081c1e:	3248      	l32i.n	a4, a2, 12
40081c20:	8498      	l32i.n	a9, a4, 32
40081c22:	939a      	add.n	a9, a3, a9
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081c24:	faaa31        	l32r	a3, 400806cc <_iram_text_start+0x17c>
40081c27:	993a      	add.n	a9, a9, a3
40081c29:	1199e0        	slli	a9, a9, 2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081c2c:	006340        	rsil	a4, 3
	}

	key = irq_lock();

	reg_val = *reg;
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081c2f:	faa851        	l32r	a5, 400806d0 <_iram_text_start+0x180>
	reg_val = *reg;
40081c32:	0938      	l32i.n	a3, a9, 0
	/* Enable Interrupt on CPU0 (PRO_CPU) */
	reg_val |= GPIO_CPU0_INT_ENABLE;
	/* Interrupt triggering mode */
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081c34:	118890        	slli	a8, a8, 7
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081c37:	103350        	and	a3, a3, a5
40081c3a:	208830        	or	a8, a8, a3
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081c3d:	fa8631        	l32r	a3, 40080658 <_iram_text_start+0x108>
40081c40:	208830        	or	a8, a8, a3
	*reg = reg_val;
40081c43:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40081c45:	13e640        	wsr.ps	a4
40081c48:	002010        	rsync

	irq_unlock(key);

	return 0;
40081c4b:	080c      	movi.n	a8, 0
}
40081c4d:	082d      	mov.n	a2, a8
40081c4f:	f01d      	retw.n
40081c51:	000000        	ill

40081c54 <gpio_esp32_isr>:
#if defined(CONFIG_GPIO_ESP32_1)
GPIO_DEVICE_INIT(1);
#endif

static void gpio_esp32_isr(const void *param)
{
40081c54:	004136        	entry	a1, 32

#if defined(CONFIG_GPIO_ESP32_0)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_0));
40081c57:	fa9fa1        	l32r	a10, 400806d4 <_iram_text_start+0x184>
40081c5a:	0194a5        	call8	400835a4 <gpio_esp32_fire_callbacks>
#endif
#if defined(CONFIG_GPIO_ESP32_1)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_1));
40081c5d:	fa9ea1        	l32r	a10, 400806d8 <_iram_text_start+0x188>
40081c60:	019425        	call8	400835a4 <gpio_esp32_fire_callbacks>
#endif

	ARG_UNUSED(param);
}
40081c63:	f01d      	retw.n
40081c65:	000000        	ill

40081c68 <gpio_esp32_init>:
{
40081c68:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40081c6b:	3228      	l32i.n	a2, a2, 12
40081c6d:	fa9ba1        	l32r	a10, 400806dc <_iram_text_start+0x18c>
40081c70:	00a065        	call8	40082678 <z_impl_device_get_binding>
	data->pinmux = device_get_binding(CONFIG_PINMUX_NAME);
40081c73:	12a9      	s32i.n	a10, a2, 4
		return -ENOTSUP;
40081c75:	ddaf22        	movi	a2, -35
	if (!data->pinmux) {
40081c78:	8abc      	beqz.n	a10, 40081cb4 <gpio_esp32_init+0x4c>
	if (!isr_connected) {
40081c7a:	fa9931        	l32r	a3, 400806e0 <_iram_text_start+0x190>
	return 0;
40081c7d:	020c      	movi.n	a2, 0
	if (!isr_connected) {
40081c7f:	000382        	l8ui	a8, a3, 0
40081c82:	2e9827        	bne	a8, a2, 40081cb4 <gpio_esp32_init+0x4c>
 */
static inline void z_xt_ints_off(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081c85:	03e480        	rsr.intenable	a8
	val &= ~mask;
40081c88:	ffab92        	movi	a9, 0xfffffbff
40081c8b:	108890        	and	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081c8e:	13e480        	wsr.intenable	a8
40081c91:	002010        	rsync
		esp32_rom_intr_matrix_set(0, ETS_GPIO_INTR_SOURCE,
40081c94:	ac0c      	movi.n	a12, 10
40081c96:	6b1c      	movi.n	a11, 22
40081c98:	02ad      	mov.n	a10, a2
40081c9a:	fa9281        	l32r	a8, 400806e4 <_iram_text_start+0x194>
40081c9d:	0008e0        	callx8	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081ca0:	03e480        	rsr.intenable	a8
	val |= mask;
40081ca3:	00a492        	movi	a9, 0x400
40081ca6:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081ca9:	13e480        	wsr.intenable	a8
40081cac:	002010        	rsync
		isr_connected = true;
40081caf:	180c      	movi.n	a8, 1
40081cb1:	004382        	s8i	a8, a3, 0
}
40081cb4:	f01d      	retw.n
	...

40081cb8 <gpio_esp32_config>:
{
40081cb8:	006136        	entry	a1, 48
	struct gpio_esp32_data *data = dev->data;
40081cbb:	3268      	l32i.n	a6, a2, 12
{
40081cbd:	743030        	extui	a3, a3, 0, 8
	r = pinmux_pin_get(data->pinmux, io_pin, &func);
40081cc0:	16a8      	l32i.n	a10, a6, 4
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081cc2:	8658      	l32i.n	a5, a6, 32
				 uint32_t *func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->get(dev, pin, func);
40081cc4:	2a28      	l32i.n	a2, a10, 8
40081cc6:	535a      	add.n	a5, a3, a5
40081cc8:	1228      	l32i.n	a2, a2, 4
40081cca:	01cd      	mov.n	a12, a1
40081ccc:	20b550        	or	a11, a5, a5
40081ccf:	0002e0        	callx8	a2
40081cd2:	0a2d      	mov.n	a2, a10
	if (r < 0) {
40081cd4:	090a96        	bltz	a10, 40081d68 <gpio_esp32_config+0xb0>
	pinmux_pin_set(data->pinmux, io_pin, PIN_FUNC_GPIO);
40081cd7:	16a8      	l32i.n	a10, a6, 4
	return api->set(dev, pin, func);
40081cd9:	2c0c      	movi.n	a12, 2
40081cdb:	2a28      	l32i.n	a2, a10, 8
40081cdd:	05bd      	mov.n	a11, a5
40081cdf:	0228      	l32i.n	a2, a2, 0
40081ce1:	0002e0        	callx8	a2
	if (flags & GPIO_PULL_UP) {
40081ce4:	0c1c      	movi.n	a12, 16
40081ce6:	10c4c0        	and	a12, a4, a12
40081ce9:	16a8      	l32i.n	a10, a6, 4
40081ceb:	9c8c      	beqz.n	a12, 40081cf8 <gpio_esp32_config+0x40>
				    uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->pullup(dev, pin, func);
40081ced:	2a28      	l32i.n	a2, a10, 8
40081cef:	1c0c      	movi.n	a12, 1
40081cf1:	2228      	l32i.n	a2, a2, 8
40081cf3:	000206        	j	40081cff <gpio_esp32_config+0x47>
40081cf6:	570000        	lsi	f0, a0, 0x15c
	} else if (flags & GPIO_PULL_DOWN) {
40081cf9:	280864        	lsi	f6, a8, 160
40081cfc:	282a      	add.n	a2, a8, a2
40081cfe:	05bd22        	l32ai	a2, a13, 20
40081d01:	0002e0        	callx8	a2
	if (flags & GPIO_OUTPUT) {
40081d04:	16a8      	l32i.n	a10, a6, 4
40081d06:	2a28      	l32i.n	a2, a10, 8
40081d08:	3288      	l32i.n	a8, a2, 12
40081d0a:	00a222        	movi	a2, 0x200
40081d0d:	102420        	and	a2, a4, a2
40081d10:	04c216        	beqz	a2, 40081d60 <gpio_esp32_config+0xa8>
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081d13:	fa6e21        	l32r	a2, 400806cc <_iram_text_start+0x17c>
40081d16:	252a      	add.n	a2, a5, a2
40081d18:	1122e0        	slli	a2, a2, 2
		if (flags & GPIO_SINGLE_ENDED) {
40081d1b:	0d6417        	bbci	a4, 1, 40081d2c <gpio_esp32_config+0x74>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
40081d1e:	4b0c      	movi.n	a11, 4
40081d20:	1104b7        	bnone	a4, a11, 40081d35 <gpio_esp32_config+0x7d>
				*reg |= GPIO_PIN_PAD_DRIVER;
40081d23:	0298      	l32i.n	a9, a2, 0
40081d25:	2099b0        	or	a9, a9, a11
40081d28:	0001c6        	j	40081d33 <gpio_esp32_config+0x7b>
40081d2b:	029800        	andb	b9, b8, b0
			*reg &= ~GPIO_PIN_PAD_DRIVER;
40081d2e:	bb7c      	movi.n	a11, -5
40081d30:	1099b0        	and	a9, a9, a11
40081d33:	0299      	s32i.n	a9, a2, 0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
40081d35:	0464b7        	bbci	a4, 11, 40081d3d <gpio_esp32_config+0x85>
			*data->port.set_reg = BIT(pin);
40081d38:	2648      	l32i.n	a4, a6, 8
40081d3a:	000106        	j	40081d42 <gpio_esp32_config+0x8a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
40081d3d:	1064a7        	bbci	a4, 10, 40081d51 <gpio_esp32_config+0x99>
			*data->port.clear_reg = BIT(pin);
40081d40:	3648      	l32i.n	a4, a6, 12
40081d42:	01a022        	movi	a2, 1
40081d45:	401300        	ssl	a3
40081d48:	a13200        	sll	a3, a2
40081d4b:	0020c0        	memw
40081d4e:	006432        	s32i	a3, a4, 0
					  uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->input(dev, pin, func);
40081d51:	0c0c      	movi.n	a12, 0
40081d53:	05bd      	mov.n	a11, a5
40081d55:	0008e0        	callx8	a8
		if (r < 0) {
40081d58:	020c      	movi.n	a2, 0
40081d5a:	432a20        	min	a2, a10, a2
40081d5d:	0001c6        	j	40081d68 <gpio_esp32_config+0xb0>
40081d60:	1c0c      	movi.n	a12, 1
40081d62:	20b550        	or	a11, a5, a5
40081d65:	0008e0        	callx8	a8
}
40081d68:	f01d      	retw.n
	...

40081d6c <i2c_esp32_isr>:

	return ret;
}

static void i2c_esp32_isr(const struct device *device)
{
40081d6c:	004136        	entry	a1, 32
	const int fifo_give_mask = I2C_ACK_ERR_INT_ST |
				   I2C_TIME_OUT_INT_ST |
				   I2C_TRANS_COMPLETE_INT_ST |
				   I2C_ARBITRATION_LOST_INT_ST;
	const struct i2c_esp32_config *config = device->config;
40081d6f:	012232        	l32i	a3, a2, 4

	if (sys_read32(I2C_INT_STATUS_REG(config->index)) & fifo_give_mask) {
40081d72:	002392        	l32i	a9, a3, 0
40081d75:	1189e0        	slli	a8, a9, 2
40081d78:	808890        	add	a8, a8, a9
40081d7b:	fa5b91        	l32r	a9, 400806e8 <_iram_text_start+0x198>
40081d7e:	118820        	slli	a8, a8, 14
40081d81:	889a      	add.n	a8, a8, a9
	return *(volatile uint32_t *)addr;
40081d83:	0020c0        	memw
40081d86:	0898      	l32i.n	a9, a8, 0
40081d88:	a0a582        	movi	a8, 0x5a0
40081d8b:	060987        	bnone	a9, a8, 40081d95 <i2c_esp32_isr+0x29>

		/* Only give the semaphore if a watched interrupt happens.
		 * Error checking is performed at the other side of the
		 * semaphore, by reading the status register.
		 */
		k_sem_give(&data->fifo_sem);
40081d8e:	32a8      	l32i.n	a10, a2, 12
40081d90:	aa8b      	addi.n	a10, a10, 8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
40081d92:	011625        	call8	40082ef4 <z_impl_k_sem_give>
	}

	/* Acknowledge all I2C interrupts */
	sys_write32(~0, I2C_INT_CLR_REG(config->index));
40081d95:	0398      	l32i.n	a9, a3, 0
40081d97:	fa5521        	l32r	a2, 400806ec <_iram_text_start+0x19c>
40081d9a:	1189e0        	slli	a8, a9, 2
40081d9d:	889a      	add.n	a8, a8, a9
40081d9f:	118820        	slli	a8, a8, 14
40081da2:	882a      	add.n	a8, a8, a2
	*(volatile uint32_t *)addr = data;
40081da4:	f27c      	movi.n	a2, -1
40081da6:	0020c0        	memw
40081da9:	0829      	s32i.n	a2, a8, 0
}
40081dab:	f01d      	retw.n
40081dad:	000000        	ill

40081db0 <i2c_esp32_reset_fifo$isra$0>:
static inline void i2c_esp32_reset_fifo(const struct i2c_esp32_config *config)
40081db0:	004136        	entry	a1, 32
	uint32_t reg = I2C_FIFO_CONF_REG(config->index);
40081db3:	1182e0        	slli	a8, a2, 2
40081db6:	282a      	add.n	a2, a8, a2
40081db8:	fa4e81        	l32r	a8, 400806f0 <_iram_text_start+0x1a0>
40081dbb:	112220        	slli	a2, a2, 14
40081dbe:	228a      	add.n	a2, a2, a8
	return *(volatile uint32_t *)addr;
40081dc0:	0020c0        	memw
40081dc3:	0288      	l32i.n	a8, a2, 0
40081dc5:	fa3e91        	l32r	a9, 400806c0 <_iram_text_start+0x170>
40081dc8:	208890        	or	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081dcb:	0020c0        	memw
40081dce:	0289      	s32i.n	a8, a2, 0
	return *(volatile uint32_t *)addr;
40081dd0:	0020c0        	memw
40081dd3:	0288      	l32i.n	a8, a2, 0
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081dd5:	fa4791        	l32r	a9, 400806f4 <_iram_text_start+0x1a4>
40081dd8:	108890        	and	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081ddb:	0020c0        	memw
40081dde:	0289      	s32i.n	a8, a2, 0
}
40081de0:	f01d      	retw.n
	...

40081de4 <i2c_esp32_write_addr>:
{
40081de4:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40081de7:	1268      	l32i.n	a6, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081de9:	3278      	l32i.n	a7, a2, 12
	i2c_esp32_reset_fifo(config);
40081deb:	06a8      	l32i.n	a10, a6, 0
40081ded:	fffc25        	call8	40081db0 <i2c_esp32_reset_fifo$isra$0>
	sys_write32(addr & I2C_FIFO_RDATA, I2C_DATA_APB_REG(config->index));
40081df0:	0628      	l32i.n	a2, a6, 0
40081df2:	748050        	extui	a8, a5, 0, 8
40081df5:	1192e0        	slli	a9, a2, 2
40081df8:	992a      	add.n	a9, a9, a2
40081dfa:	fa3f21        	l32r	a2, 400806f8 <_iram_text_start+0x1a8>
40081dfd:	119920        	slli	a9, a9, 14
40081e00:	992a      	add.n	a9, a9, a2
40081e02:	0020c0        	memw
40081e05:	0989      	s32i.n	a8, a9, 0
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081e07:	0788      	l32i.n	a8, a7, 0
	uint32_t addr_len = 1U;
40081e09:	190c      	movi.n	a9, 1
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081e0b:	156807        	bbci	a8, 0, 40081e24 <i2c_esp32_write_addr+0x40>
		sys_write32(I2C_DATA_APB_REG(config->index),
40081e0e:	0668      	l32i.n	a6, a6, 0
			    (addr >> 8) & I2C_FIFO_RDATA);
40081e10:	415850        	srli	a5, a5, 8
		sys_write32(I2C_DATA_APB_REG(config->index),
40081e13:	1186e0        	slli	a8, a6, 2
40081e16:	886a      	add.n	a8, a8, a6
40081e18:	118820        	slli	a8, a8, 14
40081e1b:	882a      	add.n	a8, a8, a2
40081e1d:	0020c0        	memw
40081e20:	0589      	s32i.n	a8, a5, 0
		addr_len++;
40081e22:	290c      	movi.n	a9, 2
	if ((msg->flags & I2C_MSG_RW_MASK) != I2C_MSG_WRITE) {
40081e24:	080422        	l8ui	a2, a4, 8
40081e27:	116207        	bbci	a2, 0, 40081e3c <i2c_esp32_write_addr+0x58>
		*cmd++ = (struct i2c_esp32_cmd) {
40081e2a:	940c      	movi.n	a4, 9
40081e2c:	114480        	slli	a4, a4, 8
40081e2f:	209940        	or	a9, a9, a4
40081e32:	234b      	addi.n	a2, a3, 4
40081e34:	0020c0        	memw
40081e37:	0399      	s32i.n	a9, a3, 0
40081e39:	0001c6        	j	40081e44 <i2c_esp32_write_addr+0x60>
		msg->len += addr_len;
40081e3c:	1458      	l32i.n	a5, a4, 4
40081e3e:	032d      	mov.n	a2, a3
40081e40:	959a      	add.n	a9, a5, a9
40081e42:	1499      	s32i.n	a9, a4, 4
}
40081e44:	f01d      	retw.n
	...

40081e48 <i2c_esp32_configure_pins>:
{
40081e48:	004136        	entry	a1, 32
#ifndef ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_
#define ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_

static const char *gpio_esp32_get_gpio_for_pin(int pin)
{
	if (pin < 32) {
40081e4b:	1fa052        	movi	a5, 31
		return NULL;
#endif /* CONFIG_GPIO_ESP32_0 */
	}

#if defined(CONFIG_GPIO_ESP32_1)
	return DT_LABEL(DT_INST(1, espressif_esp32_gpio));
40081e4e:	fa2ba1        	l32r	a10, 400806fc <_iram_text_start+0x1ac>
	if (pin < 32) {
40081e51:	022527        	blt	a5, a2, 40081e57 <i2c_esp32_configure_pins+0xf>
		return DT_LABEL(DT_INST(0, espressif_esp32_gpio));
40081e54:	fa2ba1        	l32r	a10, 40080700 <_iram_text_start+0x1b0>
40081e57:	008225        	call8	40082678 <z_impl_device_get_binding>
		return -EINVAL;
40081e5a:	eaaf82        	movi	a8, -22
	if (!gpio) {
40081e5d:	047a16        	beqz	a10, 40081ea8 <i2c_esp32_configure_pins+0x60>
	ret = gpio_pin_configure(gpio, pin, pin_mode);
40081e60:	746020        	extui	a6, a2, 0, 8
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40081e63:	032a52        	l32i	a5, a10, 12
	return api->pin_configure(port, pin, flags);
40081e66:	2a88      	l32i.n	a8, a10, 8
40081e68:	fa27c1        	l32r	a12, 40080704 <_iram_text_start+0x1b4>
40081e6b:	0888      	l32i.n	a8, a8, 0
40081e6d:	06bd      	mov.n	a11, a6
40081e6f:	0008e0        	callx8	a8
40081e72:	0a8d      	mov.n	a8, a10
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
40081e74:	0adc      	bnez.n	a10, 40081e88 <i2c_esp32_configure_pins+0x40>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40081e76:	eb7c      	movi.n	a11, -2
40081e78:	401600        	ssl	a6
40081e7b:	818bb0        	src	a8, a11, a11
40081e7e:	05b8      	l32i.n	a11, a5, 0
40081e80:	10bb80        	and	a11, a11, a8
40081e83:	05b9      	s32i.n	a11, a5, 0
	if (ret < 0) {
40081e85:	000086        	j	40081e8b <i2c_esp32_configure_pins+0x43>
40081e88:	01ca96        	bltz	a10, 40081ea8 <i2c_esp32_configure_pins+0x60>
	esp32_rom_gpio_matrix_out(pin, matrix_out, false, false);
40081e8b:	0d0c      	movi.n	a13, 0
40081e8d:	0dcd      	mov.n	a12, a13
40081e8f:	03bd      	mov.n	a11, a3
40081e91:	20a220        	or	a10, a2, a2
40081e94:	fa1d81        	l32r	a8, 40080708 <_iram_text_start+0x1b8>
40081e97:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(pin, matrix_in, false);
40081e9a:	0c0c      	movi.n	a12, 0
40081e9c:	04bd      	mov.n	a11, a4
40081e9e:	02ad      	mov.n	a10, a2
40081ea0:	fa1b81        	l32r	a8, 4008070c <_iram_text_start+0x1bc>
40081ea3:	0008e0        	callx8	a8
40081ea6:	080c      	movi.n	a8, 0
}
40081ea8:	082d      	mov.n	a2, a8
40081eaa:	f01d      	retw.n

40081eac <i2c_esp32_configure>:
{
40081eac:	006136        	entry	a1, 48
	const struct i2c_esp32_config *config = dev->config;
40081eaf:	1248      	l32i.n	a4, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081eb1:	3278      	l32i.n	a7, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081eb3:	006360        	rsil	a6, 3
	ret = i2c_esp32_configure_pins(config->pins.scl,
40081eb6:	64c8      	l32i.n	a12, a4, 24
40081eb8:	54b8      	l32i.n	a11, a4, 20
40081eba:	0724a2        	l32i	a10, a4, 28
40081ebd:	fff8a5        	call8	40081e48 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081ec0:	242a96        	bltz	a10, 40082106 <i2c_esp32_configure+0x25a>
	ret = i2c_esp32_configure_pins(config->pins.sda,
40081ec3:	44c8      	l32i.n	a12, a4, 16
40081ec5:	34b8      	l32i.n	a11, a4, 12
40081ec7:	84a8      	l32i.n	a10, a4, 32
40081ec9:	fff7e5        	call8	40081e48 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081ecc:	236a96        	bltz	a10, 40082106 <i2c_esp32_configure+0x25a>
	clock_control_on(data->clock_dev, config->peripheral_id);
40081ecf:	a7a8      	l32i.n	a10, a7, 40
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
40081ed1:	0924b2        	l32i	a11, a4, 36
40081ed4:	2a58      	l32i.n	a5, a10, 8
40081ed6:	002552        	l32i	a5, a5, 0
40081ed9:	0005e0        	callx8	a5
	if (config->mode.tx_lsb_first) {
40081edc:	280492        	l8ui	a9, a4, 40
		v |= I2C_TX_LSB_FIRST;
40081edf:	084c      	movi.n	a8, 64
40081ee1:	050c      	movi.n	a5, 0
40081ee3:	935890        	movnez	a5, a8, a9
	if (config->mode.rx_lsb_first) {
40081ee6:	290482        	l8ui	a8, a4, 41
40081ee9:	488c      	beqz.n	a8, 40081ef1 <i2c_esp32_configure+0x45>
		v |= I2C_RX_LSB_FIRST;
40081eeb:	80a082        	movi	a8, 128
40081eee:	205580        	or	a5, a5, a8
	if (dev_config & I2C_MODE_MASTER) {
40081ef1:	0498      	l32i.n	a9, a4, 0
40081ef3:	1189e0        	slli	a8, a9, 2
40081ef6:	889a      	add.n	a8, a8, a9
40081ef8:	fa0691        	l32r	a9, 40080710 <_iram_text_start+0x1c0>
40081efb:	118820        	slli	a8, a8, 14
40081efe:	889a      	add.n	a8, a8, a9
40081f00:	091c      	movi.n	a9, 16
40081f02:	0f0397        	bnone	a3, a9, 40081f15 <i2c_esp32_configure+0x69>
40081f05:	070c      	movi.n	a7, 0
		v |= I2C_MS_MODE;
40081f07:	205590        	or	a5, a5, a9
40081f0a:	0020c0        	memw
40081f0d:	0879      	s32i.n	a7, a8, 0
40081f0f:	001506        	j	40081f67 <i2c_esp32_configure+0xbb>
40081f12:	000000        	ill
		uint32_t addr = (data->address & I2C_SLAVE_ADDR_V);
40081f15:	021772        	l16ui	a7, a7, 4
40081f18:	e47070        	extui	a7, a7, 0, 15
		if (dev_config & I2C_ADDR_10_BITS) {
40081f1b:	056307        	bbci	a3, 0, 40081f24 <i2c_esp32_configure+0x78>
			addr |= I2C_ADDR_10BIT_EN;
40081f1e:	f9e391        	l32r	a9, 400806ac <_iram_text_start+0x15c>
40081f21:	207790        	or	a7, a7, a9
40081f24:	0020c0        	memw
40081f27:	0879      	s32i.n	a7, a8, 0
		sys_clear_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40081f29:	0488      	l32i.n	a8, a4, 0

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f2b:	dfaf92        	movi	a9, -33
40081f2e:	1178e0        	slli	a7, a8, 2
40081f31:	778a      	add.n	a7, a7, a8
40081f33:	f9f881        	l32r	a8, 40080714 <_iram_text_start+0x1c4>
40081f36:	117720        	slli	a7, a7, 14
40081f39:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081f3b:	0020c0        	memw
40081f3e:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f40:	108890        	and	a8, a8, a9
40081f43:	0020c0        	memw
40081f46:	0789      	s32i.n	a8, a7, 0
		sys_clear_bit(I2C_FIFO_CONF_REG(config->index),
40081f48:	0488      	l32i.n	a8, a4, 0
40081f4a:	f9f391        	l32r	a9, 40080718 <_iram_text_start+0x1c8>
40081f4d:	1178e0        	slli	a7, a8, 2
40081f50:	778a      	add.n	a7, a7, a8
40081f52:	f9e781        	l32r	a8, 400806f0 <_iram_text_start+0x1a0>
40081f55:	117720        	slli	a7, a7, 14
40081f58:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081f5a:	0020c0        	memw
40081f5d:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f5f:	108890        	and	a8, a8, a9
40081f62:	0020c0        	memw
40081f65:	0789      	s32i.n	a8, a7, 0
	sys_write32(v, I2C_CTR_REG(config->index));
40081f67:	0488      	l32i.n	a8, a4, 0
	v |= I2C_CLK_EN;
40081f69:	03a172        	movi	a7, 0x103
40081f6c:	205570        	or	a5, a5, a7
	sys_write32(v, I2C_CTR_REG(config->index));
40081f6f:	1178e0        	slli	a7, a8, 2
40081f72:	778a      	add.n	a7, a7, a8
40081f74:	f9e881        	l32r	a8, 40080714 <_iram_text_start+0x1c4>
40081f77:	117720        	slli	a7, a7, 14
40081f7a:	778a      	add.n	a7, a7, a8
40081f7c:	0020c0        	memw
40081f7f:	0759      	s32i.n	a5, a7, 0
	const struct i2c_esp32_config *config = dev->config;
40081f81:	1258      	l32i.n	a5, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081f83:	3278      	l32i.n	a7, a2, 12
	uint32_t sys_clk_freq = 0;
40081f85:	020c      	movi.n	a2, 0
40081f87:	0129      	s32i.n	a2, a1, 0
	ret = i2c_esp32_configure_speed(dev, I2C_SPEED_GET(dev_config));
40081f89:	243130        	extui	a3, a3, 1, 3
	uint32_t freq_hz = speed_to_freq_tbl[speed];
40081f8c:	f9e421        	l32r	a2, 4008071c <_iram_text_start+0x1cc>
40081f8f:	1133e0        	slli	a3, a3, 2
40081f92:	323a      	add.n	a3, a2, a3
40081f94:	0328      	l32i.n	a2, a3, 0
		return -ENOTSUP;
40081f96:	ddafa2        	movi	a10, -35
	if (!freq_hz) {
40081f99:	163216        	beqz	a2, 40082100 <i2c_esp32_configure+0x254>
	if (clock_control_get_rate(data->clock_dev,
40081f9c:	a7a8      	l32i.n	a10, a7, 40
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
40081f9e:	95b8      	l32i.n	a11, a5, 36
40081fa0:	2a38      	l32i.n	a3, a10, 8
40081fa2:	01cd      	mov.n	a12, a1
40081fa4:	3338      	l32i.n	a3, a3, 12
40081fa6:	0003e0        	callx8	a3
40081fa9:	151a56        	bnez	a10, 400820fe <i2c_esp32_configure+0x252>
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081fac:	0578      	l32i.n	a7, a5, 0
	period = (sys_clk_freq / freq_hz);
40081fae:	0188      	l32i.n	a8, a1, 0
40081fb0:	c28820        	quou	a8, a8, a2
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081fb3:	1127e0        	slli	a2, a7, 2
40081fb6:	227a      	add.n	a2, a2, a7
40081fb8:	f9da71        	l32r	a7, 40080720 <_iram_text_start+0x1d0>
40081fbb:	112220        	slli	a2, a2, 14
40081fbe:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fc0:	0020c0        	memw
40081fc3:	0278      	l32i.n	a7, a2, 0
	period /= 2U; /* Set hold and setup times to 1/2th of period */
40081fc5:	413180        	srli	a3, a8, 1
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081fc8:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fcb:	0020c0        	memw
40081fce:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081fd0:	0578      	l32i.n	a7, a5, 0
	period /= 2U; /* Set sample and hold times to 1/4th of period */
40081fd2:	418280        	srli	a8, a8, 2
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081fd5:	1127e0        	slli	a2, a7, 2
40081fd8:	227a      	add.n	a2, a2, a7
40081fda:	f9d271        	l32r	a7, 40080724 <_iram_text_start+0x1d4>
40081fdd:	112220        	slli	a2, a2, 14
40081fe0:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fe2:	0020c0        	memw
40081fe5:	0278      	l32i.n	a7, a2, 0
40081fe7:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fea:	0020c0        	memw
40081fed:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_START_HOLD_REG(config->index));
40081fef:	0578      	l32i.n	a7, a5, 0
40081ff1:	1127e0        	slli	a2, a7, 2
40081ff4:	227a      	add.n	a2, a2, a7
40081ff6:	f9cc71        	l32r	a7, 40080728 <_iram_text_start+0x1d8>
40081ff9:	112220        	slli	a2, a2, 14
40081ffc:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081ffe:	0020c0        	memw
40082001:	0278      	l32i.n	a7, a2, 0
40082003:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40082006:	0020c0        	memw
40082009:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_RSTART_SETUP_REG(config->index));
4008200b:	0578      	l32i.n	a7, a5, 0
4008200d:	1127e0        	slli	a2, a7, 2
40082010:	227a      	add.n	a2, a2, a7
40082012:	f9c671        	l32r	a7, 4008072c <_iram_text_start+0x1dc>
40082015:	112220        	slli	a2, a2, 14
40082018:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
4008201a:	0020c0        	memw
4008201d:	0278      	l32i.n	a7, a2, 0
4008201f:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40082022:	0020c0        	memw
40082025:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_HOLD_REG(config->index));
40082027:	0578      	l32i.n	a7, a5, 0
40082029:	1127e0        	slli	a2, a7, 2
4008202c:	227a      	add.n	a2, a2, a7
4008202e:	f9c071        	l32r	a7, 40080730 <_iram_text_start+0x1e0>
40082031:	112220        	slli	a2, a2, 14
40082034:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082036:	0020c0        	memw
40082039:	0278      	l32i.n	a7, a2, 0
4008203b:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
4008203e:	0020c0        	memw
40082041:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_SETUP_REG(config->index));
40082043:	0578      	l32i.n	a7, a5, 0
40082045:	1127e0        	slli	a2, a7, 2
40082048:	227a      	add.n	a2, a2, a7
4008204a:	f9ba71        	l32r	a7, 40080734 <_iram_text_start+0x1e4>
4008204d:	112220        	slli	a2, a2, 14
40082050:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082052:	0020c0        	memw
40082055:	0278      	l32i.n	a7, a2, 0
40082057:	203370        	or	a3, a3, a7
	*(volatile uint32_t *)addr = data;
4008205a:	0020c0        	memw
4008205d:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_HOLD_REG(config->index));
4008205f:	0538      	l32i.n	a3, a5, 0
40082061:	1123e0        	slli	a2, a3, 2
40082064:	223a      	add.n	a2, a2, a3
40082066:	f9b431        	l32r	a3, 40080738 <_iram_text_start+0x1e8>
40082069:	112220        	slli	a2, a2, 14
4008206c:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
4008206e:	0020c0        	memw
40082071:	0238      	l32i.n	a3, a2, 0
40082073:	203830        	or	a3, a8, a3
	*(volatile uint32_t *)addr = data;
40082076:	0020c0        	memw
40082079:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_SAMPLE_REG(config->index));
4008207b:	0538      	l32i.n	a3, a5, 0
4008207d:	ffab52        	movi	a5, 0xfffffbff
40082080:	1123e0        	slli	a2, a3, 2
40082083:	223a      	add.n	a2, a2, a3
40082085:	f9ad31        	l32r	a3, 4008073c <_iram_text_start+0x1ec>
40082088:	112220        	slli	a2, a2, 14
4008208b:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
4008208d:	0020c0        	memw
40082090:	0238      	l32i.n	a3, a2, 0
40082092:	208830        	or	a8, a8, a3
	*(volatile uint32_t *)addr = data;
40082095:	0020c0        	memw
40082098:	0289      	s32i.n	a8, a2, 0
	sys_clear_bit(I2C_FIFO_CONF_REG(config->index), I2C_NONFIFO_EN_S);
4008209a:	0438      	l32i.n	a3, a4, 0
4008209c:	1123e0        	slli	a2, a3, 2
4008209f:	223a      	add.n	a2, a2, a3
400820a1:	f99331        	l32r	a3, 400806f0 <_iram_text_start+0x1a0>
400820a4:	112220        	slli	a2, a2, 14
400820a7:	223a      	add.n	a2, a2, a3
	uint32_t temp = *(volatile uint32_t *)addr;
400820a9:	0020c0        	memw
400820ac:	0238      	l32i.n	a3, a2, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
400820ae:	103350        	and	a3, a3, a5
400820b1:	0020c0        	memw
400820b4:	0239      	s32i.n	a3, a2, 0
	sys_write32(v << I2C_TIME_OUT_REG_S, I2C_TO_REG(config->index));
400820b6:	0438      	l32i.n	a3, a4, 0
400820b8:	1123e0        	slli	a2, a3, 2
400820bb:	223a      	add.n	a2, a2, a3
400820bd:	f9a031        	l32r	a3, 40080740 <_iram_text_start+0x1f0>
400820c0:	112220        	slli	a2, a2, 14
400820c3:	223a      	add.n	a2, a2, a3
400820c5:	f99f31        	l32r	a3, 40080744 <_iram_text_start+0x1f4>
400820c8:	0020c0        	memw
400820cb:	0239      	s32i.n	a3, a2, 0
		    I2C_INT_ENA_REG(config->index));
400820cd:	0438      	l32i.n	a3, a4, 0
400820cf:	1123e0        	slli	a2, a3, 2
400820d2:	223a      	add.n	a2, a2, a3
400820d4:	f99d31        	l32r	a3, 40080748 <_iram_text_start+0x1f8>
400820d7:	112220        	slli	a2, a2, 14
400820da:	223a      	add.n	a2, a2, a3
400820dc:	a0a532        	movi	a3, 0x5a0
400820df:	0020c0        	memw
400820e2:	0239      	s32i.n	a3, a2, 0
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400820e4:	03e430        	rsr.intenable	a3
	z_xt_ints_on(1 << irq);
400820e7:	c448      	l32i.n	a4, a4, 48
400820e9:	120c      	movi.n	a2, 1
400820eb:	401400        	ssl	a4
400820ee:	a12200        	sll	a2, a2
	val |= mask;
400820f1:	202230        	or	a2, a2, a3
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400820f4:	13e420        	wsr.intenable	a2
400820f7:	002010        	rsync
400820fa:	000086        	j	40082100 <i2c_esp32_configure+0x254>
400820fd:	aa6c00        	floor.s	a6, f12, 0
	XTOS_RESTORE_INTLEVEL(key);
40082100:	13e660        	wsr.ps	a6
40082103:	002010        	rsync
}
40082106:	0a2d      	mov.n	a2, a10
40082108:	f01d      	retw.n
	...

4008210c <i2c_esp32_transmit>:
{
4008210c:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
4008210f:	1238      	l32i.n	a3, a2, 4
	struct i2c_esp32_data *data = dev->data;
40082111:	32a8      	l32i.n	a10, a2, 12
	sys_set_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40082113:	0328      	l32i.n	a2, a3, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082115:	092c      	movi.n	a9, 32
40082117:	1182e0        	slli	a8, a2, 2
4008211a:	882a      	add.n	a8, a8, a2
4008211c:	f97e21        	l32r	a2, 40080714 <_iram_text_start+0x1c4>
4008211f:	118820        	slli	a8, a8, 14
40082122:	882a      	add.n	a8, a8, a2
	uint32_t temp = *(volatile uint32_t *)addr;
40082124:	0020c0        	memw
40082127:	0828      	l32i.n	a2, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082129:	202290        	or	a2, a2, a9
4008212c:	0020c0        	memw
4008212f:	0829      	s32i.n	a2, a8, 0
	return z_impl_k_sem_take(sem, timeout);
40082131:	f986c1        	l32r	a12, 4008074c <_iram_text_start+0x1fc>
40082134:	f929d1        	l32r	a13, 400805d8 <_iram_text_start+0x88>
40082137:	aa8b      	addi.n	a10, a10, 8
40082139:	00df65        	call8	40082f30 <z_impl_k_sem_take>
		return -ETIMEDOUT;
4008213c:	c4af22        	movi	a2, -60
	if (k_sem_take(&data->fifo_sem, K_MSEC(I2C_ESP32_TIMEOUT_MS)) < 0) {
4008213f:	026a96        	bltz	a10, 40082169 <i2c_esp32_transmit+0x5d>
	status = sys_read32(I2C_INT_RAW_REG(config->index));
40082142:	0328      	l32i.n	a2, a3, 0
40082144:	1182e0        	slli	a8, a2, 2
40082147:	882a      	add.n	a8, a8, a2
40082149:	f98121        	l32r	a2, 40080750 <_iram_text_start+0x200>
4008214c:	118820        	slli	a8, a8, 14
4008214f:	882a      	add.n	a8, a8, a2
	return *(volatile uint32_t *)addr;
40082151:	0020c0        	memw
40082154:	0898      	l32i.n	a9, a8, 0
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
40082156:	20a482        	movi	a8, 0x420
40082159:	108980        	and	a8, a9, a8
		return -EIO;
4008215c:	b27c      	movi.n	a2, -5
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
4008215e:	78cc      	bnez.n	a8, 40082169 <i2c_esp32_transmit+0x5d>
	if (status & I2C_TIME_OUT_INT_RAW) {
40082160:	049890        	extui	a9, a9, 8, 1
	return 0;
40082163:	c4af22        	movi	a2, -60
40082166:	832890        	moveqz	a2, a8, a9
}
40082169:	f01d      	retw.n
	...

4008216c <i2c_esp32_init>:
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &i2c_esp32_driver_api);
#endif /* DT_NODE_HAS_STATUS(DT_DRV_INST(1), okay) */

static int i2c_esp32_init(const struct device *dev)
{
4008216c:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
4008216f:	1248      	l32i.n	a4, a2, 4
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
40082171:	f97851        	l32r	a5, 40080754 <_iram_text_start+0x204>
	struct i2c_esp32_data *data = dev->data;
	uint32_t bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
40082174:	e488      	l32i.n	a8, a4, 56
	struct i2c_esp32_data *data = dev->data;
40082176:	3268      	l32i.n	a6, a2, 12
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
40082178:	630c      	movi.n	a3, 6
	switch (bitrate) {
4008217a:	2c1857        	beq	a8, a5, 400821aa <i2c_esp32_init+0x3e>
4008217d:	143587        	bltu	a5, a8, 40082195 <i2c_esp32_init+0x29>
40082180:	f97651        	l32r	a5, 40080758 <_iram_text_start+0x208>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
40082183:	230c      	movi.n	a3, 2
	switch (bitrate) {
40082185:	211857        	beq	a8, a5, 400821aa <i2c_esp32_init+0x3e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
40082188:	f97531        	l32r	a3, 4008075c <_iram_text_start+0x20c>
4008218b:	450c      	movi.n	a5, 4
4008218d:	c08830        	sub	a8, a8, a3
40082190:	000446        	j	400821a5 <i2c_esp32_init+0x39>
40082193:	510000        	lsi	f0, a0, 0x144
	switch (bitrate) {
40082196:	0cf972        	s32ri	a7, a9, 48
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
40082199:	185783        	lsi	f8, a7, 96
	switch (bitrate) {
4008219c:	310c      	movi.n	a1, 3
	return 0;
4008219e:	0cf971        	l32r	a7, 40045584 <esp32_rom_gpio_matrix_out+0x3b678>
400821a1:	8830a5        	call8	4000a4ac <esp32_rom_gpio_matrix_out+0x5a0>
400821a4:	030cc0        	rsr.scompare1	a12
400821a7:	833580        	moveqz	a3, a5, a8
	data->clock_dev = device_get_binding(config->clock_name);
400821aa:	24a8      	l32i.n	a10, a4, 8
400821ac:	004ca5        	call8	40082678 <z_impl_device_get_binding>
400821af:	a6a9      	s32i.n	a10, a6, 40
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400821b1:	006350        	rsil	a5, 3
	return z_impl_k_sem_init(sem, initial_count, limit);
400821b4:	1c0c      	movi.n	a12, 1
400821b6:	0cbd      	mov.n	a11, a12
400821b8:	a68b      	addi.n	a10, a6, 8
400821ba:	0151a5        	call8	400836d4 <z_impl_k_sem_init>
400821bd:	1c0c      	movi.n	a12, 1
400821bf:	20bcc0        	or	a11, a12, a12
400821c2:	18c6a2        	addi	a10, a6, 24
400821c5:	0150e5        	call8	400836d4 <z_impl_k_sem_init>
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400821c8:	03e460        	rsr.intenable	a6
	z_xt_ints_off(1 << irq);
400821cb:	c498      	l32i.n	a9, a4, 48
	val &= ~mask;
400821cd:	e87c      	movi.n	a8, -2
400821cf:	401900        	ssl	a9
400821d2:	818880        	src	a8, a8, a8
400821d5:	108860        	and	a8, a8, a6
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400821d8:	13e480        	wsr.intenable	a8
400821db:	002010        	rsync
	irq_disable(config->irq.line);

	/* Even if irq_enable() is called on config->irq.line, disable
	 * interrupt sources in the I2C controller.
	 */
	sys_write32(0, I2C_INT_ENA_REG(config->index));
400821de:	0468      	l32i.n	a6, a4, 0
	*(volatile uint32_t *)addr = data;
400821e0:	0a0c      	movi.n	a10, 0
400821e2:	1186e0        	slli	a8, a6, 2
400821e5:	886a      	add.n	a8, a8, a6
400821e7:	f95861        	l32r	a6, 40080748 <_iram_text_start+0x1f8>
400821ea:	118820        	slli	a8, a8, 14
400821ed:	886a      	add.n	a8, a8, a6
400821ef:	0020c0        	memw
400821f2:	0068a2        	s32i	a10, a8, 0
	esp32_rom_intr_matrix_set(0, config->irq.source, config->irq.line);
400821f5:	0c24c2        	l32i	a12, a4, 48
400821f8:	b4b8      	l32i.n	a11, a4, 44
400821fa:	f93a81        	l32r	a8, 400806e4 <_iram_text_start+0x194>
400821fd:	0008e0        	callx8	a8

	config->connect_irq();
40082200:	1468      	l32i.n	a6, a4, 4
40082202:	0006e0        	callx8	a6
	XTOS_RESTORE_INTLEVEL(key);
40082205:	13e650        	wsr.ps	a5
40082208:	002010        	rsync
	irq_unlock(key);

	return i2c_esp32_configure(dev, config->default_config | bitrate_cfg);
4008220b:	d4b8      	l32i.n	a11, a4, 52
4008220d:	02ad      	mov.n	a10, a2
4008220f:	20b3b0        	or	a11, a3, a11
40082212:	ffc9a5        	call8	40081eac <i2c_esp32_configure>
}
40082215:	0a2d      	mov.n	a2, a10
40082217:	f01d      	retw.n
40082219:	000000        	ill

4008221c <i2c_esp32_wait$isra$1>:
static int i2c_esp32_wait(const struct device *dev,
4008221c:	004136        	entry	a1, 32
	int counter = 0;
4008221f:	040c      	movi.n	a4, 0
	if (*counter > I2C_ESP32_TIMEOUT) {
40082221:	85a352        	movi	a5, 0x385
	if (wait_cmd) {
40082224:	199347        	bne	a3, a4, 40082241 <i2c_esp32_wait$isra$1+0x25>
40082227:	000cc6        	j	4008225e <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
4008222a:	441b      	addi.n	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
4008222c:	059457        	bne	a4, a5, 40082235 <i2c_esp32_wait$isra$1+0x19>
		return -ETIMEDOUT;
4008222f:	c4af22        	movi	a2, -60
40082232:	001206        	j	4008227e <i2c_esp32_wait$isra$1+0x62>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082235:	58a282        	movi	a8, 0x258
40082238:	05a847        	bge	a8, a4, 40082241 <i2c_esp32_wait$isra$1+0x25>
	z_impl_k_yield();
4008223b:	201110        	or	a1, a1, a1
4008223e:	00be65        	call8	40082e24 <z_impl_k_yield>
		while (!wait_cmd->done) {
40082241:	0020c0        	memw
40082244:	0388      	l32i.n	a8, a3, 0
40082246:	fe08d6        	bgez	a8, 4008222a <i2c_esp32_wait$isra$1+0xe>
40082249:	000446        	j	4008225e <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
4008224c:	01c442        	addi	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
4008224f:	85a332        	movi	a3, 0x385
40082252:	d91437        	beq	a4, a3, 4008222f <i2c_esp32_wait$isra$1+0x13>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082255:	58a232        	movi	a3, 0x258
40082258:	02a347        	bge	a3, a4, 4008225e <i2c_esp32_wait$isra$1+0x42>
4008225b:	00bca5        	call8	40082e24 <z_impl_k_yield>
	while (sys_read32(I2C_SR_REG(config->index)) & I2C_BUS_BUSY) {
4008225e:	002292        	l32i	a9, a2, 0
40082261:	f94131        	l32r	a3, 40080768 <_iram_text_start+0x218>
40082264:	1189e0        	slli	a8, a9, 2
40082267:	808890        	add	a8, a8, a9
4008226a:	118820        	slli	a8, a8, 14
4008226d:	883a      	add.n	a8, a8, a3
	return *(volatile uint32_t *)addr;
4008226f:	0020c0        	memw
40082272:	0888      	l32i.n	a8, a8, 0
40082274:	031c      	movi.n	a3, 16
40082276:	108830        	and	a8, a8, a3
40082279:	fcf856        	bnez	a8, 4008224c <i2c_esp32_wait$isra$1+0x30>
	return 0;
4008227c:	082d      	mov.n	a2, a8
}
4008227e:	f01d      	retw.n

40082280 <i2c_esp32_transfer>:
{
40082280:	008136        	entry	a1, 64
40082283:	206220        	or	a6, a2, a2
	struct i2c_esp32_data *data = dev->data;
40082286:	032222        	l32i	a2, a2, 12
{
40082289:	744040        	extui	a4, a4, 0, 8
4008228c:	f45050        	extui	a5, a5, 0, 16
	k_sem_take(&data->transfer_sem, K_FOREVER);
4008228f:	18c272        	addi	a7, a2, 24
	return z_impl_k_sem_take(sem, timeout);
40082292:	f936c1        	l32r	a12, 4008076c <_iram_text_start+0x21c>
40082295:	f935d1        	l32r	a13, 4008076c <_iram_text_start+0x21c>
40082298:	20a770        	or	a10, a7, a7
4008229b:	00c965        	call8	40082f30 <z_impl_k_sem_take>
	addr &= BIT_MASK(data->dev_config & I2C_ADDR_10_BITS ? 10 : 7);
4008229e:	0228      	l32i.n	a2, a2, 0
400822a0:	ffa392        	movi	a9, 0x3ff
400822a3:	042020        	extui	a2, a2, 0, 1
400822a6:	7fa082        	movi	a8, 127
400822a9:	938920        	movnez	a8, a9, a2
400822ac:	1124f0        	slli	a2, a4, 1
400822af:	224a      	add.n	a2, a2, a4
400822b1:	1122e0        	slli	a2, a2, 2
400822b4:	232a      	add.n	a2, a3, a2
400822b6:	105850        	and	a5, a8, a5
	addr <<= 1;
400822b9:	1155f0        	slli	a5, a5, 1
	for (i = 0U; i < num_msgs; i++) {
400822bc:	4129      	s32i.n	a2, a1, 16
	addr |= BIT(0);
400822be:	120c      	movi.n	a2, 1
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400822c0:	202520        	or	a2, a5, a2
400822c3:	5129      	s32i.n	a2, a1, 20
	for (i = 0U; i < num_msgs; i++) {
400822c5:	007806        	j	400824a9 <i2c_esp32_transfer+0x229>
		if ((msgs[i].flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
400822c8:	012642        	l32i	a4, a6, 4
400822cb:	0123a2        	l32i	a10, a3, 4
400822ce:	002482        	l32i	a8, a4, 0
400822d1:	2398      	l32i.n	a9, a3, 8
400822d3:	1128e0        	slli	a2, a8, 2
400822d6:	228a      	add.n	a2, a2, a8
400822d8:	f92681        	l32r	a8, 40080770 <_iram_text_start+0x220>
400822db:	112220        	slli	a2, a2, 14
400822de:	228a      	add.n	a2, a2, a8
400822e0:	03c8      	l32i.n	a12, a3, 0
400822e2:	080382        	l8ui	a8, a3, 8
400822e5:	01c9      	s32i.n	a12, a1, 0
400822e7:	048080        	extui	a8, a8, 0, 1
400822ea:	11a9      	s32i.n	a10, a1, 4
400822ec:	2199      	s32i.n	a9, a1, 8
400822ee:	b24b      	addi.n	a11, a2, 4
400822f0:	0c3856        	bnez	a8, 400823b7 <i2c_esp32_transfer+0x137>
	*cmd++ = (struct i2c_esp32_cmd) {
400822f3:	0020c0        	memw
400822f6:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400822f8:	05dd      	mov.n	a13, a5
400822fa:	01cd      	mov.n	a12, a1
400822fc:	06ad      	mov.n	a10, a6
400822fe:	ffae65        	call8	40081de4 <i2c_esp32_write_addr>
40082301:	0abd      	mov.n	a11, a10
		uint32_t to_send = MIN(I2C_ESP32_BUFFER_SIZE, msg.len);
40082303:	022c      	movi.n	a2, 32
40082305:	002986        	j	400823af <i2c_esp32_transfer+0x12f>
40082308:	882000        	lsi	f0, a0, 0x220
4008230b:	fbd163        	lsi	f6, a1, 0x3ec
				    I2C_DATA_APB_REG(config->index));
4008230e:	adf8      	l32i.n	a15, a13, 40
40082310:	7608      	l32i.n	a0, a6, 28
40082312:	198a      	add.n	a1, a9, a8
			sys_write32(*msg.buf++,
40082314:	0198      	l32i.n	a9, a1, 0
				    I2C_DATA_APB_REG(config->index));
40082316:	04e8      	l32i.n	a14, a4, 0
			sys_write32(*msg.buf++,
40082318:	c91b      	addi.n	a12, a9, 1
4008231a:	01c9      	s32i.n	a12, a1, 0
4008231c:	0009c2        	l8ui	a12, a9, 0
				    I2C_DATA_APB_REG(config->index));
4008231f:	119ee0        	slli	a9, a14, 2
40082322:	99ea      	add.n	a9, a9, a14
40082324:	119920        	slli	a9, a9, 14
40082327:	99da      	add.n	a9, a9, a13
	*(volatile uint32_t *)addr = data;
40082329:	0020c0        	memw
4008232c:	09c9      	s32i.n	a12, a9, 0
		*cmd++ = (struct i2c_esp32_cmd) {
4008232e:	990c      	movi.n	a9, 9
40082330:	11a980        	slli	a10, a9, 8
40082333:	749080        	extui	a9, a8, 0, 8
40082336:	2099a0        	or	a9, a9, a10
40082339:	0020c0        	memw
4008233c:	0b99      	s32i.n	a9, a11, 0
		msg.len -= to_send;
4008233e:	1198      	l32i.n	a9, a1, 4
40082340:	c08980        	sub	a8, a9, a8
40082343:	1189      	s32i.n	a8, a1, 4
		if (!msg.len && (msg.flags & I2C_MSG_STOP)) {
40082345:	c8dc      	bnez.n	a8, 40082365 <i2c_esp32_transfer+0xe5>
40082347:	080192        	l8ui	a9, a1, 8
4008234a:	176917        	bbci	a9, 1, 40082365 <i2c_esp32_transfer+0xe5>
			*cmd = (struct i2c_esp32_cmd) {
4008234d:	0020c0        	memw
40082350:	1b89      	s32i.n	a8, a11, 4
40082352:	f8b091        	l32r	a9, 40080614 <_iram_text_start+0xc4>
40082355:	0020c0        	memw
40082358:	1b88      	l32i.n	a8, a11, 4
4008235a:	108890        	and	a8, a8, a9
4008235d:	f90591        	l32r	a9, 40080774 <_iram_text_start+0x224>
40082360:	000586        	j	4008237a <i2c_esp32_transfer+0xfa>
40082363:	0c0000        	lsi	f0, a0, 48
			*cmd = (struct i2c_esp32_cmd) {
40082366:	c008      	l32i.n	a0, a0, 48
40082368:	890020        	lsi	f2, a0, 0x224
4008236b:	911b      	addi.n	a9, a1, 1
4008236d:	f8aa      	add.n	a15, a8, a10
4008236f:	0020c0        	memw
40082372:	1b88      	l32i.n	a8, a11, 4
40082374:	108890        	and	a8, a8, a9
40082377:	f8a891        	l32r	a9, 40080618 <_iram_text_start+0xc8>
4008237a:	208890        	or	a8, a8, a9
4008237d:	0020c0        	memw
40082380:	1b89      	s32i.n	a8, a11, 4
	ret = i2c_esp32_transmit(dev);
40082382:	06ad      	mov.n	a10, a6
40082384:	61b9      	s32i.n	a11, a1, 24
40082386:	ffd865        	call8	4008210c <i2c_esp32_transmit>
40082389:	0a8d      	mov.n	a8, a10
	if (!ret) {
4008238b:	61b8      	l32i.n	a11, a1, 24
4008238d:	7acc      	bnez.n	a10, 40082398 <i2c_esp32_transfer+0x118>
		return i2c_esp32_wait(dev, wait_cmd);
4008238f:	16a8      	l32i.n	a10, a6, 4
40082391:	bb4b      	addi.n	a11, a11, 4
40082393:	ffe8a5        	call8	4008221c <i2c_esp32_wait$isra$1>
40082396:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082398:	109896        	bltz	a8, 400824a5 <i2c_esp32_transfer+0x225>
		i2c_esp32_reset_fifo(config);
4008239b:	04a8      	l32i.n	a10, a4, 0
4008239d:	ffa125        	call8	40081db0 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400823a0:	0488      	l32i.n	a8, a4, 0
400823a2:	11b8e0        	slli	a11, a8, 2
400823a5:	bb8a      	add.n	a11, a11, a8
400823a7:	f8f281        	l32r	a8, 40080770 <_iram_text_start+0x220>
400823aa:	11bb20        	slli	a11, a11, 14
400823ad:	bb8a      	add.n	a11, a11, a8
400823af:	1188      	l32i.n	a8, a1, 4
400823b1:	f54856        	bnez	a8, 40082309 <i2c_esp32_transfer+0x89>
400823b4:	003b46        	j	400824a5 <i2c_esp32_transfer+0x225>
	*cmd++ = (struct i2c_esp32_cmd) {
400823b7:	080c      	movi.n	a8, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400823b9:	51d8      	l32i.n	a13, a1, 20
	*cmd++ = (struct i2c_esp32_cmd) {
400823bb:	0020c0        	memw
400823be:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400823c0:	01cd      	mov.n	a12, a1
400823c2:	20a660        	or	a10, a6, a6
400823c5:	ffa1e5        	call8	40081de4 <i2c_esp32_write_addr>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400823c8:	003506        	j	400824a0 <i2c_esp32_transfer+0x220>
400823cb:	000000        	ill
		uint32_t to_read = MIN(I2C_ESP32_BUFFER_SIZE, msg.len - 1);
400823ce:	280b      	addi.n	a2, a8, -1
400823d0:	092c      	movi.n	a9, 32
400823d2:	632290        	minu	a2, a2, a9
		if (to_read) {
400823d5:	0f1826        	beqi	a8, 1, 400823e8 <i2c_esp32_transfer+0x168>
			*cmd++ = (struct i2c_esp32_cmd) {
400823d8:	f8b7c1        	l32r	a12, 400806b4 <_iram_text_start+0x164>
400823db:	74b020        	extui	a11, a2, 0, 8
400823de:	20bbc0        	or	a11, a11, a12
400823e1:	0020c0        	memw
400823e4:	0ab9      	s32i.n	a11, a10, 0
400823e6:	aa4b      	addi.n	a10, a10, 4
		if (msg.len - to_read <= 1U) {
400823e8:	c08820        	sub	a8, a8, a2
400823eb:	3728f6        	bgeui	a8, 2, 40082426 <i2c_esp32_transfer+0x1a6>
			*cmd++ = (struct i2c_esp32_cmd) {
400823ee:	f8e281        	l32r	a8, 40080778 <_iram_text_start+0x228>
400823f1:	ba4b      	addi.n	a11, a10, 4
400823f3:	0020c0        	memw
400823f6:	0a89      	s32i.n	a8, a10, 0
			if (msg.flags & I2C_MSG_STOP) {
400823f8:	080182        	l8ui	a8, a1, 8
			to_read++;
400823fb:	221b      	addi.n	a2, a2, 1
			if (msg.flags & I2C_MSG_STOP) {
400823fd:	236817        	bbci	a8, 1, 40082424 <i2c_esp32_transfer+0x1a4>
				*cmd++ = (struct i2c_esp32_cmd) {
40082400:	080c      	movi.n	a8, 0
40082402:	0020c0        	memw
40082405:	1a89      	s32i.n	a8, a10, 4
40082407:	0020c0        	memw
4008240a:	1a88      	l32i.n	a8, a10, 4
4008240c:	f882c1        	l32r	a12, 40080614 <_iram_text_start+0xc4>
4008240f:	1088c0        	and	a8, a8, a12
40082412:	f8d8c1        	l32r	a12, 40080774 <_iram_text_start+0x224>
40082415:	2088c0        	or	a8, a8, a12
40082418:	0020c0        	memw
4008241b:	1a89      	s32i.n	a8, a10, 4
4008241d:	4a0c      	movi.n	a10, 4
		if (!wait_cmd) {
4008241f:	3b8c      	beqz.n	a11, 40082426 <i2c_esp32_transfer+0x1a6>
40082421:	000786        	j	40082443 <i2c_esp32_transfer+0x1c3>
			*cmd++ = (struct i2c_esp32_cmd) {
40082424:	0bad      	mov.n	a10, a11
			*cmd++ = (struct i2c_esp32_cmd) {
40082426:	0b0c      	movi.n	a11, 0
40082428:	0020c0        	memw
4008242b:	0ab9      	s32i.n	a11, a10, 0
4008242d:	0020c0        	memw
40082430:	0a88      	l32i.n	a8, a10, 0
40082432:	f878c1        	l32r	a12, 40080614 <_iram_text_start+0xc4>
40082435:	1088c0        	and	a8, a8, a12
40082438:	f878c1        	l32r	a12, 40080618 <_iram_text_start+0xc8>
4008243b:	2088c0        	or	a8, a8, a12
4008243e:	0020c0        	memw
40082441:	0a89      	s32i.n	a8, a10, 0
	ret = i2c_esp32_transmit(dev);
40082443:	06ad      	mov.n	a10, a6
40082445:	61b9      	s32i.n	a11, a1, 24
40082447:	ffcc65        	call8	4008210c <i2c_esp32_transmit>
4008244a:	0a8d      	mov.n	a8, a10
	if (!ret) {
4008244c:	61b8      	l32i.n	a11, a1, 24
4008244e:	006a56        	bnez	a10, 40082458 <i2c_esp32_transfer+0x1d8>
		return i2c_esp32_wait(dev, wait_cmd);
40082451:	16a8      	l32i.n	a10, a6, 4
40082453:	ffdca5        	call8	4008221c <i2c_esp32_wait$isra$1>
40082456:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082458:	049896        	bltz	a8, 400824a5 <i2c_esp32_transfer+0x225>
		for (i = 0U; i < to_read; i++) {
4008245b:	0a0c      	movi.n	a10, 0
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
4008245d:	f8a6b1        	l32r	a11, 400806f8 <_iram_text_start+0x1a8>
40082460:	000786        	j	40082482 <i2c_esp32_transfer+0x202>
40082463:	24c200        	extui	a12, a0, 2, 3
40082466:	caa200        	float.s	f10, a2, 0
		for (i = 0U; i < to_read; i++) {
40082469:	8ce001        	l32r	a0, 400657ec <esp32_rom_gpio_matrix_out+0x5b8e0>
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
4008246c:	88ca11        	l32r	a1, 40064794 <esp32_rom_gpio_matrix_out+0x5a888>
4008246f:	118820        	slli	a8, a8, 14
40082472:	88ba      	add.n	a8, a8, a11
	return *(volatile uint32_t *)addr;
40082474:	0020c0        	memw
40082477:	08c8      	l32i.n	a12, a8, 0
			*msg.buf++ = v & I2C_FIFO_RDATA;
40082479:	0188      	l32i.n	a8, a1, 0
4008247b:	d81b      	addi.n	a13, a8, 1
4008247d:	01d9      	s32i.n	a13, a1, 0
4008247f:	0048c2        	s8i	a12, a8, 0
		for (i = 0U; i < to_read; i++) {
40082482:	de9a27        	bne	a10, a2, 40082464 <i2c_esp32_transfer+0x1e4>
		msg.len -= to_read;
40082485:	1188      	l32i.n	a8, a1, 4
40082487:	c0a8a0        	sub	a10, a8, a10
4008248a:	11a9      	s32i.n	a10, a1, 4
		i2c_esp32_reset_fifo(config);
4008248c:	04a8      	l32i.n	a10, a4, 0
4008248e:	ff9225        	call8	40081db0 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
40082491:	0488      	l32i.n	a8, a4, 0
40082493:	11a8e0        	slli	a10, a8, 2
40082496:	aa8a      	add.n	a10, a10, a8
40082498:	f8b681        	l32r	a8, 40080770 <_iram_text_start+0x220>
4008249b:	11aa20        	slli	a10, a10, 14
4008249e:	aa8a      	add.n	a10, a10, a8
400824a0:	1188      	l32i.n	a8, a1, 4
400824a2:	f28856        	bnez	a8, 400823ce <i2c_esp32_transfer+0x14e>
		if (ret < 0) {
400824a5:	33cb      	addi.n	a3, a3, 12
400824a7:	88cc      	bnez.n	a8, 400824b3 <i2c_esp32_transfer+0x233>
	for (i = 0U; i < num_msgs; i++) {
400824a9:	4128      	l32i.n	a2, a1, 16
400824ab:	021237        	beq	a2, a3, 400824b1 <i2c_esp32_transfer+0x231>
400824ae:	ff8586        	j	400822c8 <i2c_esp32_transfer+0x48>
400824b1:	080c      	movi.n	a8, 0
	z_impl_k_sem_give(sem);
400824b3:	07ad      	mov.n	a10, a7
400824b5:	6189      	s32i.n	a8, a1, 24
400824b7:	00a3e5        	call8	40082ef4 <z_impl_k_sem_give>
}
400824ba:	6188      	l32i.n	a8, a1, 24
400824bc:	082d      	mov.n	a2, a8
400824be:	f01d      	retw.n

400824c0 <uart_esp32_configure>:
	return 0;
}

static int uart_esp32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
400824c0:	006136        	entry	a1, 48
	uint32_t conf0 = UART_TICK_REF_ALWAYS_ON;
	uint32_t conf1 = (UART_RX_FIFO_THRESH << UART_RXFIFO_FULL_THRHD_S)
		      | (UART_TX_FIFO_THRESH << UART_TXFIFO_EMPTY_THRHD_S);

	uart_esp32_configure_pins(dev);
400824c3:	1248      	l32i.n	a4, a2, 4
	esp32_rom_gpio_matrix_out(cfg->pins.tx,
400824c5:	0d0c      	movi.n	a13, 0
400824c7:	34b8      	l32i.n	a11, a4, 12
400824c9:	0724a2        	l32i	a10, a4, 28
400824cc:	0dcd      	mov.n	a12, a13
400824ce:	f88e81        	l32r	a8, 40080708 <_iram_text_start+0x1b8>
400824d1:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(cfg->pins.rx,
400824d4:	44b8      	l32i.n	a11, a4, 16
400824d6:	84a8      	l32i.n	a10, a4, 32
400824d8:	0c0c      	movi.n	a12, 0
400824da:	f88c81        	l32r	a8, 4008070c <_iram_text_start+0x1bc>
400824dd:	0008e0        	callx8	a8
	if (cfg->pins.cts) {
400824e0:	a4a8      	l32i.n	a10, a4, 40
400824e2:	aa8c      	beqz.n	a10, 400824f0 <uart_esp32_configure+0x30>
		esp32_rom_gpio_matrix_out(cfg->pins.cts,
400824e4:	0d0c      	movi.n	a13, 0
400824e6:	64b8      	l32i.n	a11, a4, 24
400824e8:	0dcd      	mov.n	a12, a13
400824ea:	f88781        	l32r	a8, 40080708 <_iram_text_start+0x1b8>
400824ed:	0008e0        	callx8	a8
	if (cfg->pins.rts) {
400824f0:	94a8      	l32i.n	a10, a4, 36
400824f2:	8a8c      	beqz.n	a10, 400824fe <uart_esp32_configure+0x3e>
		esp32_rom_gpio_matrix_in(cfg->pins.rts,
400824f4:	54b8      	l32i.n	a11, a4, 20
400824f6:	0c0c      	movi.n	a12, 0
400824f8:	f88581        	l32r	a8, 4008070c <_iram_text_start+0x1bc>
400824fb:	0008e0        	callx8	a8
	clock_control_on(DEV_DATA(dev)->clock_dev, DEV_CFG(dev)->peripheral_id);
400824fe:	3248      	l32i.n	a4, a2, 12
40082500:	1258      	l32i.n	a5, a2, 4
40082502:	24a8      	l32i.n	a10, a4, 8
	return api->on(dev, sys);
40082504:	b5b8      	l32i.n	a11, a5, 44
40082506:	2a48      	l32i.n	a4, a10, 8
40082508:	0448      	l32i.n	a4, a4, 0
4008250a:	0004e0        	callx8	a4

	/*
	 * Reset RX Buffer by reading all received bytes
	 * Hardware Reset functionality can't be used with UART 1/2
	 */
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
4008250d:	12b8      	l32i.n	a11, a2, 4
4008250f:	0b58      	l32i.n	a5, a11, 0
40082511:	000106        	j	40082519 <uart_esp32_configure+0x59>
		(void) DEV_BASE(dev)->fifo;
40082514:	0020c0        	memw
40082517:	0548      	l32i.n	a4, a5, 0
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
40082519:	0020c0        	memw
4008251c:	7548      	l32i.n	a4, a5, 28
4008251e:	744040        	extui	a4, a4, 0, 8
40082521:	fef456        	bnez	a4, 40082514 <uart_esp32_configure+0x54>
	}

	switch (cfg->parity) {
40082524:	040342        	l8ui	a4, a3, 4
40082527:	0d1426        	beqi	a4, 1, 40082538 <uart_esp32_configure+0x78>
4008252a:	249c      	beqz.n	a4, 40082540 <uart_esp32_configure+0x80>
		break;
	case UART_CFG_PARITY_ODD:
		conf0 |= UART_PARITY;
		break;
	default:
		return -ENOTSUP;
4008252c:	ddaf92        	movi	a9, -35
	switch (cfg->parity) {
4008252f:	022426        	beqi	a4, 2, 40082535 <uart_esp32_configure+0x75>
40082532:	002606        	j	400825ce <uart_esp32_configure+0x10e>
40082535:	0001c6        	j	40082540 <uart_esp32_configure+0x80>
		conf0 |= UART_PARITY;
40082538:	f89151        	l32r	a5, 4008077c <_iram_text_start+0x22c>
4008253b:	000106        	j	40082543 <uart_esp32_configure+0x83>
4008253e:	510000        	lsi	f0, a0, 0x144
		conf0 &= ~(UART_PARITY);
40082541:	f839      	s32i.n	a3, a8, 60
	}

	switch (cfg->stop_bits) {
40082543:	050382        	l8ui	a8, a3, 5
	case UART_CFG_STOP_BITS_1_5:
	case UART_CFG_STOP_BITS_2:
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
		break;
	default:
		return -ENOTSUP;
40082546:	ddaf92        	movi	a9, -35
	switch (cfg->stop_bits) {
40082549:	480b      	addi.n	a4, a8, -1
4008254b:	7f34f6        	bgeui	a4, 3, 400825ce <uart_esp32_configure+0x10e>
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
4008254e:	11a8c0        	slli	a10, a8, 4
	}

	if (cfg->data_bits <= UART_CFG_DATA_BITS_8) {
40082551:	060382        	l8ui	a8, a3, 6
40082554:	7648f6        	bgeui	a8, 4, 400825ce <uart_esp32_configure+0x10e>
		conf0 |= cfg->data_bits << UART_BIT_NUM_S;
40082557:	1148e0        	slli	a4, a8, 2
4008255a:	2044a0        	or	a4, a4, a10
4008255d:	204450        	or	a4, a4, a5
	} else {
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
40082560:	070352        	l8ui	a5, a3, 7
40082563:	d58c      	beqz.n	a5, 40082574 <uart_esp32_configure+0xb4>
40082565:	651566        	bnei	a5, 1, 400825ce <uart_esp32_configure+0x10e>
	case UART_CFG_FLOW_CTRL_NONE:
		conf0 &= ~(UART_TX_FLOW_EN);
		conf1 &= ~(UART_RX_FLOW_EN);
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		conf0 |= UART_TX_FLOW_EN;
40082568:	f83c51        	l32r	a5, 40080658 <_iram_text_start+0x108>
4008256b:	204450        	or	a4, a4, a5
		conf1 |= UART_RX_FLOW_EN;
4008256e:	f88451        	l32r	a5, 40080780 <_iram_text_start+0x230>
		break;
40082571:	000086        	j	40082577 <uart_esp32_configure+0xb7>
		conf1 &= ~(UART_RX_FLOW_EN);
40082574:	01a152        	movi	a5, 0x101
	uint32_t sys_clk_freq = 0;
40082577:	080c      	movi.n	a8, 0
40082579:	0189      	s32i.n	a8, a1, 0
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
4008257b:	3288      	l32i.n	a8, a2, 12
	return api->get_rate(dev, sys, rate);
4008257d:	bbb8      	l32i.n	a11, a11, 44
4008257f:	28a8      	l32i.n	a10, a8, 8
40082581:	01cd      	mov.n	a12, a1
40082583:	2a88      	l32i.n	a8, a10, 8
	default:
		return -ENOTSUP;
	}

	if (uart_esp32_set_baudrate(dev, cfg->baudrate)) {
40082585:	002362        	l32i	a6, a3, 0
40082588:	032882        	l32i	a8, a8, 12
4008258b:	0008e0        	callx8	a8
4008258e:	12b8      	l32i.n	a11, a2, 4
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
40082590:	6aec      	bnez.n	a10, 400825ba <uart_esp32_configure+0xfa>
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
40082592:	0188      	l32i.n	a8, a1, 0
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
40082594:	0ba8      	l32i.n	a10, a11, 0
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
40082596:	1188c0        	slli	a8, a8, 4
40082599:	c28860        	quou	a8, a8, a6
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
4008259c:	0020c0        	memw
4008259f:	7a98      	l32i.n	a9, a10, 28
400825a1:	759090        	extui	a9, a9, 16, 8
400825a4:	ff4956        	bnez	a9, 4008259c <uart_esp32_configure+0xdc>
	if (clk_div < 16) {
400825a7:	f90c      	movi.n	a9, 15
400825a9:	0db987        	bgeu	a9, a8, 400825ba <uart_esp32_configure+0xfa>
	DEV_BASE(dev)->clk_div = ((clk_div >> 4) | (clk_div & 0xf));
400825ac:	419480        	srli	a9, a8, 4
400825af:	348080        	extui	a8, a8, 0, 4
400825b2:	208980        	or	a8, a9, a8
400825b5:	0020c0        	memw
400825b8:	5a89      	s32i.n	a8, a10, 20
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400825ba:	0338      	l32i.n	a3, a3, 0
400825bc:	3228      	l32i.n	a2, a2, 12
	}

	DEV_BASE(dev)->conf0 = conf0;
	DEV_BASE(dev)->conf1 = conf1;

	return 0;
400825be:	090c      	movi.n	a9, 0
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400825c0:	0239      	s32i.n	a3, a2, 0
	DEV_BASE(dev)->conf0 = conf0;
400825c2:	0b28      	l32i.n	a2, a11, 0
400825c4:	0020c0        	memw
400825c7:	8249      	s32i.n	a4, a2, 32
	DEV_BASE(dev)->conf1 = conf1;
400825c9:	0020c0        	memw
400825cc:	9259      	s32i.n	a5, a2, 36
}
400825ce:	092d      	mov.n	a2, a9
400825d0:	f01d      	retw.n
	...

400825d4 <uart_esp32_init>:

static int uart_esp32_init(const struct device *dev)
{
400825d4:	004136        	entry	a1, 32
	struct uart_esp32_data *data = DEV_DATA(dev);

	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400825d7:	012282        	l32i	a8, a2, 4
	struct uart_esp32_data *data = DEV_DATA(dev);
400825da:	032232        	l32i	a3, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400825dd:	0228a2        	l32i	a10, a8, 8
400825e0:	000965        	call8	40082678 <z_impl_device_get_binding>

	__ASSERT_NO_MSG(data->clock_dev);

	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400825e3:	32b8      	l32i.n	a11, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400825e5:	23a9      	s32i.n	a10, a3, 8
	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400825e7:	02ad      	mov.n	a10, a2
400825e9:	ffed65        	call8	400824c0 <uart_esp32_configure>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->dev_conf.irq_config_func(dev);
#endif
	return 0;
}
400825ec:	020c      	movi.n	a2, 0
400825ee:	f01d      	retw.n

400825f0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
400825f0:	004136        	entry	a1, 32
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400825f3:	f86481        	l32r	a8, 40080784 <_iram_text_start+0x234>
400825f6:	1132e0        	slli	a3, a2, 2
400825f9:	221b      	addi.n	a2, a2, 1
400825fb:	1122e0        	slli	a2, a2, 2
400825fe:	383a      	add.n	a3, a8, a3
40082600:	282a      	add.n	a2, a8, a2
40082602:	0338      	l32i.n	a3, a3, 0
40082604:	0248      	l32i.n	a4, a2, 0

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) == 0) && (dev != NULL)) {
40082606:	150c      	movi.n	a5, 1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
40082608:	000d86        	j	40082642 <z_sys_init_run_level+0x52>
4008260b:	132800        	lsi	f0, a8, 76
		if ((entry->init(dev) == 0) && (dev != NULL)) {
4008260e:	0388      	l32i.n	a8, a3, 0
40082610:	02ad      	mov.n	a10, a2
40082612:	0008e0        	callx8	a8
40082615:	7aec      	bnez.n	a10, 40082640 <z_sys_init_run_level+0x50>
40082617:	52ac      	beqz.n	a2, 40082640 <z_sys_init_run_level+0x50>
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
40082619:	f85b81        	l32r	a8, 40080788 <_iram_text_start+0x238>
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
4008261c:	f85c91        	l32r	a9, 4008078c <_iram_text_start+0x23c>
4008261f:	c02280        	sub	a2, a2, a8
40082622:	212420        	srai	a2, a2, 4
40082625:	418520        	srli	a8, a2, 5
40082628:	1188e0        	slli	a8, a8, 2
4008262b:	889a      	add.n	a8, a8, a9
	uint32_t temp = *(volatile uint32_t *)addr;
4008262d:	0020c0        	memw
40082630:	0898      	l32i.n	a9, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082632:	401200        	ssl	a2
40082635:	a12500        	sll	a2, a5
40082638:	202290        	or	a2, a2, a9
4008263b:	0020c0        	memw
4008263e:	0829      	s32i.n	a2, a8, 0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
40082640:	338b      	addi.n	a3, a3, 8
40082642:	c63347        	bltu	a3, a4, 4008260c <z_sys_init_run_level+0x1c>
		}
	}
}
40082645:	f01d      	retw.n
	...

40082648 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
40082648:	004136        	entry	a1, 32
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
4008264b:	f84f81        	l32r	a8, 40080788 <_iram_text_start+0x238>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
4008264e:	f84f91        	l32r	a9, 4008078c <_iram_text_start+0x23c>
40082651:	c08280        	sub	a8, a2, a8
40082654:	218480        	srai	a8, a8, 4
40082657:	412580        	srli	a2, a8, 5
4008265a:	1122e0        	slli	a2, a2, 2
4008265d:	229a      	add.n	a2, a2, a9
	uint32_t temp = *(volatile uint32_t *)addr;
4008265f:	0020c0        	memw
40082662:	02a8      	l32i.n	a10, a2, 0
	return temp & (1 << bit);
40082664:	190c      	movi.n	a9, 1
40082666:	401800        	ssl	a8
40082669:	a12900        	sll	a2, a9
4008266c:	1022a0        	and	a2, a2, a10
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
4008266f:	080c      	movi.n	a8, 0
40082671:	938920        	movnez	a8, a9, a2
40082674:	082d      	mov.n	a2, a8
}
40082676:	f01d      	retw.n

40082678 <z_impl_device_get_binding>:
{
40082678:	004136        	entry	a1, 32
4008267b:	024d      	mov.n	a4, a2
	for (dev = __device_start; dev != __device_end; dev++) {
4008267d:	f84221        	l32r	a2, 40080788 <_iram_text_start+0x238>
40082680:	f84331        	l32r	a3, 4008078c <_iram_text_start+0x23c>
40082683:	025d      	mov.n	a5, a2
40082685:	000486        	j	4008269b <z_impl_device_get_binding+0x23>
40082688:	a22000        	muluh	a2, a0, a0
		if (z_device_ready(dev) && (dev->name == name)) {
4008268b:	fba520        	f64subc	a2, a5, 1, 0
4008268e:	ff          	.byte 0xff
4008268f:	005a16        	beqz	a10, 40082698 <z_impl_device_get_binding+0x20>
40082692:	002282        	l32i	a8, a2, 0
40082695:	2f1847        	beq	a8, a4, 400826c8 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
40082698:	10c222        	addi	a2, a2, 16
4008269b:	ea9237        	bne	a2, a3, 40082689 <z_impl_device_get_binding+0x11>
	for (dev = __device_start; dev != __device_end; dev++) {
4008269e:	052d      	mov.n	a2, a5
400826a0:	0007c6        	j	400826c3 <z_impl_device_get_binding+0x4b>
400826a3:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400826a6:	02ad      	mov.n	a10, a2
400826a8:	fff9e5        	call8	40082648 <z_device_ready>
400826ab:	7acc      	bnez.n	a10, 400826b6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
400826ad:	10c222        	addi	a2, a2, 16
400826b0:	0003c6        	j	400826c3 <z_impl_device_get_binding+0x4b>
400826b3:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400826b6:	02b8      	l32i.n	a11, a2, 0
400826b8:	04ad      	mov.n	a10, a4
400826ba:	00d8e5        	call8	40083448 <strcmp>
400826bd:	feca56        	bnez	a10, 400826ad <z_impl_device_get_binding+0x35>
400826c0:	000106        	j	400826c8 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
400826c3:	df9237        	bne	a2, a3, 400826a6 <z_impl_device_get_binding+0x2e>
	return NULL;
400826c6:	020c      	movi.n	a2, 0
}
400826c8:	f01d      	retw.n
	...

400826cc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
400826cc:	004136        	entry	a1, 32
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
400826cf:	02ad      	mov.n	a10, a2
400826d1:	00fd25        	call8	400836a4 <arch_system_halt>

400826d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
400826d4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400826d7:	006350        	rsil	a5, 3
	return z_impl_k_current_get();
400826da:	0080e5        	call8	40082ee8 <z_impl_k_current_get>
400826dd:	204aa0        	or	a4, a10, a10
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
400826e0:	03bd      	mov.n	a11, a3
400826e2:	02ad      	mov.n	a10, a2
400826e4:	fffe65        	call8	400826cc <k_sys_fatal_error_handler>
	XTOS_RESTORE_INTLEVEL(key);
400826e7:	13e650        	wsr.ps	a5
400826ea:	002010        	rsync
	z_impl_k_thread_abort(thread);
400826ed:	04ad      	mov.n	a10, a4
400826ef:	0094e5        	call8	4008303c <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
400826f2:	f01d      	retw.n

400826f4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
400826f4:	004136        	entry	a1, 32
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
400826f7:	f82681        	l32r	a8, 40080790 <_iram_text_start+0x240>
400826fa:	190c      	movi.n	a9, 1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
400826fc:	02a0a2        	movi	a10, 2
	z_sys_post_kernel = true;
400826ff:	004892        	s8i	a9, a8, 0
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
40082702:	ffeee5        	call8	400825f0 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
40082705:	f823c1        	l32r	a12, 40080794 <_iram_text_start+0x244>
40082708:	f824b1        	l32r	a11, 40080798 <_iram_text_start+0x248>
4008270b:	f824a1        	l32r	a10, 4008079c <_iram_text_start+0x24c>
4008270e:	fe7ba5        	call8	40080ec8 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
40082711:	3a0c      	movi.n	a10, 3
40082713:	ffede5        	call8	400825f0 <z_sys_init_run_level>

	z_init_static_threads();
40082716:	008ae5        	call8	40082fc4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
40082719:	fe1965        	call8	400808b0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
4008271c:	f82191        	l32r	a9, 400807a0 <_iram_text_start+0x250>
4008271f:	ea7c      	movi.n	a10, -2
40082721:	0c0982        	l8ui	a8, a9, 12
40082724:	1088a0        	and	a8, a8, a10
40082727:	0c4982        	s8i	a8, a9, 12

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
4008272a:	f01d      	retw.n

4008272c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
4008272c:	020136        	entry	a1, 0x100

static ALWAYS_INLINE void arch_kernel_init(void)
{
	_cpu_t *cpu0 = &_kernel.cpus[0];

	cpu0->nested = 0;
4008272f:	f79021        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082732:	030c      	movi.n	a3, 0
40082734:	0239      	s32i.n	a3, a2, 0
	 * access.  That saves 4 bytes of immediate value to store the
	 * address when compared to the legacy scheme.  But in SMP
	 * this record is a per-CPU thing and having it stored in a SR
	 * already is a big win.
	 */
	WSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR, cpu0);
40082736:	13f420        	wsr.misc0	a2
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
40082739:	01a142        	movi	a4, 0x101
4008273c:	0e5142        	s16i	a4, a1, 28
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
4008273f:	10c142        	addi	a4, a1, 16
40082742:	2249      	s32i.n	a4, a2, 8

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
40082744:	03ad      	mov.n	a10, a3
40082746:	ffeaa5        	call8	400825f0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
40082749:	1a0c      	movi.n	a10, 1
4008274b:	ffea65        	call8	400825f0 <z_sys_init_run_level>
	z_sched_init();
4008274e:	006ba5        	call8	40082e08 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
40082751:	f81341        	l32r	a4, 400807a0 <_iram_text_start+0x250>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082754:	f81651        	l32r	a5, 400807ac <_iram_text_start+0x25c>
	_kernel.ready_q.cache = &z_main_thread;
40082757:	e249      	s32i.n	a4, a2, 56
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082759:	3159      	s32i.n	a5, a1, 12
4008275b:	f812d1        	l32r	a13, 400807a4 <_iram_text_start+0x254>
4008275e:	150c      	movi.n	a5, 1
40082760:	f7b7c1        	l32r	a12, 4008063c <_iram_text_start+0xec>
40082763:	f811b1        	l32r	a11, 400807a8 <_iram_text_start+0x258>
40082766:	03fd      	mov.n	a15, a3
40082768:	03ed      	mov.n	a14, a3
4008276a:	1139      	s32i.n	a3, a1, 4
4008276c:	0139      	s32i.n	a3, a1, 0
4008276e:	2159      	s32i.n	a5, a1, 8
40082770:	04ad      	mov.n	a10, a4
40082772:	007fa5        	call8	40082f6c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082775:	0d0462        	l8ui	a6, a4, 13
40082778:	b77c      	movi.n	a7, -5
4008277a:	106670        	and	a6, a6, a7
4008277d:	0d4462        	s8i	a6, a4, 13
	z_ready_thread(&z_main_thread);
40082780:	04ad      	mov.n	a10, a4
40082782:	002ce5        	call8	40082a50 <z_ready_thread>
	z_setup_new_thread(thread, stack,
40082785:	f80c41        	l32r	a4, 400807b8 <_iram_text_start+0x268>
40082788:	f90c      	movi.n	a9, 15
4008278a:	f809d1        	l32r	a13, 400807b0 <_iram_text_start+0x260>
4008278d:	f809b1        	l32r	a11, 400807b4 <_iram_text_start+0x264>
40082790:	3139      	s32i.n	a3, a1, 12
40082792:	1199      	s32i.n	a9, a1, 4
40082794:	0139      	s32i.n	a3, a1, 0
40082796:	03fd      	mov.n	a15, a3
40082798:	03ed      	mov.n	a14, a3
4008279a:	2159      	s32i.n	a5, a1, 8
4008279c:	00a4c2        	movi	a12, 0x400
4008279f:	04ad      	mov.n	a10, a4
400827a1:	346192        	s32i	a9, a1, 208
400827a4:	007c65        	call8	40082f6c <z_setup_new_thread>
400827a7:	0d0462        	l8ui	a6, a4, 13
		_kernel.cpus[i].id = i;
400827aa:	144232        	s8i	a3, a2, 20
400827ad:	106670        	and	a6, a6, a7
400827b0:	0d4462        	s8i	a6, a4, 13
		_kernel.cpus[i].irq_stack =
400827b3:	f80261        	l32r	a6, 400807bc <_iram_text_start+0x26c>
	z_setup_new_thread(thread, stack,
400827b6:	342192        	l32i	a9, a1, 208
		_kernel.cpus[i].irq_stack =
400827b9:	1269      	s32i.n	a6, a2, 4
	z_setup_new_thread(thread, stack,
400827bb:	f80261        	l32r	a6, 400807c4 <_iram_text_start+0x274>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400827be:	3249      	s32i.n	a4, a2, 12
	z_setup_new_thread(thread, stack,
400827c0:	f7fcd1        	l32r	a13, 400807b0 <_iram_text_start+0x260>
400827c3:	f7ffb1        	l32r	a11, 400807c0 <_iram_text_start+0x270>
400827c6:	3139      	s32i.n	a3, a1, 12
400827c8:	0139      	s32i.n	a3, a1, 0
400827ca:	03fd      	mov.n	a15, a3
400827cc:	03ed      	mov.n	a14, a3
400827ce:	2159      	s32i.n	a5, a1, 8
400827d0:	1199      	s32i.n	a9, a1, 4
400827d2:	00a4c2        	movi	a12, 0x400
400827d5:	06ad      	mov.n	a10, a6
400827d7:	007965        	call8	40082f6c <z_setup_new_thread>
400827da:	cd0432        	l8ui	a3, a4, 205
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400827dd:	9269      	s32i.n	a6, a2, 36
400827df:	103370        	and	a3, a3, a7
400827e2:	cd4432        	s8i	a3, a4, 205
		_kernel.cpus[i].irq_stack =
400827e5:	f7f831        	l32r	a3, 400807c8 <_iram_text_start+0x278>
		_kernel.cpus[i].id = i;
400827e8:	2c4252        	s8i	a5, a2, 44
		_kernel.cpus[i].irq_stack =
400827eb:	7239      	s32i.n	a3, a2, 28
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
400827ed:	f7f731        	l32r	a3, 400807cc <_iram_text_start+0x27c>
400827f0:	c239      	s32i.n	a3, a2, 48
	list->tail = (sys_dnode_t *)list;
400827f2:	d239      	s32i.n	a3, a2, 52
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400827f4:	006350        	rsil	a5, 3
	old_thread = _current;
400827f7:	2248      	l32i.n	a4, a2, 8
	return _kernel.ready_q.cache;
400827f9:	e238      	l32i.n	a3, a2, 56
	if (new_thread != old_thread) {
400827fb:	121437        	beq	a4, a3, 40082811 <z_cstart+0xe5>
		z_reset_time_slice();
400827fe:	0001a5        	call8	40082818 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082801:	567c      	movi.n	a6, -11

void xtensa_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	return xtensa_switch(switch_to, switched_from);
40082803:	1423a2        	l32i	a10, a3, 80
40082806:	136462        	s32i	a6, a4, 76
		_current_cpu->current = new_thread;
40082809:	2239      	s32i.n	a3, a2, 8
4008280b:	50c4b2        	addi	a11, a4, 80
4008280e:	fef0e5        	call8	4008171c <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
40082811:	13e650        	wsr.ps	a5
40082814:	002010        	rsync
	...

40082818 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
40082818:	004136        	entry	a1, 32
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
4008281b:	f7ed21        	l32r	a2, 400807d0 <_iram_text_start+0x280>
4008281e:	002282        	l32i	a8, a2, 0
40082821:	013816        	beqz	a8, 40082838 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
40082824:	fede65        	call8	4008160c <z_clock_elapsed>
40082827:	002282        	l32i	a8, a2, 0
4008282a:	f75121        	l32r	a2, 40080570 <_iram_text_start+0x20>
4008282d:	a8aa      	add.n	a10, a8, a10
4008282f:	42a9      	s32i.n	a10, a2, 16
		z_set_timeout_expiry(slice_time, false);
40082831:	0b0c      	movi.n	a11, 0
40082833:	08ad      	mov.n	a10, a8
40082835:	00a3a5        	call8	40083270 <z_set_timeout_expiry>
	}
}
40082838:	f01d      	retw.n
	...

4008283c <z_swap_irqlock>:
{
4008283c:	004136        	entry	a1, 32
	old_thread = _current;
4008283f:	f74c31        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082842:	2358      	l32i.n	a5, a3, 8
40082844:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082846:	121547        	beq	a5, a4, 4008285c <z_swap_irqlock+0x20>
		z_reset_time_slice();
40082849:	fffce5        	call8	40082818 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
4008284c:	587c      	movi.n	a8, -11
4008284e:	1424a2        	l32i	a10, a4, 80
40082851:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082854:	2349      	s32i.n	a4, a3, 8
40082856:	50c5b2        	addi	a11, a5, 80
40082859:	feec25        	call8	4008171c <xtensa_switch>
4008285c:	13e620        	wsr.ps	a2
4008285f:	002010        	rsync
	return _current->swap_retval;
40082862:	2338      	l32i.n	a3, a3, 8
}
40082864:	132322        	l32i	a2, a3, 76
40082867:	f01d      	retw.n
40082869:	000000        	ill

4008286c <z_swap$isra$14>:
static inline int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
4008286c:	004136        	entry	a1, 32
	old_thread = _current;
4008286f:	f74031        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082872:	2358      	l32i.n	a5, a3, 8
40082874:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082876:	121547        	beq	a5, a4, 4008288c <z_swap$isra$14+0x20>
		z_reset_time_slice();
40082879:	fff9e5        	call8	40082818 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
4008287c:	587c      	movi.n	a8, -11
4008287e:	1424a2        	l32i	a10, a4, 80
40082881:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082884:	2349      	s32i.n	a4, a3, 8
40082886:	50c5b2        	addi	a11, a5, 80
40082889:	fee925        	call8	4008171c <xtensa_switch>
4008288c:	13e620        	wsr.ps	a2
4008288f:	002010        	rsync
	return _current->swap_retval;
40082892:	2338      	l32i.n	a3, a3, 8
}
40082894:	132322        	l32i	a2, a3, 76
40082897:	f01d      	retw.n
40082899:	000000        	ill

4008289c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
4008289c:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008289f:	006340        	rsil	a4, 3
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
400828a2:	f73381        	l32r	a8, 40080570 <_iram_text_start+0x20>
400828a5:	00a092        	movi	a9, 0
400828a8:	046892        	s32i	a9, a8, 16
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
400828ab:	1182e0        	slli	a8, a2, 2
400828ae:	808820        	add	a8, a8, a2
		slice_time = k_ms_to_ticks_ceil32(slice);
400828b1:	f7c721        	l32r	a2, 400807d0 <_iram_text_start+0x280>
400828b4:	1188f0        	slli	a8, a8, 1
400828b7:	0289      	s32i.n	a8, a2, 0
		slice_max_prio = prio;
400828b9:	f7c621        	l32r	a2, 400807d4 <_iram_text_start+0x284>
400828bc:	0239      	s32i.n	a3, a2, 0
		z_reset_time_slice();
400828be:	fff5a5        	call8	40082818 <z_reset_time_slice>
	XTOS_RESTORE_INTLEVEL(key);
400828c1:	13e640        	wsr.ps	a4
400828c4:	002010        	rsync
	}
}
400828c7:	f01d      	retw.n
400828c9:	000000        	ill

400828cc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
400828cc:	004136        	entry	a1, 32
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & 0xf) == 0; /* INTLEVEL field */
400828cf:	348030        	extui	a8, a3, 0, 4
400828d2:	20a330        	or	a10, a3, a3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
400828d5:	017856        	bnez	a8, 400828f0 <z_reschedule+0x24>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	_cpu_t *cpu;

	cpu = (_cpu_t *)RSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR);
400828d8:	03f480        	rsr.misc0	a8
400828db:	002882        	l32i	a8, a8, 0
400828de:	e8cc      	bnez.n	a8, 400828f0 <z_reschedule+0x24>
400828e0:	f72481        	l32r	a8, 40080570 <_iram_text_start+0x20>
	if (resched(key.key) && need_swap()) {
400828e3:	e898      	l32i.n	a9, a8, 56
400828e5:	2888      	l32i.n	a8, a8, 8
400828e7:	051987        	beq	a9, a8, 400828f0 <z_reschedule+0x24>
		z_swap(lock, key);
400828ea:	fff825        	call8	4008286c <z_swap$isra$14>
400828ed:	000146        	j	400828f6 <z_reschedule+0x2a>
	XTOS_RESTORE_INTLEVEL(key);
400828f0:	13e6a0        	wsr.ps	a10
400828f3:	002010        	rsync
	} else {
		k_spin_unlock(lock, key);
	}
}
400828f6:	f01d      	retw.n

400828f8 <z_reschedule_irqlock>:

void z_reschedule_irqlock(uint32_t key)
{
400828f8:	004136        	entry	a1, 32
	return (key & 0xf) == 0; /* INTLEVEL field */
400828fb:	348020        	extui	a8, a2, 0, 4
400828fe:	20a220        	or	a10, a2, a2
	return arch_irq_unlocked(key) && !arch_is_in_isr();
40082901:	00f856        	bnez	a8, 40082914 <z_reschedule_irqlock+0x1c>
40082904:	03f480        	rsr.misc0	a8
40082907:	002882        	l32i	a8, a8, 0
4008290a:	006856        	bnez	a8, 40082914 <z_reschedule_irqlock+0x1c>
	if (resched(key)) {
		z_swap_irqlock(key);
4008290d:	fff2e5        	call8	4008283c <z_swap_irqlock>
40082910:	000186        	j	4008291a <z_reschedule_irqlock+0x22>
40082913:	e6a000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
40082916:	201013        	lsi	f1, a0, 128
40082919:	f01d00        	subx8	a1, a13, a0

4008291c <z_reschedule_unlocked>:
{
4008291c:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008291f:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40082922:	fffd65        	call8	400828f8 <z_reschedule_irqlock>
}
40082925:	f01d      	retw.n
	...

40082928 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
40082928:	004136        	entry	a1, 32
4008292b:	0063a0        	rsil	a10, 3
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
4008292e:	f71081        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082931:	2898      	l32i.n	a9, a8, 8
40082933:	0f0982        	l8ui	a8, a9, 15
40082936:	880b      	addi.n	a8, a8, -1
40082938:	0f4982        	s8i	a8, a9, 15
	XTOS_RESTORE_INTLEVEL(key);
4008293b:	13e6a0        	wsr.ps	a10
4008293e:	002010        	rsync
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
40082941:	f01d      	retw.n
	...

40082944 <z_get_next_switch_handle>:
	_current_cpu->current = new_thread;
}

#ifdef CONFIG_USE_SWITCH
void *z_get_next_switch_handle(void *interrupted)
{
40082944:	004136        	entry	a1, 32
	_current->switch_handle = interrupted;
40082947:	f70a81        	l32r	a8, 40080570 <_iram_text_start+0x20>
4008294a:	28a8      	l32i.n	a10, a8, 8
	return _kernel.ready_q.cache;
4008294c:	e898      	l32i.n	a9, a8, 56
4008294e:	146a22        	s32i	a2, a10, 80
#endif
		}
	}
#else
	struct k_thread *thread = z_get_next_ready_thread();
	if (_current != thread) {
40082951:	011a97        	beq	a10, a9, 40082956 <z_get_next_switch_handle+0x12>
	_current_cpu->current = new_thread;
40082954:	2899      	s32i.n	a9, a8, 8
		set_current(thread);
	}
#endif

	wait_for_switch(_current);
	return _current->switch_handle;
40082956:	2888      	l32i.n	a8, a8, 8
}
40082958:	142822        	l32i	a2, a8, 80
4008295b:	f01d      	retw.n
4008295d:	000000        	ill

40082960 <update_cache>:
{
40082960:	004136        	entry	a1, 32
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082963:	f79da1        	l32r	a10, 400807d8 <_iram_text_start+0x288>
40082966:	00d5e5        	call8	400836c4 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082969:	f70131        	l32r	a3, 40080570 <_iram_text_start+0x20>
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
4008296c:	204aa0        	or	a4, a10, a10
	if (_current->base.thread_state & _THREAD_ABORTING) {
4008296f:	022382        	l32i	a8, a3, 8
40082972:	0d0892        	l8ui	a9, a8, 13
40082975:	086957        	bbci	a9, 5, 40082981 <update_cache+0x21>
		_current->base.thread_state |= _THREAD_DEAD;
40082978:	08a0a2        	movi	a10, 8
4008297b:	2099a0        	or	a9, a9, a10
4008297e:	0d4892        	s8i	a9, a8, 13
	return thread ? thread : _current_cpu->idle_thread;
40082981:	04cc      	bnez.n	a4, 40082985 <update_cache+0x25>
40082983:	3348      	l32i.n	a4, a3, 12
	if (preempt_ok != 0) {
40082985:	42dc      	bnez.n	a2, 4008299d <update_cache+0x3d>
	if (z_is_thread_prevented_from_running(_current)) {
40082987:	0d0892        	l8ui	a9, a8, 13
4008298a:	449090        	extui	a9, a9, 0, 5
4008298d:	c9cc      	bnez.n	a9, 4008299d <update_cache+0x3d>
	if (is_preempt(_current) || is_metairq(thread)) {
4008298f:	071892        	l16ui	a9, a8, 14
40082992:	7fa0a2        	movi	a10, 127
40082995:	04ba97        	bgeu	a10, a9, 4008299d <update_cache+0x3d>
		_kernel.ready_q.cache = _current;
40082998:	e389      	s32i.n	a8, a3, 56
4008299a:	000286        	j	400829a8 <update_cache+0x48>
		if (thread != _current) {
4008299d:	051847        	beq	a8, a4, 400829a6 <update_cache+0x46>
			z_reset_time_slice();
400829a0:	201110        	or	a1, a1, a1
400829a3:	ffe765        	call8	40082818 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
400829a6:	e349      	s32i.n	a4, a3, 56
}
400829a8:	f01d      	retw.n
	...

400829ac <k_sched_unlock>:
{
400829ac:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400829af:	006320        	rsil	a2, 3
		++_current->base.sched_locked;
400829b2:	f6ef81        	l32r	a8, 40080570 <_iram_text_start+0x20>
		update_cache(0);
400829b5:	00a0a2        	movi	a10, 0
		++_current->base.sched_locked;
400829b8:	022892        	l32i	a9, a8, 8
400829bb:	0f0982        	l8ui	a8, a9, 15
400829be:	01c882        	addi	a8, a8, 1
400829c1:	0f4982        	s8i	a8, a9, 15
		update_cache(0);
400829c4:	fff9a5        	call8	40082960 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
400829c7:	13e620        	wsr.ps	a2
400829ca:	002010        	rsync
	z_reschedule_unlocked();
400829cd:	fff4e5        	call8	4008291c <z_reschedule_unlocked>
}
400829d0:	f01d      	retw.n
	...

400829d4 <ready_thread>:
{
400829d4:	004136        	entry	a1, 32
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
400829d7:	0d0282        	l8ui	a8, a2, 13
400829da:	448080        	extui	a8, a8, 0, 5
400829dd:	06b856        	bnez	a8, 40082a4c <ready_thread+0x78>
	if (z_is_thread_ready(thread)) {
400829e0:	62b8      	l32i.n	a11, a2, 24
400829e2:	066b56        	bnez	a11, 40082a4c <ready_thread+0x78>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
400829e5:	f6e2a1        	l32r	a10, 40080570 <_iram_text_start+0x20>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
400829e8:	1f0c      	movi.n	a15, 1
400829ea:	fa88      	l32i.n	a8, a10, 60
400829ec:	0bcd      	mov.n	a12, a11
400829ee:	93cf80        	movnez	a12, a15, a8
400829f1:	74c0c0        	extui	a12, a12, 0, 8
400829f4:	102ad2        	l32i	a13, a10, 64
400829f7:	f778e1        	l32r	a14, 400807d8 <_iram_text_start+0x288>
400829fa:	fcac      	beqz.n	a12, 40082a2d <ready_thread+0x59>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
400829fc:	c098e0        	sub	a9, a8, a14
400829ff:	93bf90        	movnez	a11, a15, a9
40082a02:	7490b0        	extui	a9, a11, 0, 8
40082a05:	49ac      	beqz.n	a9, 40082a2d <ready_thread+0x59>
	if (thread_1->base.prio < thread_2->base.prio) {
40082a07:	0e0292        	l8ui	a9, a2, 14
40082a0a:	239900        	sext	a9, a9, 7
40082a0d:	0e08b2        	l8ui	a11, a8, 14
40082a10:	23bb00        	sext	a11, a11, 7
40082a13:	0da9b7        	bge	a9, a11, 40082a24 <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	node->prev = successor->prev;
40082a16:	1898      	l32i.n	a9, a8, 4
	node->next = successor;
40082a18:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082a1a:	1299      	s32i.n	a9, a2, 4
	successor->prev->next = node;
40082a1c:	0929      	s32i.n	a2, a9, 0
	successor->prev = node;
40082a1e:	1829      	s32i.n	a2, a8, 4
40082a20:	0005c6        	j	40082a3b <ready_thread+0x67>
40082a23:	1d8700        	lsi	f0, a7, 116
	return (node == list->tail) ? NULL : node->next;
40082a26:	288205        	call0	400ab248 <_iram_text_end+0x27666>
40082a29:	f85600        	lsi	f0, a6, 0x3e0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082a2c:	d2fd      	lsi	f15, a2, 8
	node->prev = list->tail;
40082a2e:	820162        	l8ui	a6, a1, 130
	list->tail->next = node;
40082a31:	102a      	add.n	a1, a0, a2
	node->next = list;
40082a33:	0062e2        	s32i	a14, a2, 0
	list->tail->next = node;
40082a36:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082a38:	106a22        	s32i	a2, a10, 64
	thread->base.thread_state |= states;
40082a3b:	0d0282        	l8ui	a8, a2, 13
40082a3e:	80af92        	movi	a9, -128
40082a41:	208890        	or	a8, a8, a9
40082a44:	0d4282        	s8i	a8, a2, 13
		update_cache(0);
40082a47:	0a0c      	movi.n	a10, 0
40082a49:	fff165        	call8	40082960 <update_cache>
}
40082a4c:	f01d      	retw.n
	...

40082a50 <z_ready_thread>:
{
40082a50:	004136        	entry	a1, 32
40082a53:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a55:	006330        	rsil	a3, 3
		ready_thread(thread);
40082a58:	fff7a5        	call8	400829d4 <ready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082a5b:	13e630        	wsr.ps	a3
40082a5e:	002010        	rsync
}
40082a61:	f01d      	retw.n
	...

40082a64 <z_thread_timeout>:
{
40082a64:	004136        	entry	a1, 32
	struct k_thread *thread = CONTAINER_OF(timeout,
40082a67:	e8c232        	addi	a3, a2, -24
	if (thread->base.pended_on != NULL) {
40082a6a:	022342        	l32i	a4, a3, 8
40082a6d:	f5c222        	addi	a2, a2, -11
40082a70:	01c416        	beqz	a4, 40082a90 <z_thread_timeout+0x2c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a73:	006340        	rsil	a4, 3
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
40082a76:	03ad      	mov.n	a10, a3
40082a78:	00c365        	call8	400836b0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082a7b:	000282        	l8ui	a8, a2, 0
40082a7e:	d97c      	movi.n	a9, -3
40082a80:	108890        	and	a8, a8, a9
40082a83:	004282        	s8i	a8, a2, 0
		thread->base.pended_on = NULL;
40082a86:	080c      	movi.n	a8, 0
40082a88:	2389      	s32i.n	a8, a3, 8
	XTOS_RESTORE_INTLEVEL(key);
40082a8a:	13e640        	wsr.ps	a4
40082a8d:	002010        	rsync
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
40082a90:	000282        	l8ui	a8, a2, 0
40082a93:	b96c      	movi.n	a9, -21
40082a95:	108890        	and	a8, a8, a9
40082a98:	004282        	s8i	a8, a2, 0
	z_ready_thread(thread);
40082a9b:	03ad      	mov.n	a10, a3
40082a9d:	fffb25        	call8	40082a50 <z_ready_thread>
}
40082aa0:	f01d      	retw.n
	...

40082aa4 <z_sched_start>:
{
40082aa4:	004136        	entry	a1, 32
40082aa7:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082aa9:	006320        	rsil	a2, 3
	if (z_has_thread_started(thread)) {
40082aac:	0d0a82        	l8ui	a8, a10, 13
40082aaf:	0be827        	bbsi	a8, 2, 40082abe <z_sched_start+0x1a>
	XTOS_RESTORE_INTLEVEL(key);
40082ab2:	13e620        	wsr.ps	a2
40082ab5:	002010        	rsync
		return;
40082ab8:	0005c6        	j	40082ad3 <z_sched_start+0x2f>
40082abb:	000000        	ill
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082abe:	fbaf92        	movi	a9, -5
40082ac1:	108890        	and	a8, a8, a9
40082ac4:	0d4a82        	s8i	a8, a10, 13
	ready_thread(thread);
40082ac7:	fff0e5        	call8	400829d4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
40082aca:	f744a1        	l32r	a10, 400807dc <_iram_text_start+0x28c>
40082acd:	20b220        	or	a11, a2, a2
40082ad0:	ffdfa5        	call8	400828cc <z_reschedule>
}
40082ad3:	000090        	retw
	...

40082ad8 <z_move_thread_to_end_of_prio_q>:
{
40082ad8:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082adb:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082ade:	0d0282        	l8ui	a8, a2, 13
40082ae1:	056877        	bbci	a8, 7, 40082aea <z_move_thread_to_end_of_prio_q+0x12>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082ae4:	20a220        	or	a10, a2, a2
40082ae7:	00bca5        	call8	400836b0 <sys_dlist_remove>
	return list->head == list;
40082aea:	f6a191        	l32r	a9, 40080570 <_iram_text_start+0x20>
40082aed:	f73ad1        	l32r	a13, 400807d8 <_iram_text_start+0x288>
40082af0:	0f2982        	l32i	a8, a9, 60
40082af3:	1029c2        	l32i	a12, a9, 64
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082af6:	027816        	beqz	a8, 40082b21 <z_move_thread_to_end_of_prio_q+0x49>
40082af9:	2418d7        	beq	a8, a13, 40082b21 <z_move_thread_to_end_of_prio_q+0x49>
	if (thread_1->base.prio < thread_2->base.prio) {
40082afc:	0e02a2        	l8ui	a10, a2, 14
40082aff:	23aa00        	sext	a10, a10, 7
40082b02:	0e08b2        	l8ui	a11, a8, 14
40082b05:	23bb00        	sext	a11, a11, 7
40082b08:	0caab7        	bge	a10, a11, 40082b18 <z_move_thread_to_end_of_prio_q+0x40>
	node->prev = successor->prev;
40082b0b:	18a8      	l32i.n	a10, a8, 4
	node->next = successor;
40082b0d:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082b0f:	12a9      	s32i.n	a10, a2, 4
	successor->prev->next = node;
40082b11:	0a29      	s32i.n	a2, a10, 0
	successor->prev = node;
40082b13:	1829      	s32i.n	a2, a8, 4
40082b15:	000586        	j	40082b2f <z_move_thread_to_end_of_prio_q+0x57>
	return (node == list->tail) ? NULL : node->next;
40082b18:	051c87        	beq	a12, a8, 40082b21 <z_move_thread_to_end_of_prio_q+0x49>
40082b1b:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082b1e:	fe0856        	bnez	a8, 40082b02 <z_move_thread_to_end_of_prio_q+0x2a>
	node->prev = list->tail;
40082b21:	0162c2        	s32i	a12, a2, 4
	list->tail->next = node;
40082b24:	102982        	l32i	a8, a9, 64
	node->next = list;
40082b27:	0062d2        	s32i	a13, a2, 0
	list->tail->next = node;
40082b2a:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082b2c:	106922        	s32i	a2, a9, 64
	thread->base.thread_state |= states;
40082b2f:	0d0282        	l8ui	a8, a2, 13
40082b32:	80afa2        	movi	a10, -128
40082b35:	2088a0        	or	a8, a8, a10
		update_cache(thread == _current);
40082b38:	29a8      	l32i.n	a10, a9, 8
40082b3a:	0d4282        	s8i	a8, a2, 13
40082b3d:	c0aa20        	sub	a10, a10, a2
40082b40:	180c      	movi.n	a8, 1
40082b42:	020c      	movi.n	a2, 0
40082b44:	8328a0        	moveqz	a2, a8, a10
40082b47:	02ad      	mov.n	a10, a2
40082b49:	ffe165        	call8	40082960 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082b4c:	13e630        	wsr.ps	a3
40082b4f:	002010        	rsync
}
40082b52:	f01d      	retw.n

40082b54 <z_time_slice>:
{
40082b54:	004136        	entry	a1, 32
	if (slice_time && sliceable(_current)) {
40082b57:	f71e81        	l32r	a8, 400807d0 <_iram_text_start+0x280>
40082b5a:	002892        	l32i	a9, a8, 0
40082b5d:	f68481        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082b60:	039916        	beqz	a9, 40082b9d <z_time_slice+0x49>
40082b63:	28a8      	l32i.n	a10, a8, 8
		&& !z_is_thread_timeout_active(thread);
40082b65:	7fa0b2        	movi	a11, 127
40082b68:	071a92        	l16ui	a9, a10, 14
40082b6b:	2e3b97        	bltu	a11, a9, 40082b9d <z_time_slice+0x49>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
40082b6e:	f71991        	l32r	a9, 400807d4 <_iram_text_start+0x284>
40082b71:	0e0ab2        	l8ui	a11, a10, 14
40082b74:	0998      	l32i.n	a9, a9, 0
40082b76:	23bb00        	sext	a11, a11, 7
40082b79:	202b97        	blt	a11, a9, 40082b9d <z_time_slice+0x49>
		&& !z_is_idle_thread_object(thread)
40082b7c:	f70f91        	l32r	a9, 400807b8 <_iram_text_start+0x268>
40082b7f:	1a1a97        	beq	a10, a9, 40082b9d <z_time_slice+0x49>
		&& !z_is_thread_timeout_active(thread);
40082b82:	6a98      	l32i.n	a9, a10, 24
40082b84:	015956        	bnez	a9, 40082b9d <z_time_slice+0x49>
		if (ticks >= _current_cpu->slice_ticks) {
40082b87:	4898      	l32i.n	a9, a8, 16
40082b89:	082297        	blt	a2, a9, 40082b95 <z_time_slice+0x41>
			z_move_thread_to_end_of_prio_q(_current);
40082b8c:	fff4a5        	call8	40082ad8 <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
40082b8f:	ffc8a5        	call8	40082818 <z_reset_time_slice>
40082b92:	0002c6        	j	40082ba1 <z_time_slice+0x4d>
			_current_cpu->slice_ticks -= ticks;
40082b95:	c09920        	sub	a9, a9, a2
40082b98:	4899      	s32i.n	a9, a8, 16
40082b9a:	0000c6        	j	40082ba1 <z_time_slice+0x4d>
		_current_cpu->slice_ticks = 0;
40082b9d:	020c      	movi.n	a2, 0
40082b9f:	4829      	s32i.n	a2, a8, 16
}
40082ba1:	f01d      	retw.n
	...

40082ba4 <z_impl_k_thread_suspend>:
{
40082ba4:	004136        	entry	a1, 32
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
40082ba7:	18c2a2        	addi	a10, a2, 24
40082baa:	006925        	call8	4008323c <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082bad:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082bb0:	0d0242        	l8ui	a4, a2, 13
40082bb3:	0d6477        	bbci	a4, 7, 40082bc4 <z_impl_k_thread_suspend+0x20>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082bb6:	02ad      	mov.n	a10, a2
40082bb8:	00af65        	call8	400836b0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082bbb:	0d0282        	l8ui	a8, a2, 13
40082bbe:	648080        	extui	a8, a8, 0, 7
40082bc1:	0d4282        	s8i	a8, a2, 13
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082bc4:	0d0282        	l8ui	a8, a2, 13
40082bc7:	041c      	movi.n	a4, 16
40082bc9:	208840        	or	a8, a8, a4
		update_cache(thread == _current);
40082bcc:	f66941        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082bcf:	0d4282        	s8i	a8, a2, 13
40082bd2:	24a8      	l32i.n	a10, a4, 8
40082bd4:	190c      	movi.n	a9, 1
40082bd6:	c0aa20        	sub	a10, a10, a2
40082bd9:	080c      	movi.n	a8, 0
40082bdb:	8389a0        	moveqz	a8, a9, a10
40082bde:	08ad      	mov.n	a10, a8
40082be0:	ffd7e5        	call8	40082960 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082be3:	13e630        	wsr.ps	a3
40082be6:	002010        	rsync
	if (thread == _current) {
40082be9:	2438      	l32i.n	a3, a4, 8
40082beb:	029327        	bne	a3, a2, 40082bf1 <z_impl_k_thread_suspend+0x4d>
		z_reschedule_unlocked();
40082bee:	ffd2e5        	call8	4008291c <z_reschedule_unlocked>
}
40082bf1:	f01d      	retw.n
	...

40082bf4 <z_thread_single_abort>:
{
40082bf4:	004136        	entry	a1, 32
	if (thread->fn_abort != NULL) {
40082bf7:	112232        	l32i	a3, a2, 68
40082bfa:	002316        	beqz	a3, 40082c00 <z_thread_single_abort+0xc>
		thread->fn_abort();
40082bfd:	0003e0        	callx8	a3
40082c00:	18c2a2        	addi	a10, a2, 24
40082c03:	0063a5        	call8	4008323c <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c06:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082c09:	0d0232        	l8ui	a3, a2, 13
40082c0c:	445030        	extui	a5, a3, 0, 5
40082c0f:	032556        	bnez	a5, 40082c45 <z_thread_single_abort+0x51>
		if (z_is_thread_ready(thread)) {
40082c12:	062252        	l32i	a5, a2, 24
40082c15:	c5ec      	bnez.n	a5, 40082c45 <z_thread_single_abort+0x51>
			if (z_is_thread_queued(thread)) {
40082c17:	233300        	sext	a3, a3, 7
40082c1a:	00e3d6        	bgez	a3, 40082c2c <z_thread_single_abort+0x38>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c1d:	20a220        	or	a10, a2, a2
40082c20:	00a8e5        	call8	400836b0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082c23:	0d0232        	l8ui	a3, a2, 13
40082c26:	643030        	extui	a3, a3, 0, 7
40082c29:	0d4232        	s8i	a3, a2, 13
			update_cache(thread == _current);
40082c2c:	f65131        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082c2f:	150c      	movi.n	a5, 1
40082c31:	23a8      	l32i.n	a10, a3, 8
40082c33:	030c      	movi.n	a3, 0
40082c35:	c0aa20        	sub	a10, a10, a2
40082c38:	8335a0        	moveqz	a3, a5, a10
40082c3b:	03ad      	mov.n	a10, a3
40082c3d:	ffd225        	call8	40082960 <update_cache>
40082c40:	000606        	j	40082c5c <z_thread_single_abort+0x68>
40082c43:	170000        	lsi	f0, a0, 92
			if (z_is_thread_pending(thread)) {
40082c46:	ad1363        	lsi	f6, a3, 0x2b4
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c49:	a66502        	s32i	a0, a5, 0x298
40082c4c:	023200        	andb	b3, b2, b0
	thread->base.thread_state &= ~_THREAD_PENDING;
40082c4f:	7c0d      	lsi	f0, a12, 48
40082c51:	3350d5        	call4	400b6160 <_iram_text_end+0x3257e>
40082c54:	423210        	xorb	b3, b2, b1
40082c57:	0c0d      	mov.n	a0, a12
				thread->base.pended_on = NULL;
40082c59:	223903        	lsi	f0, a9, 136
		thread->base.thread_state |= mask;
40082c5c:	0d0232        	l8ui	a3, a2, 13
40082c5f:	850c      	movi.n	a5, 8
40082c61:	203350        	or	a3, a3, a5
40082c64:	0d4232        	s8i	a3, a2, 13
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082c67:	000886        	j	40082c8d <z_thread_single_abort+0x99>
40082c6a:	a20000        	muluh	a0, a0, a0
40082c6d:	e518c3        	lsi	f12, a8, 0x394
40082c70:	005c      	movi.n	a0, 80
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c72:	20a330        	or	a10, a3, a3
40082c75:	00a3a5        	call8	400836b0 <sys_dlist_remove>
40082c78:	0d0382        	l8ui	a8, a3, 13
40082c7b:	d97c      	movi.n	a9, -3
40082c7d:	108890        	and	a8, a8, a9
40082c80:	0d4382        	s8i	a8, a3, 13
			waiter->base.pended_on = NULL;
40082c83:	2359      	s32i.n	a5, a3, 8
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
40082c85:	136352        	s32i	a5, a3, 76
			ready_thread(waiter);
40082c88:	03ad      	mov.n	a10, a3
40082c8a:	ffd4a5        	call8	400829d4 <ready_thread>
	return list->head == list;
40082c8d:	0c2232        	l32i	a3, a2, 48
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082c90:	00a052        	movi	a5, 0
40082c93:	051357        	beq	a3, a5, 40082c9c <z_thread_single_abort+0xa8>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
40082c96:	30c282        	addi	a8, a2, 48
40082c99:	cf9387        	bne	a3, a8, 40082c6c <z_thread_single_abort+0x78>
	XTOS_RESTORE_INTLEVEL(key);
40082c9c:	13e640        	wsr.ps	a4
40082c9f:	002010        	rsync
}
40082ca2:	f01d      	retw.n

40082ca4 <unready_thread>:
{
40082ca4:	004136        	entry	a1, 32
	if (z_is_thread_queued(thread)) {
40082ca7:	0d0282        	l8ui	a8, a2, 13
40082caa:	0e6877        	bbci	a8, 7, 40082cbc <unready_thread+0x18>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082cad:	20a220        	or	a10, a2, a2
40082cb0:	009fe5        	call8	400836b0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082cb3:	0d0282        	l8ui	a8, a2, 13
40082cb6:	648080        	extui	a8, a8, 0, 7
40082cb9:	0d4282        	s8i	a8, a2, 13
	update_cache(thread == _current);
40082cbc:	f62d81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082cbf:	0228a2        	l32i	a10, a8, 8
40082cc2:	180c      	movi.n	a8, 1
40082cc4:	c0aa20        	sub	a10, a10, a2
40082cc7:	020c      	movi.n	a2, 0
40082cc9:	8328a0        	moveqz	a2, a8, a10
40082ccc:	02ad      	mov.n	a10, a2
40082cce:	ffc925        	call8	40082960 <update_cache>
}
40082cd1:	f01d      	retw.n
	...

40082cd4 <z_remove_thread_from_ready_q>:
{
40082cd4:	004136        	entry	a1, 32
40082cd7:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082cd9:	006330        	rsil	a3, 3
		unready_thread(thread);
40082cdc:	fffc65        	call8	40082ca4 <unready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082cdf:	13e630        	wsr.ps	a3
40082ce2:	002010        	rsync
}
40082ce5:	f01d      	retw.n
	...

40082ce8 <z_tick_sleep$part$23>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
40082ce8:	004136        	entry	a1, 32
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
40082ceb:	006a25        	call8	4008338c <z_tick_get_32>
40082cee:	8032a0        	add	a3, a2, a10
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082cf1:	006350        	rsil	a5, 3
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	z_remove_thread_from_ready_q(_current);
40082cf4:	f61f41        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082cf7:	0224a2        	l32i	a10, a4, 8
40082cfa:	fffda5        	call8	40082cd4 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
40082cfd:	0224a2        	l32i	a10, a4, 8
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082d00:	f6b8b1        	l32r	a11, 400807e0 <_iram_text_start+0x290>
40082d03:	02cd      	mov.n	a12, a2
40082d05:	31df20        	srai	a13, a2, 31
40082d08:	18caa2        	addi	a10, a10, 24
40082d0b:	003ee5        	call8	400830f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
40082d0e:	2428      	l32i.n	a2, a4, 8
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082d10:	041c      	movi.n	a4, 16
40082d12:	0d0282        	l8ui	a8, a2, 13

	(void)z_swap(&local_lock, key);
40082d15:	05ad      	mov.n	a10, a5
40082d17:	208840        	or	a8, a8, a4
40082d1a:	0d4282        	s8i	a8, a2, 13
40082d1d:	ffb4e5        	call8	4008286c <z_swap$isra$14>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
40082d20:	0066a5        	call8	4008338c <z_tick_get_32>
40082d23:	c0a3a0        	sub	a10, a3, a10
		return ticks;
	}
#endif

	return 0;
}
40082d26:	020c      	movi.n	a2, 0
40082d28:	532a20        	max	a2, a10, a2
40082d2b:	f01d      	retw.n
40082d2d:	000000        	ill

40082d30 <add_to_waitq_locked>:
{
40082d30:	004136        	entry	a1, 32
	unready_thread(thread);
40082d33:	02ad      	mov.n	a10, a2
40082d35:	fff6e5        	call8	40082ca4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
40082d38:	0d0282        	l8ui	a8, a2, 13
40082d3b:	290c      	movi.n	a9, 2
40082d3d:	208890        	or	a8, a8, a9
40082d40:	0d4282        	s8i	a8, a2, 13
	if (wait_q != NULL) {
40082d43:	93bc      	beqz.n	a3, 40082d80 <add_to_waitq_locked+0x50>
40082d45:	0388      	l32i.n	a8, a3, 0
		thread->base.pended_on = wait_q;
40082d47:	2239      	s32i.n	a3, a2, 8
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d49:	78ac      	beqz.n	a8, 40082d74 <add_to_waitq_locked+0x44>
40082d4b:	251387        	beq	a3, a8, 40082d74 <add_to_waitq_locked+0x44>
	if (thread_1->base.prio < thread_2->base.prio) {
40082d4e:	0e0292        	l8ui	a9, a2, 14
40082d51:	239900        	sext	a9, a9, 7
40082d54:	0e08a2        	l8ui	a10, a8, 14
40082d57:	23aa00        	sext	a10, a10, 7
40082d5a:	0ca9a7        	bge	a9, a10, 40082d6a <add_to_waitq_locked+0x3a>
	node->prev = successor->prev;
40082d5d:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40082d5f:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082d61:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40082d63:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40082d65:	1829      	s32i.n	a2, a8, 4
40082d67:	000546        	j	40082d80 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
40082d6a:	13a8      	l32i.n	a10, a3, 4
40082d6c:	0418a7        	beq	a8, a10, 40082d74 <add_to_waitq_locked+0x44>
40082d6f:	0888      	l32i.n	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d71:	fdf856        	bnez	a8, 40082d54 <add_to_waitq_locked+0x24>
	node->prev = list->tail;
40082d74:	1388      	l32i.n	a8, a3, 4
	node->next = list;
40082d76:	0239      	s32i.n	a3, a2, 0
	node->prev = list->tail;
40082d78:	1289      	s32i.n	a8, a2, 4
	list->tail->next = node;
40082d7a:	1388      	l32i.n	a8, a3, 4
40082d7c:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082d7e:	1329      	s32i.n	a2, a3, 4
}
40082d80:	f01d      	retw.n
	...

40082d84 <pend>:
{
40082d84:	004136        	entry	a1, 32
40082d87:	20b330        	or	a11, a3, a3
40082d8a:	006360        	rsil	a6, 3
		add_to_waitq_locked(thread, wait_q);
40082d8d:	20a220        	or	a10, a2, a2
40082d90:	fff9e5        	call8	40082d30 <add_to_waitq_locked>
	XTOS_RESTORE_INTLEVEL(key);
40082d93:	13e660        	wsr.ps	a6
40082d96:	002010        	rsync
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082d99:	020466        	bnei	a4, -1, 40082d9f <pend+0x1b>
40082d9c:	0c0526        	beqi	a5, -1, 40082dac <pend+0x28>
40082d9f:	f690b1        	l32r	a11, 400807e0 <_iram_text_start+0x290>
40082da2:	04cd      	mov.n	a12, a4
40082da4:	05dd      	mov.n	a13, a5
40082da6:	18c2a2        	addi	a10, a2, 24
40082da9:	0034e5        	call8	400830f8 <z_add_timeout>
}
40082dac:	f01d      	retw.n
	...

40082db0 <z_pend_curr>:
{
40082db0:	004136        	entry	a1, 32
	pend(_current, wait_q, timeout);
40082db3:	f5ef81        	l32r	a8, 40080570 <_iram_text_start+0x20>
{
40082db6:	20d770        	or	a13, a7, a7
	pend(_current, wait_q, timeout);
40082db9:	0228a2        	l32i	a10, a8, 8
40082dbc:	06cd      	mov.n	a12, a6
40082dbe:	04bd      	mov.n	a11, a4
40082dc0:	fffc25        	call8	40082d84 <pend>
	return z_swap(lock, key);
40082dc3:	03ad      	mov.n	a10, a3
40082dc5:	ffaa65        	call8	4008286c <z_swap$isra$14>
}
40082dc8:	0a2d      	mov.n	a2, a10
40082dca:	f01d      	retw.n

40082dcc <z_unpend_first_thread>:
{
40082dcc:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082dcf:	006330        	rsil	a3, 3
		ret = _priq_wait_best(&wait_q->waitq);
40082dd2:	20a220        	or	a10, a2, a2
40082dd5:	008ee5        	call8	400836c4 <z_priq_dumb_best>
40082dd8:	0a2d      	mov.n	a2, a10
	XTOS_RESTORE_INTLEVEL(key);
40082dda:	13e630        	wsr.ps	a3
40082ddd:	002010        	rsync

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
40082de0:	0aac      	beqz.n	a10, 40082e04 <z_unpend_first_thread+0x38>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082de2:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082de5:	008ca5        	call8	400836b0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082de8:	0d0282        	l8ui	a8, a2, 13
40082deb:	d97c      	movi.n	a9, -3
40082ded:	108890        	and	a8, a8, a9
40082df0:	0d4282        	s8i	a8, a2, 13
		thread->base.pended_on = NULL;
40082df3:	080c      	movi.n	a8, 0
40082df5:	026282        	s32i	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082df8:	13e630        	wsr.ps	a3
40082dfb:	002010        	rsync
	return z_abort_timeout(&thread->base.timeout);
40082dfe:	18c2a2        	addi	a10, a2, 24
40082e01:	0043a5        	call8	4008323c <z_abort_timeout>
}
40082e04:	f01d      	retw.n
	...

40082e08 <z_sched_init>:
{
40082e08:	004136        	entry	a1, 32
	list->head = (sys_dnode_t *)list;
40082e0b:	f5d981        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082e0e:	f67291        	l32r	a9, 400807d8 <_iram_text_start+0x288>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
40082e11:	00a0b2        	movi	a11, 0
40082e14:	0f6892        	s32i	a9, a8, 60
	list->tail = (sys_dnode_t *)list;
40082e17:	106892        	s32i	a9, a8, 64
40082e1a:	20abb0        	or	a10, a11, a11
40082e1d:	ffa7e5        	call8	4008289c <k_sched_time_slice_set>
}
40082e20:	f01d      	retw.n
	...

40082e24 <z_impl_k_yield>:
{
40082e24:	004136        	entry	a1, 32
	if (!z_is_idle_thread_object(_current)) {
40082e27:	f5d221        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082e2a:	f66331        	l32r	a3, 400807b8 <_iram_text_start+0x268>
40082e2d:	2288      	l32i.n	a8, a2, 8
40082e2f:	671837        	beq	a8, a3, 40082e9a <z_impl_k_yield+0x76>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082e32:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082e35:	22a8      	l32i.n	a10, a2, 8
40082e37:	0087a5        	call8	400836b0 <sys_dlist_remove>
	return list->head == list;
40082e3a:	f298      	l32i.n	a9, a2, 60
			_priq_run_add(&_kernel.ready_q.runq, _current);
40082e3c:	022282        	l32i	a8, a2, 8
40082e3f:	f666c1        	l32r	a12, 400807d8 <_iram_text_start+0x288>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e42:	c9ac      	beqz.n	a9, 40082e72 <z_impl_k_yield+0x4e>
40082e44:	2a19c7        	beq	a9, a12, 40082e72 <z_impl_k_yield+0x4e>
	if (thread_1->base.prio < thread_2->base.prio) {
40082e47:	0e08a2        	l8ui	a10, a8, 14
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40082e4a:	1022d2        	l32i	a13, a2, 64
40082e4d:	23aa00        	sext	a10, a10, 7
40082e50:	0e09b2        	l8ui	a11, a9, 14
40082e53:	23bb00        	sext	a11, a11, 7
40082e56:	0faab7        	bge	a10, a11, 40082e69 <z_impl_k_yield+0x45>
	node->prev = successor->prev;
40082e59:	1928      	l32i.n	a2, a9, 4
	node->next = successor;
40082e5b:	0899      	s32i.n	a9, a8, 0
	node->prev = successor->prev;
40082e5d:	1829      	s32i.n	a2, a8, 4
	successor->prev->next = node;
40082e5f:	0289      	s32i.n	a8, a2, 0
	successor->prev = node;
40082e61:	1989      	s32i.n	a8, a9, 4
40082e63:	0006c6        	j	40082e82 <z_impl_k_yield+0x5e>
40082e66:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40082e69:	0519d7        	beq	a9, a13, 40082e72 <z_impl_k_yield+0x4e>
40082e6c:	002992        	l32i	a9, a9, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e6f:	fdd956        	bnez	a9, 40082e50 <z_impl_k_yield+0x2c>
	node->prev = list->tail;
40082e72:	102292        	l32i	a9, a2, 64
	node->next = list;
40082e75:	0068c2        	s32i	a12, a8, 0
	node->prev = list->tail;
40082e78:	1899      	s32i.n	a9, a8, 4
	list->tail->next = node;
40082e7a:	102292        	l32i	a9, a2, 64
40082e7d:	0989      	s32i.n	a8, a9, 0
	list->tail = node;
40082e7f:	106282        	s32i	a8, a2, 64
	thread->base.thread_state |= states;
40082e82:	0d0822        	l8ui	a2, a8, 13
40082e85:	80af92        	movi	a9, -128
40082e88:	202290        	or	a2, a2, a9
40082e8b:	0d4822        	s8i	a2, a8, 13
			update_cache(1);
40082e8e:	01a0a2        	movi	a10, 1
40082e91:	fface5        	call8	40082960 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082e94:	13e630        	wsr.ps	a3
40082e97:	002010        	rsync
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082e9a:	0063a0        	rsil	a10, 3
	(void) z_swap(&lock, key);
40082e9d:	ff9ce5        	call8	4008286c <z_swap$isra$14>
}
40082ea0:	f01d      	retw.n
	...

40082ea4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
40082ea4:	004136        	entry	a1, 32
40082ea7:	20a220        	or	a10, a2, a2
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082eaa:	140266        	bnei	a2, -1, 40082ec2 <z_impl_k_sleep+0x1e>
40082ead:	110366        	bnei	a3, -1, 40082ec2 <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
40082eb0:	f5b081        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082eb3:	0228a2        	l32i	a10, a8, 8
	z_impl_k_thread_suspend(thread);
40082eb6:	ffcee5        	call8	40082ba4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
40082eb9:	20a330        	or	a10, a3, a3
40082ebc:	000846        	j	40082ee1 <z_impl_k_sleep+0x3d>
40082ebf:	000000        	ill
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
40082ec2:	0a3d      	mov.n	a3, a10
	if (ticks == 0) {
40082ec4:	4acc      	bnez.n	a10, 40082ecc <z_impl_k_sleep+0x28>
	z_impl_k_yield();
40082ec6:	fff5e5        	call8	40082e24 <z_impl_k_yield>
40082ec9:	000146        	j	40082ed2 <z_impl_k_sleep+0x2e>
40082ecc:	ffe1a5        	call8	40082ce8 <z_tick_sleep$part$23>
40082ecf:	203aa0        	or	a3, a10, a10
			return t / (from_hz / to_hz);
40082ed2:	f644c1        	l32r	a12, 400807e4 <_iram_text_start+0x294>
40082ed5:	f5c0d1        	l32r	a13, 400805d8 <_iram_text_start+0x88>
40082ed8:	20a330        	or	a10, a3, a3
40082edb:	31bf30        	srai	a11, a3, 31
40082ede:	008225        	call8	40083700 <__udivdi3>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
40082ee1:	0a2d      	mov.n	a2, a10
40082ee3:	f01d      	retw.n
40082ee5:	000000        	ill

40082ee8 <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
40082ee8:	004136        	entry	a1, 32

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
40082eeb:	f5a181        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082eee:	2828      	l32i.n	a2, a8, 8
40082ef0:	f01d      	retw.n
	...

40082ef4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
40082ef4:	004136        	entry	a1, 32
40082ef7:	006330        	rsil	a3, 3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
40082efa:	20a220        	or	a10, a2, a2
40082efd:	ffece5        	call8	40082dcc <z_unpend_first_thread>

	if (thread != NULL) {
40082f00:	00da16        	beqz	a10, 40082f11 <z_impl_k_sem_give+0x1d>
40082f03:	00a022        	movi	a2, 0
40082f06:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
40082f09:	ffb465        	call8	40082a50 <z_ready_thread>
40082f0c:	000506        	j	40082f24 <z_impl_k_sem_give+0x30>
40082f0f:	920000        	lsi	f0, a0, 0x248
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
40082f12:	820222        	l8ui	a2, a2, 130
40082f15:	b20322        	l8ui	a2, a3, 178
40082f18:	9001a0        	addx2	a0, a1, a10
40082f1b:	c088      	l32i.n	a8, a0, 48
40082f1d:	93ab80        	movnez	a10, a11, a8
40082f20:	8a9a      	add.n	a8, a10, a9
40082f22:	2289      	s32i.n	a8, a2, 8
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
40082f24:	f631a1        	l32r	a10, 400807e8 <_iram_text_start+0x298>
40082f27:	03bd      	mov.n	a11, a3
40082f29:	ff9a25        	call8	400828cc <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
40082f2c:	f01d      	retw.n
	...

40082f30 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
40082f30:	004136        	entry	a1, 32
40082f33:	02cd      	mov.n	a12, a2
40082f35:	04ed      	mov.n	a14, a4
40082f37:	05fd      	mov.n	a15, a5
40082f39:	0063b0        	rsil	a11, 3
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
40082f3c:	2288      	l32i.n	a8, a2, 8
40082f3e:	e88c      	beqz.n	a8, 40082f50 <z_impl_k_sem_take+0x20>
		sem->count--;
40082f40:	880b      	addi.n	a8, a8, -1
40082f42:	2289      	s32i.n	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082f44:	13e6b0        	wsr.ps	a11
40082f47:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = 0;
40082f4a:	0a0c      	movi.n	a10, 0
		goto out;
40082f4c:	000586        	j	40082f66 <z_impl_k_sem_take+0x36>
40082f4f:	845000        	extui	a5, a0, 0, 9
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
40082f52:	98cc20        	lsi	f2, a12, 0x260
40082f55:	13e6b0        	wsr.ps	a11
40082f58:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
40082f5b:	0a7c      	movi.n	a10, -16
		goto out;
40082f5d:	000146        	j	40082f66 <z_impl_k_sem_take+0x36>
	}

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
40082f60:	f622a1        	l32r	a10, 400807e8 <_iram_text_start+0x298>
40082f63:	ffe4e5        	call8	40082db0 <z_pend_curr>

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
40082f66:	0a2d      	mov.n	a2, a10
40082f68:	f01d      	retw.n
	...

40082f6c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
40082f6c:	006136        	entry	a1, 48
40082f6f:	07fd      	mov.n	a15, a7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
40082f71:	e178      	l32i.n	a7, a1, 56
	sys_dlist_init(&w->waitq);
40082f73:	30c282        	addi	a8, a2, 48
40082f76:	0c4272        	s8i	a7, a2, 12
	thread_base->thread_state = (uint8_t)initial_state;
40082f79:	470c      	movi.n	a7, 4
40082f7b:	0d4272        	s8i	a7, a2, 13

	thread_base->prio = priority;
40082f7e:	d178      	l32i.n	a7, a1, 52
	list->head = (sys_dnode_t *)list;
40082f80:	c289      	s32i.n	a8, a2, 48
	list->tail = (sys_dnode_t *)list;
40082f82:	d289      	s32i.n	a8, a2, 52
40082f84:	0e4272        	s8i	a7, a2, 14
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f87:	087c      	movi.n	a8, -16

	thread_base->sched_locked = 0U;
40082f89:	070c      	movi.n	a7, 0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f8b:	44fb      	addi.n	a4, a4, 15
	thread_base->sched_locked = 0U;
40082f8d:	0f4272        	s8i	a7, a2, 15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f90:	104480        	and	a4, a4, a8
	node->next = NULL;
40082f93:	070c      	movi.n	a7, 0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f95:	c188      	l32i.n	a8, a1, 48
40082f97:	6279      	s32i.n	a7, a2, 24
	node->prev = NULL;
40082f99:	7279      	s32i.n	a7, a2, 28
	stack_ptr = (char *)stack + stack_obj_size;
40082f9b:	434a      	add.n	a4, a3, a4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f9d:	02ad      	mov.n	a10, a2
{
40082f9f:	03bd      	mov.n	a11, a3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082fa1:	0189      	s32i.n	a8, a1, 0
40082fa3:	06ed      	mov.n	a14, a6
40082fa5:	05dd      	mov.n	a13, a5
40082fa7:	04cd      	mov.n	a12, a4
40082fa9:	fe8e25        	call8	4008188c <arch_new_thread>
	new_thread->init_data = NULL;
40082fac:	106272        	s32i	a7, a2, 64
	new_thread->fn_abort = NULL;
40082faf:	116272        	s32i	a7, a2, 68
	new_thread->resource_pool = _current->resource_pool;
40082fb2:	f56f71        	l32r	a7, 40080570 <_iram_text_start+0x20>
40082fb5:	2778      	l32i.n	a7, a7, 8
40082fb7:	152772        	l32i	a7, a7, 84
40082fba:	156272        	s32i	a7, a2, 84
}
40082fbd:	042d      	mov.n	a2, a4
40082fbf:	f01d      	retw.n
40082fc1:	000000        	ill

40082fc4 <z_init_static_threads>:
{
40082fc4:	006136        	entry	a1, 48
	_FOREACH_STATIC_THREAD(thread_data) {
40082fc7:	f60921        	l32r	a2, 400807ec <_iram_text_start+0x29c>
40082fca:	f60831        	l32r	a3, 400807ec <_iram_text_start+0x29c>
40082fcd:	024d      	mov.n	a4, a2
40082fcf:	000a46        	j	40082ffc <z_init_static_threads+0x38>
		z_setup_new_thread(
40082fd2:	0b2282        	l32i	a8, a2, 44
40082fd5:	036182        	s32i	a8, a1, 12
40082fd8:	8288      	l32i.n	a8, a2, 32
40082fda:	2189      	s32i.n	a8, a1, 8
40082fdc:	7288      	l32i.n	a8, a2, 28
40082fde:	1189      	s32i.n	a8, a1, 4
40082fe0:	6288      	l32i.n	a8, a2, 24
40082fe2:	0189      	s32i.n	a8, a1, 0
40082fe4:	52f8      	l32i.n	a15, a2, 20
40082fe6:	42e8      	l32i.n	a14, a2, 16
40082fe8:	32d8      	l32i.n	a13, a2, 12
40082fea:	22c8      	l32i.n	a12, a2, 8
40082fec:	12b8      	l32i.n	a11, a2, 4
40082fee:	0022a2        	l32i	a10, a2, 0
40082ff1:	fff7a5        	call8	40082f6c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
40082ff4:	0288      	l32i.n	a8, a2, 0
40082ff6:	106822        	s32i	a2, a8, 64
	_FOREACH_STATIC_THREAD(thread_data) {
40082ff9:	30c222        	addi	a2, a2, 48
40082ffc:	d23237        	bltu	a2, a3, 40082fd2 <z_init_static_threads+0xe>
	_FOREACH_STATIC_THREAD(thread_data) {
40082fff:	042d      	mov.n	a2, a4
	k_sched_lock();
40083001:	ff9265        	call8	40082928 <k_sched_lock>
					    K_MSEC(thread_data->init_delay));
40083004:	040c      	movi.n	a4, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40083006:	000a86        	j	40083034 <z_init_static_threads+0x70>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
40083009:	92d8      	l32i.n	a13, a2, 36
4008300b:	220d26        	beqi	a13, -1, 40083031 <z_init_static_threads+0x6d>
		} else {
			return t * (to_hz / from_hz);
4008300e:	a80c      	movi.n	a8, 10
					    K_MSEC(thread_data->init_delay));
40083010:	53dd40        	max	a13, a13, a4
40083013:	82cd80        	mull	a12, a13, a8
40083016:	b2dd80        	mulsh	a13, a13, a8
			schedule_new_thread(thread_data->init_thread,
40083019:	02a8      	l32i.n	a10, a2, 0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
4008301b:	208cd0        	or	a8, a12, a13
4008301e:	006856        	bnez	a8, 40083028 <z_init_static_threads+0x64>
	z_sched_start(thread);
40083021:	ffa825        	call8	40082aa4 <z_sched_start>
40083024:	000246        	j	40083031 <z_init_static_threads+0x6d>
40083027:	eeb100        	f64iter	a11, a1, a0, 2, 1
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
4008302a:	caa2f5        	call12	4004da58 <esp32_rom_gpio_matrix_out+0x43b4c>
4008302d:	a518      	l32i.n	a1, a5, 40
4008302f:	000c      	movi.n	a0, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40083031:	30c222        	addi	a2, a2, 48
40083034:	d13237        	bltu	a2, a3, 40083009 <z_init_static_threads+0x45>
	k_sched_unlock();
40083037:	ff9765        	call8	400829ac <k_sched_unlock>
}
4008303a:	f01d      	retw.n

4008303c <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
4008303c:	004136        	entry	a1, 32
	z_thread_single_abort(thread);
4008303f:	02ad      	mov.n	a10, a2
40083041:	ffbb25        	call8	40082bf4 <z_thread_single_abort>
40083044:	03f430        	rsr.misc0	a3

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
40083047:	0338      	l32i.n	a3, a3, 0
40083049:	23fc      	bnez.n	a3, 4008307f <z_impl_k_thread_abort+0x43>
		if (thread == _current) {
4008304b:	f54931        	l32r	a3, 40080570 <_iram_text_start+0x20>
4008304e:	2348      	l32i.n	a4, a3, 8
40083050:	259427        	bne	a4, a2, 40083079 <z_impl_k_thread_abort+0x3d>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083053:	006350        	rsil	a5, 3
	old_thread = _current;
40083056:	2348      	l32i.n	a4, a3, 8
	return _kernel.ready_q.cache;
40083058:	e328      	l32i.n	a2, a3, 56
	if (new_thread != old_thread) {
4008305a:	121427        	beq	a4, a2, 40083070 <z_impl_k_thread_abort+0x34>
		z_reset_time_slice();
4008305d:	ff7ba5        	call8	40082818 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40083060:	587c      	movi.n	a8, -11
40083062:	1422a2        	l32i	a10, a2, 80
40083065:	136482        	s32i	a8, a4, 76
		_current_cpu->current = new_thread;
40083068:	2329      	s32i.n	a2, a3, 8
4008306a:	50c4b2        	addi	a11, a4, 80
4008306d:	fe6ae5        	call8	4008171c <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
40083070:	13e650        	wsr.ps	a5
40083073:	002010        	rsync
	return _current->swap_retval;
40083076:	000146        	j	4008307f <z_impl_k_thread_abort+0x43>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083079:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
4008307c:	ff87a5        	call8	400828f8 <z_reschedule_irqlock>
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
4008307f:	f01d      	retw.n
40083081:	000000        	ill

40083084 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
40083084:	004136        	entry	a1, 32
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
40083087:	f5da81        	l32r	a8, 400807f0 <_iram_text_start+0x2a0>
4008308a:	0a0c      	movi.n	a10, 0
4008308c:	0888      	l32i.n	a8, a8, 0
4008308e:	0298a7        	bne	a8, a10, 40083094 <elapsed+0x10>
40083091:	fe57a5        	call8	4008160c <z_clock_elapsed>
}
40083094:	0a2d      	mov.n	a2, a10
40083096:	f01d      	retw.n

40083098 <remove_timeout>:
{
40083098:	004136        	entry	a1, 32
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
4008309b:	0288      	l32i.n	a8, a2, 0
4008309d:	12ac      	beqz.n	a2, 400830c2 <remove_timeout+0x2a>
4008309f:	f5d591        	l32r	a9, 400807f4 <_iram_text_start+0x2a4>
	return (node == list->tail) ? NULL : node->next;
400830a2:	1998      	l32i.n	a9, a9, 4
400830a4:	1a1297        	beq	a2, a9, 400830c2 <remove_timeout+0x2a>
	if (next(t) != NULL) {
400830a7:	789c      	beqz.n	a8, 400830c2 <remove_timeout+0x2a>
		next(t)->dticks += t->dticks;
400830a9:	48c8      	l32i.n	a12, a8, 16
400830ab:	42a8      	l32i.n	a10, a2, 16
400830ad:	58b8      	l32i.n	a11, a8, 20
400830af:	acaa      	add.n	a10, a12, a10
400830b1:	52d8      	l32i.n	a13, a2, 20
400830b3:	190c      	movi.n	a9, 1
400830b5:	013ac7        	bltu	a10, a12, 400830ba <remove_timeout+0x22>
400830b8:	090c      	movi.n	a9, 0
400830ba:	bbda      	add.n	a11, a11, a13
400830bc:	99ba      	add.n	a9, a9, a11
400830be:	48a9      	s32i.n	a10, a8, 16
400830c0:	5899      	s32i.n	a9, a8, 20
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
400830c2:	1298      	l32i.n	a9, a2, 4
400830c4:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
400830c6:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
400830c8:	080c      	movi.n	a8, 0
400830ca:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
400830cc:	1289      	s32i.n	a8, a2, 4
}
400830ce:	f01d      	retw.n

400830d0 <next_timeout>:

static int32_t next_timeout(void)
{
400830d0:	004136        	entry	a1, 32
	return list->head == list;
400830d3:	f5c881        	l32r	a8, 400807f4 <_iram_text_start+0x2a4>
400830d6:	0828      	l32i.n	a2, a8, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
400830d8:	019287        	bne	a2, a8, 400830dd <next_timeout+0xd>
400830db:	020c      	movi.n	a2, 0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
400830dd:	fffa65        	call8	40083084 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
400830e0:	f5c681        	l32r	a8, 400807f8 <_iram_text_start+0x2a8>
400830e3:	328c      	beqz.n	a2, 400830ea <next_timeout+0x1a>
400830e5:	4288      	l32i.n	a8, a2, 16
400830e7:	c088a0        	sub	a8, a8, a10

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
400830ea:	f52121        	l32r	a2, 40080570 <_iram_text_start+0x20>
400830ed:	4228      	l32i.n	a2, a2, 16
400830ef:	128c      	beqz.n	a2, 400830f4 <next_timeout+0x24>
400830f1:	012287        	blt	a2, a8, 400830f6 <next_timeout+0x26>
400830f4:	082d      	mov.n	a2, a8
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
400830f6:	f01d      	retw.n

400830f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
400830f8:	006136        	entry	a1, 48
400830fb:	046d      	mov.n	a6, a4
400830fd:	207550        	or	a7, a5, a5
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40083100:	050466        	bnei	a4, -1, 40083109 <z_add_timeout+0x11>
40083103:	020566        	bnei	a5, -1, 40083109 <z_add_timeout+0x11>
40083106:	004b86        	j	40083238 <z_add_timeout+0x140>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
40083109:	441b      	addi.n	a4, a4, 1
4008310b:	180c      	movi.n	a8, 1
4008310d:	013467        	bltu	a4, a6, 40083112 <z_add_timeout+0x1a>
40083110:	080c      	movi.n	a8, 0
40083112:	885a      	add.n	a8, a8, a5

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
40083114:	e57c      	movi.n	a5, -2
40083116:	c0a540        	sub	a10, a5, a4
	k_ticks_t ticks = timeout.ticks + 1;
40083119:	047d      	mov.n	a7, a4
4008311b:	086d      	mov.n	a6, a8
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
4008311d:	190c      	movi.n	a9, 1
4008311f:	0235a7        	bltu	a5, a10, 40083125 <z_add_timeout+0x2d>
40083122:	00a092        	movi	a9, 0
40083125:	f57c      	movi.n	a5, -1
40083127:	c05580        	sub	a5, a5, a8
4008312a:	c05590        	sub	a5, a5, a9
4008312d:	045596        	bltz	a5, 40083176 <z_add_timeout+0x7e>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
40083130:	0189      	s32i.n	a8, a1, 0
40083132:	fff525        	call8	40083084 <elapsed>
40083135:	f5b151        	l32r	a5, 400807fc <_iram_text_start+0x2ac>
40083138:	e97c      	movi.n	a9, -2
4008313a:	0568      	l32i.n	a6, a5, 0
4008313c:	15b8      	l32i.n	a11, a5, 4
4008313e:	c06960        	sub	a6, a9, a6
40083141:	170c      	movi.n	a7, 1
40083143:	0188      	l32i.n	a8, a1, 0
40083145:	013967        	bltu	a9, a6, 4008314a <z_add_timeout+0x52>
40083148:	070c      	movi.n	a7, 0
4008314a:	f57c      	movi.n	a5, -1
4008314c:	c055b0        	sub	a5, a5, a11
4008314f:	c04640        	sub	a4, a6, a4
40083152:	c05570        	sub	a5, a5, a7
40083155:	170c      	movi.n	a7, 1
40083157:	023647        	bltu	a6, a4, 4008315d <z_add_timeout+0x65>
4008315a:	00a072        	movi	a7, 0
4008315d:	c05580        	sub	a5, a5, a8
40083160:	c05570        	sub	a5, a5, a7
40083163:	c074a0        	sub	a7, a4, a10
40083166:	318fa0        	srai	a8, a10, 31
40083169:	160c      	movi.n	a6, 1
4008316b:	013477        	bltu	a4, a7, 40083170 <z_add_timeout+0x78>
4008316e:	060c      	movi.n	a6, 0
40083170:	c05580        	sub	a5, a5, a8
40083173:	c06560        	sub	a6, a5, a6
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
40083176:	026232        	s32i	a3, a2, 8
40083179:	006330        	rsil	a3, 3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
4008317c:	fff065        	call8	40083084 <elapsed>
	ticks = MAX(1, ticks);
4008317f:	205770        	or	a5, a7, a7
40083182:	204660        	or	a4, a6, a6
40083185:	0716e6        	bgei	a6, 1, 40083190 <z_add_timeout+0x98>
40083188:	06cc      	bnez.n	a6, 4008318c <z_add_timeout+0x94>
4008318a:	27cc      	bnez.n	a7, 40083190 <z_add_timeout+0x98>
4008318c:	150c      	movi.n	a5, 1
4008318e:	040c      	movi.n	a4, 0
		to->dticks = ticks + elapsed();
40083190:	317fa0        	srai	a7, a10, 31
40083193:	a5aa      	add.n	a10, a5, a10
40083195:	160c      	movi.n	a6, 1
40083197:	013a57        	bltu	a10, a5, 4008319c <z_add_timeout+0xa4>
4008319a:	060c      	movi.n	a6, 0
4008319c:	447a      	add.n	a4, a4, a7
4008319e:	464a      	add.n	a4, a6, a4
400831a0:	5249      	s32i.n	a4, a2, 20
	return list->head == list;
400831a2:	f59441        	l32r	a4, 400807f4 <_iram_text_start+0x2a4>
400831a5:	42a9      	s32i.n	a10, a2, 16
400831a7:	0458      	l32i.n	a5, a4, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
400831a9:	029547        	bne	a5, a4, 400831af <z_add_timeout+0xb7>
400831ac:	001e46        	j	40083229 <z_add_timeout+0x131>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400831af:	14a8      	l32i.n	a10, a4, 4
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
400831b1:	1b0c      	movi.n	a11, 1
400831b3:	0c0c      	movi.n	a12, 0
400831b5:	001386        	j	40083207 <z_add_timeout+0x10f>
			if (t->dticks > to->dticks) {
400831b8:	5588      	l32i.n	a8, a5, 20
400831ba:	5268      	l32i.n	a6, a2, 20
400831bc:	4578      	l32i.n	a7, a5, 16
400831be:	4298      	l32i.n	a9, a2, 16
400831c0:	053687        	bltu	a6, a8, 400831c9 <z_add_timeout+0xd1>
400831c3:	259867        	bne	a8, a6, 400831ec <z_add_timeout+0xf4>
400831c6:	22b977        	bgeu	a9, a7, 400831ec <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
400831c9:	c09790        	sub	a9, a7, a9
400831cc:	1a0c      	movi.n	a10, 1
400831ce:	023797        	bltu	a7, a9, 400831d4 <z_add_timeout+0xdc>
400831d1:	00a0a2        	movi	a10, 0
400831d4:	c06860        	sub	a6, a8, a6
400831d7:	c066a0        	sub	a6, a6, a10
400831da:	5569      	s32i.n	a6, a5, 20
	node->prev = successor->prev;
400831dc:	1568      	l32i.n	a6, a5, 4
400831de:	4599      	s32i.n	a9, a5, 16
400831e0:	1269      	s32i.n	a6, a2, 4
	node->next = successor;
400831e2:	0259      	s32i.n	a5, a2, 0
	successor->prev->next = node;
400831e4:	0629      	s32i.n	a2, a6, 0
	successor->prev = node;
400831e6:	1529      	s32i.n	a2, a5, 4
		}

		if (t == NULL) {
400831e8:	000886        	j	4008320e <z_add_timeout+0x116>
400831eb:	797000        	lsi	f0, a0, 0x1e4
			to->dticks -= t->dticks;
400831ee:	dbb0c0        	movt.s	f11, f0, b12
400831f1:	397720        	lsi	f2, a7, 228
400831f4:	dcc002        	addi	a0, a0, -36
400831f7:	668020        	lsi	f2, a0, 0x198
400831fa:	66d0c0        	lsi	f12, a0, 0x198
400831fd:	4279c0        	xorb	b7, b9, b12
40083200:	5269      	s32i.n	a6, a2, 20
	return (node == list->tail) ? NULL : node->next;
40083202:	2315a7        	beq	a5, a10, 40083229 <z_add_timeout+0x131>
40083205:	0558      	l32i.n	a5, a5, 0
		for (t = first(); t != NULL; t = next(t)) {
40083207:	fad556        	bnez	a5, 400831b8 <z_add_timeout+0xc0>
4008320a:	0006c6        	j	40083229 <z_add_timeout+0x131>
4008320d:	245200        	extui	a5, a0, 2, 3
	return list->head == list;
40083210:	925700        	lsi	f0, a7, 0x248
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
40083213:	470b      	addi.n	a4, a7, -1
40083215:	a50815        	call4	40028298 <esp32_rom_gpio_matrix_out+0x1e38c>
			z_clock_set_timeout(next_timeout(), false);
40083218:	ffeb      	addi.n	a15, a15, 14
4008321a:	00a0b2        	movi	a11, 0
4008321d:	fe38e5        	call8	400815ac <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083220:	13e630        	wsr.ps	a3
40083223:	002010        	rsync
	LOCKED(&timeout_lock) {
40083226:	000386        	j	40083238 <z_add_timeout+0x140>
	node->prev = list->tail;
40083229:	1458      	l32i.n	a5, a4, 4
	node->next = list;
4008322b:	0249      	s32i.n	a4, a2, 0
	node->prev = list->tail;
4008322d:	1259      	s32i.n	a5, a2, 4
	list->tail->next = node;
4008322f:	1458      	l32i.n	a5, a4, 4
40083231:	0529      	s32i.n	a2, a5, 0
	list->tail = node;
40083233:	1429      	s32i.n	a2, a4, 4
40083235:	fff546        	j	4008320e <z_add_timeout+0x116>
		}
	}
}
40083238:	f01d      	retw.n
	...

4008323c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
4008323c:	004136        	entry	a1, 32
4008323f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083241:	006320        	rsil	a2, 3
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
40083244:	0a98      	l32i.n	a9, a10, 0
	int ret = -EINVAL;
40083246:	a86c      	movi.n	a8, -22
		if (sys_dnode_is_linked(&to->node)) {
40083248:	004916        	beqz	a9, 40083250 <z_abort_timeout+0x14>
			remove_timeout(to);
4008324b:	ffe4e5        	call8	40083098 <remove_timeout>
			ret = 0;
4008324e:	080c      	movi.n	a8, 0
	XTOS_RESTORE_INTLEVEL(key);
40083250:	13e620        	wsr.ps	a2
40083253:	002010        	rsync
		}
	}

	return ret;
}
40083256:	082d      	mov.n	a2, a8
40083258:	f01d      	retw.n
	...

4008325c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
4008325c:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008325f:	006320        	rsil	a2, 3
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
40083262:	ffe6e5        	call8	400830d0 <next_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083265:	13e620        	wsr.ps	a2
40083268:	002010        	rsync
	}
	return ret;
}
4008326b:	0a2d      	mov.n	a2, a10
4008326d:	f01d      	retw.n
	...

40083270 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
40083270:	004136        	entry	a1, 32
40083273:	743030        	extui	a3, a3, 0, 8
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083276:	006340        	rsil	a4, 3
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
40083279:	ffe565        	call8	400830d0 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
4008327c:	00a0c2        	movi	a12, 0
4008327f:	01ca92        	addi	a9, a10, 1
40083282:	01a082        	movi	a8, 1
40083285:	0c5d      	mov.n	a5, a12
40083287:	835890        	moveqz	a5, a8, a9
4008328a:	059d      	mov.n	a9, a5
			      || (ticks < next_to);
4008328c:	0122a7        	blt	a2, a10, 40083291 <z_set_timeout_expiry+0x21>
4008328f:	0c8d      	mov.n	a8, a12
40083291:	208980        	or	a8, a9, a8
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
40083294:	0b6807        	bbci	a8, 0, 400832a3 <z_set_timeout_expiry+0x33>
40083297:	082aa6        	blti	a10, 2, 400832a3 <z_set_timeout_expiry+0x33>
			z_clock_set_timeout(ticks, is_idle);
4008329a:	20b330        	or	a11, a3, a3
4008329d:	20a220        	or	a10, a2, a2
400832a0:	fe30a5        	call8	400815ac <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832a3:	13e640        	wsr.ps	a4
400832a6:	002010        	rsync
		}
	}
}
400832a9:	000090        	retw

400832ac <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
400832ac:	004136        	entry	a1, 32
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
400832af:	02ad      	mov.n	a10, a2
400832b1:	ff8a25        	call8	40082b54 <z_time_slice>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400832b4:	006330        	rsil	a3, 3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
400832b7:	f54e61        	l32r	a6, 400807f0 <_iram_text_start+0x2a0>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
400832ba:	f4c741        	l32r	a4, 400805d8 <_iram_text_start+0x88>
	announce_remaining = ticks;
400832bd:	0629      	s32i.n	a2, a6, 0
		t->dticks = 0;
400832bf:	f4c651        	l32r	a5, 400805d8 <_iram_text_start+0x88>
	while (first() != NULL && first()->dticks <= announce_remaining) {
400832c2:	000c86        	j	400832f8 <z_clock_announce+0x4c>
		curr_tick += dt;
400832c5:	989a      	add.n	a9, a8, a9
400832c7:	31bf80        	srai	a11, a8, 31
400832ca:	1a0c      	movi.n	a10, 1
400832cc:	013987        	bltu	a9, a8, 400832d1 <z_clock_announce+0x25>
400832cf:	0a0c      	movi.n	a10, 0
400832d1:	ebea      	add.n	a14, a11, a14
400832d3:	aaea      	add.n	a10, a10, a14
400832d5:	1da9      	s32i.n	a10, a13, 4
		announce_remaining -= dt;
400832d7:	c08c80        	sub	a8, a12, a8
		t->dticks = 0;
400832da:	4249      	s32i.n	a4, a2, 16
400832dc:	5259      	s32i.n	a5, a2, 20
		remove_timeout(t);
400832de:	02ad      	mov.n	a10, a2
		curr_tick += dt;
400832e0:	0d99      	s32i.n	a9, a13, 0
		announce_remaining -= dt;
400832e2:	006682        	s32i	a8, a6, 0
		remove_timeout(t);
400832e5:	ffdb25        	call8	40083098 <remove_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832e8:	13e630        	wsr.ps	a3
400832eb:	002010        	rsync

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
400832ee:	2238      	l32i.n	a3, a2, 8
400832f0:	02ad      	mov.n	a10, a2
400832f2:	0003e0        	callx8	a3
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400832f5:	006330        	rsil	a3, 3
	return list->head == list;
400832f8:	f53f81        	l32r	a8, 400807f4 <_iram_text_start+0x2a4>
400832fb:	f540d1        	l32r	a13, 400807fc <_iram_text_start+0x2ac>
400832fe:	06c8      	l32i.n	a12, a6, 0
40083300:	0828      	l32i.n	a2, a8, 0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
40083302:	31bfc0        	srai	a11, a12, 31
40083305:	0d98      	l32i.n	a9, a13, 0
40083307:	1de8      	l32i.n	a14, a13, 4
	while (first() != NULL && first()->dticks <= announce_remaining) {
40083309:	129c      	beqz.n	a2, 4008331e <z_clock_announce+0x72>
4008330b:	0f1287        	beq	a2, a8, 4008331e <z_clock_announce+0x72>
4008330e:	52a8      	l32i.n	a10, a2, 20
40083310:	4288      	l32i.n	a8, a2, 16
40083312:	323ba7        	bltu	a11, a10, 40083348 <z_clock_announce+0x9c>
40083315:	ac9ab7        	bne	a10, a11, 400832c5 <z_clock_announce+0x19>
40083318:	a9bc87        	bgeu	a12, a8, 400832c5 <z_clock_announce+0x19>
4008331b:	000a46        	j	40083348 <z_clock_announce+0x9c>

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
4008331e:	9c9a      	add.n	a9, a12, a9
40083320:	01a022        	movi	a2, 1
40083323:	0139c7        	bltu	a9, a12, 40083328 <z_clock_announce+0x7c>
40083326:	020c      	movi.n	a2, 0
40083328:	80bbe0        	add	a11, a11, a14
4008332b:	8022b0        	add	a2, a2, a11
4008332e:	1d29      	s32i.n	a2, a13, 4
	announce_remaining = 0;
40083330:	020c      	movi.n	a2, 0
	curr_tick += announce_remaining;
40083332:	0d99      	s32i.n	a9, a13, 0
	announce_remaining = 0;
40083334:	0629      	s32i.n	a2, a6, 0

	z_clock_set_timeout(next_timeout(), false);
40083336:	ffd9a5        	call8	400830d0 <next_timeout>
40083339:	02bd      	mov.n	a11, a2
4008333b:	fe2725        	call8	400815ac <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
4008333e:	13e630        	wsr.ps	a3
40083341:	002010        	rsync

	k_spin_unlock(&timeout_lock, key);
}
40083344:	f01d      	retw.n
40083346:	c00000        	sub	a0, a0, a0
		first()->dticks -= announce_remaining;
40083349:	c048      	l32i.n	a4, a0, 48
4008334b:	01a052        	movi	a5, 1
4008334e:	023847        	bltu	a8, a4, 40083354 <z_clock_announce+0xa8>
40083351:	00a052        	movi	a5, 0
40083354:	c0aab0        	sub	a10, a10, a11
40083357:	c0aa50        	sub	a10, a10, a5
4008335a:	4249      	s32i.n	a4, a2, 16
4008335c:	52a9      	s32i.n	a10, a2, 20
4008335e:	ffef06        	j	4008331e <z_clock_announce+0x72>
40083361:	000000        	ill

40083364 <z_tick_get>:

int64_t z_tick_get(void)
{
40083364:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083367:	006340        	rsil	a4, 3
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
4008336a:	fe2a25        	call8	4008160c <z_clock_elapsed>
4008336d:	f52331        	l32r	a3, 400807fc <_iram_text_start+0x2ac>
40083370:	002322        	l32i	a2, a3, 0
40083373:	012382        	l32i	a8, a3, 4
40083376:	802a20        	add	a2, a10, a2
40083379:	130c      	movi.n	a3, 1
4008337b:	0132a7        	bltu	a2, a10, 40083380 <z_tick_get+0x1c>
4008337e:	030c      	movi.n	a3, 0
40083380:	338a      	add.n	a3, a3, a8
	XTOS_RESTORE_INTLEVEL(key);
40083382:	13e640        	wsr.ps	a4
40083385:	002010        	rsync
	}
	return t;
}
40083388:	f01d      	retw.n
	...

4008338c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
4008338c:	004136        	entry	a1, 32
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
4008338f:	fffd65        	call8	40083364 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
40083392:	0a2d      	mov.n	a2, a10
40083394:	f01d      	retw.n
	...

40083398 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
40083398:	004136        	entry	a1, 32
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
4008339b:	120c      	movi.n	a2, 1
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008339d:	006380        	rsil	a8, 3
	int32_t ticks = z_get_next_timeout_expiry();
400833a0:	ffeba5        	call8	4008325c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400833a3:	013ae6        	bgei	a10, 3, 400833a8 <idle+0x10>
400833a6:	02ad      	mov.n	a10, a2
400833a8:	02bd      	mov.n	a11, a2
400833aa:	ffec65        	call8	40083270 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
400833ad:	0008a5        	call8	40083438 <arch_cpu_idle>
400833b0:	fffa46        	j	4008339d <idle+0x5>
	...

400833b4 <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
400833b4:	004136        	entry	a1, 32
400833b7:	0cc282        	addi	a8, a2, 12
400833ba:	20a220        	or	a10, a2, a2
	list->head = (sys_dnode_t *)list;
400833bd:	036282        	s32i	a8, a2, 12
	list->tail = (sys_dnode_t *)list;
400833c0:	4289      	s32i.n	a8, a2, 16
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
400833c2:	04cd      	mov.n	a12, a4
400833c4:	03bd      	mov.n	a11, a3
400833c6:	fdca25        	call8	40081068 <sys_heap_init>
}
400833c9:	f01d      	retw.n
	...

400833cc <statics_init>:

static int statics_init(const struct device *unused)
{
400833cc:	004136        	entry	a1, 32
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
400833cf:	f50c21        	l32r	a2, 40080800 <_iram_text_start+0x2b0>
400833d2:	000386        	j	400833e4 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
400833d5:	0222c2        	l32i	a12, a2, 8
400833d8:	0122b2        	l32i	a11, a2, 4
400833db:	20a220        	or	a10, a2, a2
400833de:	fffd65        	call8	400833b4 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
400833e1:	14c222        	addi	a2, a2, 20
400833e4:	f50731        	l32r	a3, 40080800 <_iram_text_start+0x2b0>
400833e7:	ea3237        	bltu	a2, a3, 400833d5 <statics_init+0x9>
	}
	return 0;
}
400833ea:	020c      	movi.n	a2, 0
400833ec:	f01d      	retw.n
	...

400833f0 <i2c_read>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
400833f0:	006136        	entry	a1, 48
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
400833f3:	380c      	movi.n	a8, 3
{
400833f5:	02ad      	mov.n	a10, a2
400833f7:	05dd      	mov.n	a13, a5
	msg.buf = buf;
400833f9:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
400833fb:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
400833fd:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083400:	2288      	l32i.n	a8, a2, 8
40083402:	1c0c      	movi.n	a12, 1
40083404:	1888      	l32i.n	a8, a8, 4
40083406:	20b110        	or	a11, a1, a1
40083409:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
4008340c:	0a2d      	mov.n	a2, a10
4008340e:	f01d      	retw.n

40083410 <i2c_write>:
{
40083410:	006136        	entry	a1, 48
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
40083413:	280c      	movi.n	a8, 2
{
40083415:	02ad      	mov.n	a10, a2
40083417:	05dd      	mov.n	a13, a5
	msg.buf = (uint8_t *)buf;
40083419:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
4008341b:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
4008341d:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083420:	2288      	l32i.n	a8, a2, 8
40083422:	1c0c      	movi.n	a12, 1
40083424:	1888      	l32i.n	a8, a8, 4
40083426:	20b110        	or	a11, a1, a1
40083429:	0008e0        	callx8	a8
}
4008342c:	0a2d      	mov.n	a2, a10
4008342e:	f01d      	retw.n

40083430 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
40083430:	004136        	entry	a1, 32
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_SRAM_SIZE, 16);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
40083433:	f01d      	retw.n
40083435:	000000        	ill

40083438 <arch_cpu_idle>:
 */

#include <tracing/tracing.h>

void arch_cpu_idle(void)
{
40083438:	004136        	entry	a1, 32
	sys_trace_idle();
	__asm__ volatile ("waiti 0");
4008343b:	007000        	waiti	0
}
4008343e:	f01d      	retw.n

40083440 <z_xtensa_dump_stack>:
{
40083440:	004136        	entry	a1, 32
}
40083443:	f01d      	retw.n
40083445:	000000        	ill

40083448 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
40083448:	004136        	entry	a1, 32
	while ((*s1 == *s2) && (*s1 != '\0')) {
4008344b:	0000c6        	j	40083452 <strcmp+0xa>
		s1++;
4008344e:	221b      	addi.n	a2, a2, 1
		s2++;
40083450:	331b      	addi.n	a3, a3, 1
	while ((*s1 == *s2) && (*s1 != '\0')) {
40083452:	000282        	l8ui	a8, a2, 0
40083455:	000392        	l8ui	a9, a3, 0
40083458:	029897        	bne	a8, a9, 4008345e <strcmp+0x16>
4008345b:	fef856        	bnez	a8, 4008344e <strcmp+0x6>
	}

	return *s1 - *s2;
}
4008345e:	c02890        	sub	a2, a8, a9
40083461:	f01d      	retw.n
	...

40083464 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
40083464:	004136        	entry	a1, 32
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
40083467:	74b030        	extui	a11, a3, 0, 8

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
4008346a:	028d      	mov.n	a8, a2
4008346c:	000286        	j	4008347a <memset+0x16>
4008346f:	441600        	extui	a1, a0, 6, 5
		if (n == 0) {
40083472:	48b204        	lsi	f0, a2, 0x120
			return buf;
		}
		*(d_byte++) = c_byte;
40083475:	440b00        	extui	a0, a0, 11, 5
		n--;
40083478:	881b      	addi.n	a8, a8, 1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
4008347a:	149080        	extui	a9, a8, 0, 2
4008347d:	08cd      	mov.n	a12, a8
4008347f:	fed956        	bnez	a9, 40083470 <memset+0xc>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
40083482:	743030        	extui	a3, a3, 0, 8

	c_word |= c_word << 8;
40083485:	11a380        	slli	a10, a3, 8
40083488:	203a30        	or	a3, a10, a3
	c_word |= c_word << 16;
4008348b:	11a300        	slli	a10, a3, 16
4008348e:	203a30        	or	a3, a10, a3
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
40083491:	41a240        	srli	a10, a4, 2
40083494:	11dae0        	slli	a13, a10, 2
40083497:	ed8a      	add.n	a14, a13, a8
40083499:	0000c6        	j	400834a0 <memset+0x3c>
		*(d_word++) = c_word;
4008349c:	0839      	s32i.n	a3, a8, 0
		n -= sizeof(mem_word_t);
4008349e:	884b      	addi.n	a8, a8, 4
	while (n >= sizeof(mem_word_t)) {
400834a0:	f898e7        	bne	a8, a14, 4008349c <memset+0x38>
400834a3:	11aae0        	slli	a10, a10, 2
400834a6:	c044a0        	sub	a4, a4, a10
400834a9:	000206        	j	400834b5 <memset+0x51>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
400834ac:	39da      	add.n	a3, a9, a13
400834ae:	3c3a      	add.n	a3, a12, a3
400834b0:	0043b2        	s8i	a11, a3, 0
		n--;
400834b3:	991b      	addi.n	a9, a9, 1
	while (n > 0) {
400834b5:	f39497        	bne	a4, a9, 400834ac <memset+0x48>
	}

	return buf;
}
400834b8:	f01d      	retw.n
	...

400834bc <_stdout_hook_default>:
{
400834bc:	004136        	entry	a1, 32
}
400834bf:	f27c      	movi.n	a2, -1
400834c1:	f01d      	retw.n
	...

400834c4 <gpio_esp32_port_get_raw>:
{
400834c4:	004136        	entry	a1, 32
	*value = *data->port.input_reg;
400834c7:	3288      	l32i.n	a8, a2, 12
}
400834c9:	020c      	movi.n	a2, 0
	*value = *data->port.input_reg;
400834cb:	4888      	l32i.n	a8, a8, 16
400834cd:	0020c0        	memw
400834d0:	0888      	l32i.n	a8, a8, 0
400834d2:	0389      	s32i.n	a8, a3, 0
}
400834d4:	f01d      	retw.n
	...

400834d8 <gpio_esp32_port_set_masked_raw>:
{
400834d8:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
400834db:	3288      	l32i.n	a8, a2, 12
400834dd:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg & ~mask)
400834e0:	5888      	l32i.n	a8, a8, 20
400834e2:	0020c0        	memw
400834e5:	0898      	l32i.n	a9, a8, 0
				 | (mask & value);
400834e7:	304940        	xor	a4, a9, a4
400834ea:	104430        	and	a4, a4, a3
400834ed:	304490        	xor	a4, a4, a9
	*data->port.output_reg = (*data->port.output_reg & ~mask)
400834f0:	0020c0        	memw
400834f3:	0849      	s32i.n	a4, a8, 0
	XTOS_RESTORE_INTLEVEL(key);
400834f5:	13e6a0        	wsr.ps	a10
400834f8:	002010        	rsync
}
400834fb:	020c      	movi.n	a2, 0
400834fd:	f01d      	retw.n
	...

40083500 <gpio_esp32_port_set_bits_raw>:
{
40083500:	004136        	entry	a1, 32
	*data->port.set_reg = pins;
40083503:	3288      	l32i.n	a8, a2, 12
}
40083505:	020c      	movi.n	a2, 0
	*data->port.set_reg = pins;
40083507:	2888      	l32i.n	a8, a8, 8
40083509:	0020c0        	memw
4008350c:	0839      	s32i.n	a3, a8, 0
}
4008350e:	f01d      	retw.n

40083510 <gpio_esp32_port_clear_bits_raw>:
{
40083510:	004136        	entry	a1, 32
	*data->port.clear_reg = pins;
40083513:	3288      	l32i.n	a8, a2, 12
}
40083515:	020c      	movi.n	a2, 0
	*data->port.clear_reg = pins;
40083517:	3888      	l32i.n	a8, a8, 12
40083519:	0020c0        	memw
4008351c:	0839      	s32i.n	a3, a8, 0
}
4008351e:	f01d      	retw.n

40083520 <gpio_esp32_port_toggle_bits>:
{
40083520:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
40083523:	3288      	l32i.n	a8, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083525:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg ^ pins);
40083528:	5898      	l32i.n	a9, a8, 20
4008352a:	0020c0        	memw
4008352d:	0988      	l32i.n	a8, a9, 0
4008352f:	308830        	xor	a8, a8, a3
40083532:	0020c0        	memw
40083535:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40083537:	13e6a0        	wsr.ps	a10
4008353a:	002010        	rsync
}
4008353d:	020c      	movi.n	a2, 0
4008353f:	f01d      	retw.n
40083541:	000000        	ill

40083544 <gpio_esp32_manage_callback>:
{
40083544:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = dev->data;
40083547:	3288      	l32i.n	a8, a2, 12
{
40083549:	744040        	extui	a4, a4, 0, 8
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
4008354c:	9828      	l32i.n	a2, a8, 36
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
4008354e:	090c      	movi.n	a9, 0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
40083550:	42cc      	bnez.n	a2, 40083558 <gpio_esp32_manage_callback+0x14>
40083552:	000fc6        	j	40083595 <gpio_esp32_manage_callback+0x51>
40083555:	0a2d00        	add.s	f2, f13, f0
40083558:	209327        	bne	a3, a2, 4008357c <gpio_esp32_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
4008355b:	0328      	l32i.n	a2, a3, 0
4008355d:	b9cc      	bnez.n	a9, 4008356c <gpio_esp32_manage_callback+0x28>
4008355f:	a898      	l32i.n	a9, a8, 40
	list->head = node;
40083561:	9829      	s32i.n	a2, a8, 36
Z_GENLIST_REMOVE(slist, snode)
40083563:	0e9397        	bne	a3, a9, 40083575 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
40083566:	a829      	s32i.n	a2, a8, 40
40083568:	000246        	j	40083575 <gpio_esp32_manage_callback+0x31>
4008356b:	092900        	l32e	a0, a9, -56
Z_GENLIST_REMOVE(slist, snode)
4008356e:	a828      	l32i.n	a2, a8, 40
40083570:	019327        	bne	a3, a2, 40083575 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
40083573:	a899      	s32i.n	a9, a8, 40
	parent->next = child;
40083575:	020c      	movi.n	a2, 0
40083577:	0329      	s32i.n	a2, a3, 0
40083579:	000606        	j	40083595 <gpio_esp32_manage_callback+0x51>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
4008357c:	02a8      	l32i.n	a10, a2, 0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
4008357e:	029d      	mov.n	a9, a2
40083580:	fd2a56        	bnez	a10, 40083556 <gpio_esp32_manage_callback+0x12>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
			if (!set) {
				return -EINVAL;
40083583:	a26c      	movi.n	a2, -22
			if (!set) {
40083585:	017416        	beqz	a4, 400835a0 <gpio_esp32_manage_callback+0x5c>
Z_GENLIST_PREPEND(slist, snode)
40083588:	9828      	l32i.n	a2, a8, 36
	parent->next = child;
4008358a:	0329      	s32i.n	a2, a3, 0
Z_GENLIST_PREPEND(slist, snode)
4008358c:	a828      	l32i.n	a2, a8, 40
	list->head = node;
4008358e:	9839      	s32i.n	a3, a8, 36
Z_GENLIST_PREPEND(slist, snode)
40083590:	42cc      	bnez.n	a2, 40083598 <gpio_esp32_manage_callback+0x54>
40083592:	000206        	j	4008359e <gpio_esp32_manage_callback+0x5a>
			}
		}
	}

	if (set) {
40083595:	fef456        	bnez	a4, 40083588 <gpio_esp32_manage_callback+0x44>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
40083598:	020c      	movi.n	a2, 0
4008359a:	000086        	j	400835a0 <gpio_esp32_manage_callback+0x5c>
4008359d:	a83900        	lsi	f0, a9, 0x2a0
}
400835a0:	f01d      	retw.n
	...

400835a4 <gpio_esp32_fire_callbacks>:
{
400835a4:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
400835a7:	3238      	l32i.n	a3, a2, 12
	uint32_t irq_status = *data->port.irq_status_reg;
400835a9:	6348      	l32i.n	a4, a3, 24
	*data->port.irq_ack_reg = irq_status;
400835ab:	7388      	l32i.n	a8, a3, 28
	uint32_t irq_status = *data->port.irq_status_reg;
400835ad:	0020c0        	memw
400835b0:	0448      	l32i.n	a4, a4, 0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
400835b2:	93b8      	l32i.n	a11, a3, 36
	*data->port.irq_ack_reg = irq_status;
400835b4:	0020c0        	memw
400835b7:	0849      	s32i.n	a4, a8, 0
400835b9:	8b9c      	beqz.n	a11, 400835d5 <gpio_esp32_fire_callbacks+0x31>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
400835bb:	0b38      	l32i.n	a3, a11, 0
		if (cb->pin_mask & pins) {
400835bd:	2bc8      	l32i.n	a12, a11, 8
400835bf:	10c4c0        	and	a12, a4, a12
400835c2:	6c8c      	beqz.n	a12, 400835cc <gpio_esp32_fire_callbacks+0x28>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
400835c4:	1b88      	l32i.n	a8, a11, 4
400835c6:	20a220        	or	a10, a2, a2
400835c9:	0008e0        	callx8	a8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
400835cc:	538c      	beqz.n	a3, 400835d5 <gpio_esp32_fire_callbacks+0x31>
400835ce:	03bd      	mov.n	a11, a3
400835d0:	0338      	l32i.n	a3, a3, 0
400835d2:	fff9c6        	j	400835bd <gpio_esp32_fire_callbacks+0x19>
}
400835d5:	f01d      	retw.n
	...

400835d8 <i2c_esp32_connect_irq_0>:
{
400835d8:	004136        	entry	a1, 32
}
400835db:	f01d      	retw.n
400835dd:	000000        	ill

400835e0 <i2c_esp32_connect_irq_1>:
400835e0:	004136        	entry	a1, 32
400835e3:	f01d      	retw.n
400835e5:	000000        	ill

400835e8 <uart_esp32_poll_in>:
{
400835e8:	004136        	entry	a1, 32
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
400835eb:	1228      	l32i.n	a2, a2, 4
400835ed:	0298      	l32i.n	a9, a2, 0
		return -1;
400835ef:	f27c      	movi.n	a2, -1
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
400835f1:	0020c0        	memw
400835f4:	7988      	l32i.n	a8, a9, 28
400835f6:	748080        	extui	a8, a8, 0, 8
400835f9:	888c      	beqz.n	a8, 40083605 <uart_esp32_poll_in+0x1d>
	*p_char = DEV_BASE(dev)->fifo;
400835fb:	0020c0        	memw
400835fe:	0928      	l32i.n	a2, a9, 0
40083600:	004322        	s8i	a2, a3, 0
	return 0;
40083603:	020c      	movi.n	a2, 0
}
40083605:	f01d      	retw.n
	...

40083608 <uart_esp32_poll_out>:
{
40083608:	004136        	entry	a1, 32
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
4008360b:	1288      	l32i.n	a8, a2, 4
{
4008360d:	743030        	extui	a3, a3, 0, 8
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
40083610:	0898      	l32i.n	a9, a8, 0
40083612:	7ea0a2        	movi	a10, 126
40083615:	0020c0        	memw
40083618:	7988      	l32i.n	a8, a9, 28
4008361a:	758080        	extui	a8, a8, 16, 8
4008361d:	f43a87        	bltu	a10, a8, 40083615 <uart_esp32_poll_out+0xd>
	DEV_BASE(dev)->fifo = (uint32_t)c;
40083620:	0020c0        	memw
40083623:	0939      	s32i.n	a3, a9, 0
}
40083625:	f01d      	retw.n
	...

40083628 <uart_esp32_err_check>:
{
40083628:	004136        	entry	a1, 32
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
4008362b:	1228      	l32i.n	a2, a2, 4
4008362d:	0288      	l32i.n	a8, a2, 0
4008362f:	0020c0        	memw
40083632:	2828      	l32i.n	a2, a8, 8
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
40083634:	0020c0        	memw
40083637:	2888      	l32i.n	a8, a8, 8
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
40083639:	412220        	srli	a2, a2, 2
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
4008363c:	418380        	srli	a8, a8, 3
4008363f:	202280        	or	a2, a2, a8
}
40083642:	042020        	extui	a2, a2, 0, 1
40083645:	f01d      	retw.n
	...

40083648 <uart_esp32_config_get>:
{
40083648:	004136        	entry	a1, 32
	cfg->baudrate = data->uart_config.baudrate;
4008364b:	3288      	l32i.n	a8, a2, 12
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
4008364d:	1228      	l32i.n	a2, a2, 4
	cfg->baudrate = data->uart_config.baudrate;
4008364f:	0888      	l32i.n	a8, a8, 0
		cfg->parity = UART_CFG_PARITY_NONE;
40083651:	090c      	movi.n	a9, 0
	cfg->baudrate = data->uart_config.baudrate;
40083653:	0389      	s32i.n	a8, a3, 0
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083655:	0288      	l32i.n	a8, a2, 0
40083657:	0020c0        	memw
4008365a:	082822        	l32i	a2, a8, 32
4008365d:	076217        	bbci	a2, 1, 40083668 <uart_esp32_config_get+0x20>
		cfg->parity = UART_GET_PARITY(DEV_BASE(dev)->conf0);
40083660:	0020c0        	memw
40083663:	8898      	l32i.n	a9, a8, 32
40083665:	049090        	extui	a9, a9, 0, 1
40083668:	044392        	s8i	a9, a3, 4
	cfg->stop_bits = UART_GET_STOP_BITS(DEV_BASE(dev)->conf0);
4008366b:	0020c0        	memw
4008366e:	8898      	l32i.n	a9, a8, 32
40083670:	149490        	extui	a9, a9, 4, 2
40083673:	054392        	s8i	a9, a3, 5
	cfg->data_bits = UART_GET_DATA_BITS(DEV_BASE(dev)->conf0);
40083676:	0020c0        	memw
40083679:	082892        	l32i	a9, a8, 32
4008367c:	149290        	extui	a9, a9, 2, 2
4008367f:	064392        	s8i	a9, a3, 6
	if (UART_GET_TX_FLOW(DEV_BASE(dev)->conf0)) {
40083682:	0020c0        	memw
40083685:	8828      	l32i.n	a2, a8, 32
40083687:	0562f7        	bbci	a2, 15, 40083690 <uart_esp32_config_get+0x48>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RTS_CTS;
4008368a:	01a022        	movi	a2, 1
4008368d:	074322        	s8i	a2, a3, 7
	if (UART_GET_RX_FLOW(DEV_BASE(dev)->conf1)) {
40083690:	0020c0        	memw
40083693:	9828      	l32i.n	a2, a8, 36
40083695:	047277        	bbci	a2, 23, 4008369d <uart_esp32_config_get+0x55>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_DTR_DSR;
40083698:	220c      	movi.n	a2, 2
4008369a:	074322        	s8i	a2, a3, 7
}
4008369d:	020c      	movi.n	a2, 0
4008369f:	f01d      	retw.n
400836a1:	000000        	ill

400836a4 <arch_system_halt>:
{
400836a4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400836a7:	006380        	rsil	a8, 3
	for (;;) {
400836aa:	ffff06        	j	400836aa <arch_system_halt+0x6>
400836ad:	000000        	ill

400836b0 <sys_dlist_remove>:
{
400836b0:	004136        	entry	a1, 32
	node->prev->next = node->next;
400836b3:	0288      	l32i.n	a8, a2, 0
400836b5:	1298      	l32i.n	a9, a2, 4
400836b7:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
400836b9:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
400836bb:	080c      	movi.n	a8, 0
400836bd:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
400836bf:	1289      	s32i.n	a8, a2, 4
	sys_dnode_init(node);
}
400836c1:	f01d      	retw.n
	...

400836c4 <z_priq_dumb_best>:
{
400836c4:	004136        	entry	a1, 32
	return list->head == list;
400836c7:	0288      	l32i.n	a8, a2, 0
	if (n != NULL) {
400836c9:	188c      	beqz.n	a8, 400836ce <z_priq_dumb_best+0xa>
400836cb:	019287        	bne	a2, a8, 400836d0 <z_priq_dumb_best+0xc>
	struct k_thread *thread = NULL;
400836ce:	080c      	movi.n	a8, 0
}
400836d0:	082d      	mov.n	a2, a8
400836d2:	f01d      	retw.n

400836d4 <z_impl_k_sem_init>:
{
400836d4:	004136        	entry	a1, 32
	CHECKIF(limit == 0U || initial_count > limit) {
400836d7:	180c      	movi.n	a8, 1
400836d9:	090c      	movi.n	a9, 0
400836db:	938940        	movnez	a8, a9, a4
400836de:	748080        	extui	a8, a8, 0, 8
400836e1:	0f9897        	bne	a8, a9, 400836f4 <z_impl_k_sem_init+0x20>
400836e4:	0c3437        	bltu	a4, a3, 400836f4 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
400836e7:	2239      	s32i.n	a3, a2, 8
	sem->limit = limit;
400836e9:	3249      	s32i.n	a4, a2, 12
	list->head = (sys_dnode_t *)list;
400836eb:	0229      	s32i.n	a2, a2, 0
	list->tail = (sys_dnode_t *)list;
400836ed:	1229      	s32i.n	a2, a2, 4
	return 0;
400836ef:	082d      	mov.n	a2, a8
400836f1:	000046        	j	400836f6 <z_impl_k_sem_init+0x22>
		return -EINVAL;
400836f4:	a26c      	movi.n	a2, -22
}
400836f6:	f01d      	retw.n

400836f8 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
400836f8:	004136        	entry	a1, 32
/* size of the struct k_thread structure without save area for coproc regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 sizeof(struct k_thread) - sizeof(tCoopCoprocReg) -
			 sizeof(tPreempCoprocReg) + XT_CP_DESCR_SIZE);

GEN_ABS_SYM_END
400836fb:	f01d      	retw.n
400836fd:	000000        	ill

40083700 <__udivdi3>:
40083700:	004136        	entry	a1, 32
40083703:	03dd      	mov.n	a13, a3
40083705:	04ad      	mov.n	a10, a4
40083707:	053d      	mov.n	a3, a5
40083709:	02cd      	mov.n	a12, a2
4008370b:	0d9d      	mov.n	a9, a13
4008370d:	184556        	bnez	a5, 40083895 <__udivdi3+0x195>
40083710:	023d47        	bltu	a13, a4, 40083716 <__udivdi3+0x16>
40083713:	002086        	j	40083799 <__udivdi3+0x99>
40083716:	40f420        	nsau	a2, a4
40083719:	c29c      	beqz.n	a2, 40083739 <__udivdi3+0x39>
4008371b:	608020        	neg	a8, a2
4008371e:	400800        	ssr	a8
40083721:	9180c0        	srl	a8, a12
40083724:	401200        	ssl	a2
40083727:	a19d00        	sll	a9, a13
4008372a:	401200        	ssl	a2
4008372d:	a1a400        	sll	a10, a4
40083730:	209890        	or	a9, a8, a9
40083733:	401200        	ssl	a2
40083736:	a1cc00        	sll	a12, a12
40083739:	f580a0        	extui	a8, a10, 16, 16
4008373c:	e2d980        	remu	a13, a9, a8
4008373f:	f440a0        	extui	a4, a10, 0, 16
40083742:	c29980        	quou	a9, a9, a8
40083745:	11dd00        	slli	a13, a13, 16
40083748:	f5b0c0        	extui	a11, a12, 16, 16
4008374b:	822490        	mull	a2, a4, a9
4008374e:	20bdb0        	or	a11, a13, a11
40083751:	13bb27        	bgeu	a11, a2, 40083768 <__udivdi3+0x68>
40083754:	bbaa      	add.n	a11, a11, a10
40083756:	590b      	addi.n	a5, a9, -1
40083758:	0a3ba7        	bltu	a11, a10, 40083766 <__udivdi3+0x66>
4008375b:	07bb27        	bgeu	a11, a2, 40083766 <__udivdi3+0x66>
4008375e:	fec992        	addi	a9, a9, -2
40083761:	bbaa      	add.n	a11, a11, a10
40083763:	000046        	j	40083768 <__udivdi3+0x68>
40083766:	059d      	mov.n	a9, a5
40083768:	c0bb20        	sub	a11, a11, a2
4008376b:	e22b80        	remu	a2, a11, a8
4008376e:	c2bb80        	quou	a11, a11, a8
40083771:	112200        	slli	a2, a2, 16
40083774:	f4c0c0        	extui	a12, a12, 0, 16
40083777:	8244b0        	mull	a4, a4, a11
4008377a:	20c2c0        	or	a12, a2, a12
4008377d:	0fbc47        	bgeu	a12, a4, 40083790 <__udivdi3+0x90>
40083780:	caca      	add.n	a12, a10, a12
40083782:	ffcb22        	addi	a2, a11, -1
40083785:	05bc47        	bgeu	a12, a4, 4008378e <__udivdi3+0x8e>
40083788:	fecbb2        	addi	a11, a11, -2
4008378b:	01bca7        	bgeu	a12, a10, 40083790 <__udivdi3+0x90>
4008378e:	02bd      	mov.n	a11, a2
40083790:	118900        	slli	a8, a9, 16
40083793:	2088b0        	or	a8, a8, a11
40083796:	007406        	j	4008396a <__udivdi3+0x26a>
40083799:	34cc      	bnez.n	a4, 400837a0 <__udivdi3+0xa0>
4008379b:	130c      	movi.n	a3, 1
4008379d:	c2a340        	quou	a10, a3, a4
400837a0:	40fa50        	nsau	a5, a10
400837a3:	c08da0        	sub	a8, a13, a10
400837a6:	130c      	movi.n	a3, 1
400837a8:	089516        	beqz	a5, 40083835 <__udivdi3+0x135>
400837ab:	042c      	movi.n	a4, 32
400837ad:	c04450        	sub	a4, a4, a5
400837b0:	401500        	ssl	a5
400837b3:	a1aa00        	sll	a10, a10
400837b6:	400400        	ssr	a4
400837b9:	9130d0        	srl	a3, a13
400837bc:	401500        	ssl	a5
400837bf:	a18d00        	sll	a8, a13
400837c2:	400400        	ssr	a4
400837c5:	914020        	srl	a4, a2
400837c8:	401500        	ssl	a5
400837cb:	a1c200        	sll	a12, a2
400837ce:	f520a0        	extui	a2, a10, 16, 16
400837d1:	204480        	or	a4, a4, a8
400837d4:	e2b320        	remu	a11, a3, a2
400837d7:	f480a0        	extui	a8, a10, 0, 16
400837da:	c23320        	quou	a3, a3, a2
400837dd:	11bb00        	slli	a11, a11, 16
400837e0:	f59040        	extui	a9, a4, 16, 16
400837e3:	825830        	mull	a5, a8, a3
400837e6:	209b90        	or	a9, a11, a9
400837e9:	13b957        	bgeu	a9, a5, 40083800 <__udivdi3+0x100>
400837ec:	99aa      	add.n	a9, a9, a10
400837ee:	b30b      	addi.n	a11, a3, -1
400837f0:	0a39a7        	bltu	a9, a10, 400837fe <__udivdi3+0xfe>
400837f3:	07b957        	bgeu	a9, a5, 400837fe <__udivdi3+0xfe>
400837f6:	fec332        	addi	a3, a3, -2
400837f9:	99aa      	add.n	a9, a9, a10
400837fb:	000046        	j	40083800 <__udivdi3+0x100>
400837fe:	0b3d      	mov.n	a3, a11
40083800:	c09950        	sub	a9, a9, a5
40083803:	e2b920        	remu	a11, a9, a2
40083806:	c29920        	quou	a9, a9, a2
40083809:	822890        	mull	a2, a8, a9
4008380c:	11bb00        	slli	a11, a11, 16
4008380f:	f48040        	extui	a8, a4, 0, 16
40083812:	208b80        	or	a8, a11, a8
40083815:	13b827        	bgeu	a8, a2, 4008382c <__udivdi3+0x12c>
40083818:	88aa      	add.n	a8, a8, a10
4008381a:	490b      	addi.n	a4, a9, -1
4008381c:	0a38a7        	bltu	a8, a10, 4008382a <__udivdi3+0x12a>
4008381f:	07b827        	bgeu	a8, a2, 4008382a <__udivdi3+0x12a>
40083822:	fec992        	addi	a9, a9, -2
40083825:	88aa      	add.n	a8, a8, a10
40083827:	000046        	j	4008382c <__udivdi3+0x12c>
4008382a:	049d      	mov.n	a9, a4
4008382c:	113300        	slli	a3, a3, 16
4008382f:	c08820        	sub	a8, a8, a2
40083832:	203390        	or	a3, a3, a9
40083835:	f550a0        	extui	a5, a10, 16, 16
40083838:	e2b850        	remu	a11, a8, a5
4008383b:	f440a0        	extui	a4, a10, 0, 16
4008383e:	c28850        	quou	a8, a8, a5
40083841:	11bb00        	slli	a11, a11, 16
40083844:	f590c0        	extui	a9, a12, 16, 16
40083847:	822480        	mull	a2, a4, a8
4008384a:	209b90        	or	a9, a11, a9
4008384d:	13b927        	bgeu	a9, a2, 40083864 <__udivdi3+0x164>
40083850:	99aa      	add.n	a9, a9, a10
40083852:	b80b      	addi.n	a11, a8, -1
40083854:	0a39a7        	bltu	a9, a10, 40083862 <__udivdi3+0x162>
40083857:	07b927        	bgeu	a9, a2, 40083862 <__udivdi3+0x162>
4008385a:	fec882        	addi	a8, a8, -2
4008385d:	99aa      	add.n	a9, a9, a10
4008385f:	000046        	j	40083864 <__udivdi3+0x164>
40083862:	0b8d      	mov.n	a8, a11
40083864:	c09920        	sub	a9, a9, a2
40083867:	e22950        	remu	a2, a9, a5
4008386a:	c29950        	quou	a9, a9, a5
4008386d:	112200        	slli	a2, a2, 16
40083870:	f4c0c0        	extui	a12, a12, 0, 16
40083873:	824490        	mull	a4, a4, a9
40083876:	20c2c0        	or	a12, a2, a12
40083879:	0fbc47        	bgeu	a12, a4, 4008388c <__udivdi3+0x18c>
4008387c:	caca      	add.n	a12, a10, a12
4008387e:	ffc922        	addi	a2, a9, -1
40083881:	053ca7        	bltu	a12, a10, 4008388a <__udivdi3+0x18a>
40083884:	fec992        	addi	a9, a9, -2
40083887:	013c47        	bltu	a12, a4, 4008388c <__udivdi3+0x18c>
4008388a:	029d      	mov.n	a9, a2
4008388c:	118800        	slli	a8, a8, 16
4008388f:	208890        	or	a8, a8, a9
40083892:	003506        	j	4008396a <__udivdi3+0x26a>
40083895:	030c      	movi.n	a3, 0
40083897:	038d      	mov.n	a8, a3
40083899:	02bd57        	bgeu	a13, a5, 4008389f <__udivdi3+0x19f>
4008389c:	003286        	j	4008396a <__udivdi3+0x26a>
4008389f:	40f5b0        	nsau	a11, a5
400838a2:	179b37        	bne	a11, a3, 400838bd <__udivdi3+0x1bd>
400838a5:	180c      	movi.n	a8, 1
400838a7:	0235d7        	bltu	a5, a13, 400838ad <__udivdi3+0x1ad>
400838aa:	208bb0        	or	a8, a11, a11
400838ad:	130c      	movi.n	a3, 1
400838af:	01b247        	bgeu	a2, a4, 400838b4 <__udivdi3+0x1b4>
400838b2:	030c      	movi.n	a3, 0
400838b4:	208830        	or	a8, a8, a3
400838b7:	748080        	extui	a8, a8, 0, 8
400838ba:	002a86        	j	40083968 <__udivdi3+0x268>
400838bd:	092c      	movi.n	a9, 32
400838bf:	c099b0        	sub	a9, a9, a11
400838c2:	400900        	ssr	a9
400838c5:	913040        	srl	a3, a4
400838c8:	401b00        	ssl	a11
400838cb:	a15500        	sll	a5, a5
400838ce:	205350        	or	a5, a3, a5
400838d1:	400900        	ssr	a9
400838d4:	9180d0        	srl	a8, a13
400838d7:	401b00        	ssl	a11
400838da:	a13d00        	sll	a3, a13
400838dd:	400900        	ssr	a9
400838e0:	919020        	srl	a9, a2
400838e3:	f5d050        	extui	a13, a5, 16, 16
400838e6:	203930        	or	a3, a9, a3
400838e9:	f4c050        	extui	a12, a5, 0, 16
400838ec:	e298d0        	remu	a9, a8, a13
400838ef:	c288d0        	quou	a8, a8, a13
400838f2:	119900        	slli	a9, a9, 16
400838f5:	f5e030        	extui	a14, a3, 16, 16
400838f8:	82ac80        	mull	a10, a12, a8
400838fb:	2099e0        	or	a9, a9, a14
400838fe:	401b00        	ssl	a11
40083901:	a14400        	sll	a4, a4
40083904:	14b9a7        	bgeu	a9, a10, 4008391c <__udivdi3+0x21c>
40083907:	995a      	add.n	a9, a9, a5
40083909:	e80b      	addi.n	a14, a8, -1
4008390b:	0bb9a7        	bgeu	a9, a10, 4008391a <__udivdi3+0x21a>
4008390e:	083957        	bltu	a9, a5, 4008391a <__udivdi3+0x21a>
40083911:	fec882        	addi	a8, a8, -2
40083914:	995a      	add.n	a9, a9, a5
40083916:	000086        	j	4008391c <__udivdi3+0x21c>
40083919:	0e8d00        	lsi	f0, a13, 56
4008391c:	c0a9a0        	sub	a10, a9, a10
4008391f:	e29ad0        	remu	a9, a10, a13
40083922:	c2aad0        	quou	a10, a10, a13
40083925:	119900        	slli	a9, a9, 16
40083928:	f43030        	extui	a3, a3, 0, 16
4008392b:	82cca0        	mull	a12, a12, a10
4008392e:	203930        	or	a3, a9, a3
40083931:	13b3c7        	bgeu	a3, a12, 40083948 <__udivdi3+0x248>
40083934:	335a      	add.n	a3, a3, a5
40083936:	9a0b      	addi.n	a9, a10, -1
40083938:	0a3357        	bltu	a3, a5, 40083946 <__udivdi3+0x246>
4008393b:	07b3c7        	bgeu	a3, a12, 40083946 <__udivdi3+0x246>
4008393e:	fecaa2        	addi	a10, a10, -2
40083941:	335a      	add.n	a3, a3, a5
40083943:	000046        	j	40083948 <__udivdi3+0x248>
40083946:	09ad      	mov.n	a10, a9
40083948:	118800        	slli	a8, a8, 16
4008394b:	2088a0        	or	a8, a8, a10
4008394e:	825840        	mull	a5, a8, a4
40083951:	a24840        	muluh	a4, a8, a4
40083954:	c033c0        	sub	a3, a3, a12
40083957:	0b3347        	bltu	a3, a4, 40083966 <__udivdi3+0x266>
4008395a:	401b00        	ssl	a11
4008395d:	a12200        	sll	a2, a2
40083960:	04b257        	bgeu	a2, a5, 40083968 <__udivdi3+0x268>
40083963:	019347        	bne	a3, a4, 40083968 <__udivdi3+0x268>
40083966:	880b      	addi.n	a8, a8, -1
40083968:	030c      	movi.n	a3, 0
4008396a:	082d      	mov.n	a2, a8
4008396c:	f01d      	retw.n
	...

40083970 <__umoddi3>:
40083970:	004136        	entry	a1, 32
40083973:	04bd      	mov.n	a11, a4
40083975:	208220        	or	a8, a2, a2
40083978:	039d      	mov.n	a9, a3
4008397a:	152556        	bnez	a5, 40083ad0 <__umoddi3+0x160>
4008397d:	71b347        	bgeu	a3, a4, 400839f2 <__umoddi3+0x82>
40083980:	40f4a0        	nsau	a10, a4
40083983:	01da16        	beqz	a10, 400839a4 <__umoddi3+0x34>
40083986:	401a00        	ssl	a10
40083989:	a19300        	sll	a9, a3
4008398c:	6030a0        	neg	a3, a10
4008398f:	400300        	ssr	a3
40083992:	913020        	srl	a3, a2
40083995:	401a00        	ssl	a10
40083998:	a1b400        	sll	a11, a4
4008399b:	209390        	or	a9, a3, a9
4008399e:	401a00        	ssl	a10
400839a1:	a18200        	sll	a8, a2
400839a4:	f540b0        	extui	a4, a11, 16, 16
400839a7:	e23940        	remu	a3, a9, a4
400839aa:	f420b0        	extui	a2, a11, 0, 16
400839ad:	c29940        	quou	a9, a9, a4
400839b0:	113300        	slli	a3, a3, 16
400839b3:	f55080        	extui	a5, a8, 16, 16
400839b6:	829290        	mull	a9, a2, a9
400839b9:	203350        	or	a3, a3, a5
400839bc:	09b397        	bgeu	a3, a9, 400839c9 <__umoddi3+0x59>
400839bf:	33ba      	add.n	a3, a3, a11
400839c1:	0433b7        	bltu	a3, a11, 400839c9 <__umoddi3+0x59>
400839c4:	01b397        	bgeu	a3, a9, 400839c9 <__umoddi3+0x59>
400839c7:	33ba      	add.n	a3, a3, a11
400839c9:	c09390        	sub	a9, a3, a9
400839cc:	e23940        	remu	a3, a9, a4
400839cf:	c29940        	quou	a9, a9, a4
400839d2:	829290        	mull	a9, a2, a9
400839d5:	f48080        	extui	a8, a8, 0, 16
400839d8:	112300        	slli	a2, a3, 16
400839db:	208280        	or	a8, a2, a8
400839de:	0ab897        	bgeu	a8, a9, 400839ec <__umoddi3+0x7c>
400839e1:	88ba      	add.n	a8, a8, a11
400839e3:	05b897        	bgeu	a8, a9, 400839ec <__umoddi3+0x7c>
400839e6:	0238b7        	bltu	a8, a11, 400839ec <__umoddi3+0x7c>
400839e9:	8088b0        	add	a8, a8, a11
400839ec:	c08890        	sub	a8, a8, a9
400839ef:	003406        	j	40083ac3 <__umoddi3+0x153>
400839f2:	34cc      	bnez.n	a4, 400839f9 <__umoddi3+0x89>
400839f4:	140c      	movi.n	a4, 1
400839f6:	c2b4b0        	quou	a11, a4, a11
400839f9:	40fba0        	nsau	a10, a11
400839fc:	5acc      	bnez.n	a10, 40083a05 <__umoddi3+0x95>
400839fe:	c033b0        	sub	a3, a3, a11
40083a01:	001c86        	j	40083a77 <__umoddi3+0x107>
40083a04:	042c00        	extui	a2, a0, 12, 1
40083a07:	c044a0        	sub	a4, a4, a10
40083a0a:	401a00        	ssl	a10
40083a0d:	a1bb00        	sll	a11, a11
40083a10:	400400        	ssr	a4
40083a13:	915030        	srl	a5, a3
40083a16:	f5c0b0        	extui	a12, a11, 16, 16
40083a19:	401a00        	ssl	a10
40083a1c:	a13300        	sll	a3, a3
40083a1f:	400400        	ssr	a4
40083a22:	914020        	srl	a4, a2
40083a25:	204430        	or	a4, a4, a3
40083a28:	401a00        	ssl	a10
40083a2b:	a18200        	sll	a8, a2
40083a2e:	f430b0        	extui	a3, a11, 0, 16
40083a31:	e225c0        	remu	a2, a5, a12
40083a34:	c255c0        	quou	a5, a5, a12
40083a37:	112200        	slli	a2, a2, 16
40083a3a:	f59040        	extui	a9, a4, 16, 16
40083a3d:	825350        	mull	a5, a3, a5
40083a40:	202290        	or	a2, a2, a9
40083a43:	09b257        	bgeu	a2, a5, 40083a50 <__umoddi3+0xe0>
40083a46:	22ba      	add.n	a2, a2, a11
40083a48:	0432b7        	bltu	a2, a11, 40083a50 <__umoddi3+0xe0>
40083a4b:	01b257        	bgeu	a2, a5, 40083a50 <__umoddi3+0xe0>
40083a4e:	22ba      	add.n	a2, a2, a11
40083a50:	c09250        	sub	a9, a2, a5
40083a53:	e229c0        	remu	a2, a9, a12
40083a56:	c299c0        	quou	a9, a9, a12
40083a59:	829390        	mull	a9, a3, a9
40083a5c:	112200        	slli	a2, a2, 16
40083a5f:	f43040        	extui	a3, a4, 0, 16
40083a62:	203230        	or	a3, a2, a3
40083a65:	0bb397        	bgeu	a3, a9, 40083a74 <__umoddi3+0x104>
40083a68:	8033b0        	add	a3, a3, a11
40083a6b:	05b397        	bgeu	a3, a9, 40083a74 <__umoddi3+0x104>
40083a6e:	0233b7        	bltu	a3, a11, 40083a74 <__umoddi3+0x104>
40083a71:	8033b0        	add	a3, a3, a11
40083a74:	c03390        	sub	a3, a3, a9
40083a77:	f540b0        	extui	a4, a11, 16, 16
40083a7a:	e29340        	remu	a9, a3, a4
40083a7d:	f420b0        	extui	a2, a11, 0, 16
40083a80:	c23340        	quou	a3, a3, a4
40083a83:	119900        	slli	a9, a9, 16
40083a86:	f55080        	extui	a5, a8, 16, 16
40083a89:	823230        	mull	a3, a2, a3
40083a8c:	209950        	or	a9, a9, a5
40083a8f:	09b937        	bgeu	a9, a3, 40083a9c <__umoddi3+0x12c>
40083a92:	99ba      	add.n	a9, a9, a11
40083a94:	0439b7        	bltu	a9, a11, 40083a9c <__umoddi3+0x12c>
40083a97:	01b937        	bgeu	a9, a3, 40083a9c <__umoddi3+0x12c>
40083a9a:	99ba      	add.n	a9, a9, a11
40083a9c:	c03930        	sub	a3, a9, a3
40083a9f:	e25340        	remu	a5, a3, a4
40083aa2:	c23340        	quou	a3, a3, a4
40083aa5:	823230        	mull	a3, a2, a3
40083aa8:	f48080        	extui	a8, a8, 0, 16
40083aab:	112500        	slli	a2, a5, 16
40083aae:	208280        	or	a8, a2, a8
40083ab1:	0bb837        	bgeu	a8, a3, 40083ac0 <__umoddi3+0x150>
40083ab4:	8088b0        	add	a8, a8, a11
40083ab7:	05b837        	bgeu	a8, a3, 40083ac0 <__umoddi3+0x150>
40083aba:	0238b7        	bltu	a8, a11, 40083ac0 <__umoddi3+0x150>
40083abd:	8088b0        	add	a8, a8, a11
40083ac0:	c08830        	sub	a8, a8, a3
40083ac3:	400a00        	ssr	a10
40083ac6:	912080        	srl	a2, a8
40083ac9:	030c      	movi.n	a3, 0
40083acb:	004446        	j	40083be0 <__umoddi3+0x270>
40083ace:	570000        	lsi	f0, a0, 0x15c
40083ad1:	4602b3        	lsi	f11, a2, 0x118
40083ad4:	c00042        	l8ui	a4, a0, 192
40083ad7:	dc40f5        	call12	4005fee4 <esp32_rom_gpio_matrix_out+0x55fd8>
40083ada:	37dc      	bnez.n	a7, 40083af1 <__umoddi3+0x181>
40083adc:	470235        	call12	400cab00 <_iram_text_end+0x46f1e>
40083adf:	401132        	l16ui	a3, a1, 128
40083ae2:	50c082        	addi	a8, a0, 80
40083ae5:	92c033        	ssip	f3, a0, 0x248
40083ae8:	8701a0        	lsi	f10, a1, 0x21c
40083aeb:	920232        	l8ui	a3, a2, 146
40083aee:	9000a0        	addx2	a0, a0, a10
40083af1:	2dc093        	ssip	f9, a0, 180
40083af4:	3d08      	l32i.n	a0, a13, 12
40083af6:	4609      	s32i.n	a0, a6, 16
40083af8:	0039      	s32i.n	a3, a0, 0
40083afa:	092c      	movi.n	a9, 32
40083afc:	c099c0        	sub	a9, a9, a12
40083aff:	400900        	ssr	a9
40083b02:	91a040        	srl	a10, a4
40083b05:	401c00        	ssl	a12
40083b08:	a15500        	sll	a5, a5
40083b0b:	205a50        	or	a5, a10, a5
40083b0e:	400900        	ssr	a9
40083b11:	91d020        	srl	a13, a2
40083b14:	400900        	ssr	a9
40083b17:	91a030        	srl	a10, a3
40083b1a:	f5e050        	extui	a14, a5, 16, 16
40083b1d:	401c00        	ssl	a12
40083b20:	a13300        	sll	a3, a3
40083b23:	20dd30        	or	a13, a13, a3
40083b26:	e2bae0        	remu	a11, a10, a14
40083b29:	f43050        	extui	a3, a5, 0, 16
40083b2c:	c2aae0        	quou	a10, a10, a14
40083b2f:	11bb00        	slli	a11, a11, 16
40083b32:	f5f0d0        	extui	a15, a13, 16, 16
40083b35:	8283a0        	mull	a8, a3, a10
40083b38:	20bbf0        	or	a11, a11, a15
40083b3b:	401c00        	ssl	a12
40083b3e:	a14400        	sll	a4, a4
40083b41:	401c00        	ssl	a12
40083b44:	a12200        	sll	a2, a2
40083b47:	15bb87        	bgeu	a11, a8, 40083b60 <__umoddi3+0x1f0>
40083b4a:	bb5a      	add.n	a11, a11, a5
40083b4c:	fa0b      	addi.n	a15, a10, -1
40083b4e:	0c3b57        	bltu	a11, a5, 40083b5e <__umoddi3+0x1ee>
40083b51:	09bb87        	bgeu	a11, a8, 40083b5e <__umoddi3+0x1ee>
40083b54:	fecaa2        	addi	a10, a10, -2
40083b57:	bb5a      	add.n	a11, a11, a5
40083b59:	0000c6        	j	40083b60 <__umoddi3+0x1f0>
40083b5c:	ad0000        	lsi	f0, a0, 0x2b4
40083b5f:	0f          	.byte 0xf
40083b60:	c0bb80        	sub	a11, a11, a8
40083b63:	e28be0        	remu	a8, a11, a14
40083b66:	c2bbe0        	quou	a11, a11, a14
40083b69:	82e3b0        	mull	a14, a3, a11
40083b6c:	118800        	slli	a8, a8, 16
40083b6f:	f430d0        	extui	a3, a13, 0, 16
40083b72:	203830        	or	a3, a8, a3
40083b75:	13b3e7        	bgeu	a3, a14, 40083b8c <__umoddi3+0x21c>
40083b78:	335a      	add.n	a3, a3, a5
40083b7a:	8b0b      	addi.n	a8, a11, -1
40083b7c:	0ab3e7        	bgeu	a3, a14, 40083b8a <__umoddi3+0x21a>
40083b7f:	073357        	bltu	a3, a5, 40083b8a <__umoddi3+0x21a>
40083b82:	fecbb2        	addi	a11, a11, -2
40083b85:	335a      	add.n	a3, a3, a5
40083b87:	000046        	j	40083b8c <__umoddi3+0x21c>
40083b8a:	08bd      	mov.n	a11, a8
40083b8c:	11aa00        	slli	a10, a10, 16
40083b8f:	20aab0        	or	a10, a10, a11
40083b92:	82da40        	mull	a13, a10, a4
40083b95:	a2aa40        	muluh	a10, a10, a4
40083b98:	c033e0        	sub	a3, a3, a14
40083b9b:	0abd      	mov.n	a11, a10
40083b9d:	0d8d      	mov.n	a8, a13
40083b9f:	0533a7        	bltu	a3, a10, 40083ba8 <__umoddi3+0x238>
40083ba2:	1493a7        	bne	a3, a10, 40083bba <__umoddi3+0x24a>
40083ba5:	11b2d7        	bgeu	a2, a13, 40083bba <__umoddi3+0x24a>
40083ba8:	c04d40        	sub	a4, a13, a4
40083bab:	c0aa50        	sub	a10, a10, a5
40083bae:	1b0c      	movi.n	a11, 1
40083bb0:	013d47        	bltu	a13, a4, 40083bb5 <__umoddi3+0x245>
40083bb3:	0b0c      	movi.n	a11, 0
40083bb5:	c0bab0        	sub	a11, a10, a11
40083bb8:	048d      	mov.n	a8, a4
40083bba:	c04280        	sub	a4, a2, a8
40083bbd:	c033b0        	sub	a3, a3, a11
40083bc0:	150c      	movi.n	a5, 1
40083bc2:	023247        	bltu	a2, a4, 40083bc8 <__umoddi3+0x258>
40083bc5:	00a052        	movi	a5, 0
40083bc8:	c03350        	sub	a3, a3, a5
40083bcb:	401900        	ssl	a9
40083bce:	a18300        	sll	a8, a3
40083bd1:	400c00        	ssr	a12
40083bd4:	912040        	srl	a2, a4
40083bd7:	202820        	or	a2, a8, a2
40083bda:	400c00        	ssr	a12
40083bdd:	913030        	srl	a3, a3
40083be0:	f01d      	retw.n
