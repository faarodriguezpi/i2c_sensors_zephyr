
zephyr.elf:     file format elf32-xtensa-le


Disassembly of section .iram0.vectors:

40080000 <_WindowOverflow4>:

    .org    0x0
    .global _WindowOverflow4
_WindowOverflow4:

    s32e    a0, a5, -16     /* save a0 to call[j+1]'s stack frame */
40080000:	49c500        	s32e	a0, a5, -16
    s32e    a1, a5, -12     /* save a1 to call[j+1]'s stack frame */
40080003:	49d510        	s32e	a1, a5, -12
    s32e    a2, a5,  -8     /* save a2 to call[j+1]'s stack frame */
40080006:	49e520        	s32e	a2, a5, -8
    s32e    a3, a5,  -4     /* save a3 to call[j+1]'s stack frame */
40080009:	49f530        	s32e	a3, a5, -4
    rfwo                    /* rotates back to call[i] position */
4008000c:	003400        	rfwo
	...

40080040 <_WindowUnderflow4>:

    .org    0x40
    .global _WindowUnderflow4
_WindowUnderflow4:

    l32e    a0, a5, -16     /* restore a0 from call[i+1]'s stack frame */
40080040:	09c500        	l32e	a0, a5, -16
    l32e    a1, a5, -12     /* restore a1 from call[i+1]'s stack frame */
40080043:	09d510        	l32e	a1, a5, -12
    l32e    a2, a5,  -8     /* restore a2 from call[i+1]'s stack frame */
40080046:	09e520        	l32e	a2, a5, -8
    l32e    a3, a5,  -4     /* restore a3 from call[i+1]'s stack frame */
40080049:	09f530        	l32e	a3, a5, -4
    rfwu
4008004c:	003500        	rfwu
	...

40080050 <_xt_alloca_exc>:

    .align  4
    .global _xt_alloca_exc
_xt_alloca_exc:

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
40080050:	034800        	rsr.windowbase	a0
    rotw    -1      /* WINDOWBASE goes to a4, new a0-a3 are scratch */
40080053:	4080f0        	rotw	-1
    rsr     a2, PS
40080056:	03e620        	rsr.ps	a2
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
40080059:	343820        	extui	a3, a2, 8, 4
    xor     a3, a3, a4    /* bits changed from old to current windowbase */
4008005c:	303340        	xor	a3, a3, a4
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
4008005f:	03d140        	rsr.excsave1	a4
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
40080062:	113380        	slli	a3, a3, 8
    xor     a2, a2, a3      /* flip changed bits in old window base */
40080065:	302230        	xor	a2, a2, a3
    wsr     a2, PS          /* update PS.OWB to new window base */
40080068:	13e620        	wsr.ps	a2
    rsync
4008006b:	002010        	rsync

    _bbci.l a4, 31, _WindowUnderflow4
4008006e:	ce74f7        	bbci	a4, 31, 40080040 <_WindowUnderflow4>
    rotw    -1              /* original a0 goes to a8 */
40080071:	4080f0        	rotw	-1
    _bbci.l a8, 30, _WindowUnderflow8
40080074:	4878e7        	bbci	a8, 30, 400800c0 <_WindowUnderflow8>
    rotw    -1
40080077:	4080f0        	rotw	-1
    j               _WindowUnderflow12
4008007a:	003086        	j	40080140 <_WindowUnderflow12>
4008007d:	000000        	ill

40080080 <_WindowOverflow8>:

    .org    0x80
    .global _WindowOverflow8
_WindowOverflow8:

    s32e    a0, a9, -16     /* save a0 to call[j+1]'s stack frame */
40080080:	49c900        	s32e	a0, a9, -16
    l32e    a0, a1, -12     /* a0 <- call[j-1]'s sp
40080083:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1, a9, -12     /* save a1 to call[j+1]'s stack frame */
40080086:	49d910        	s32e	a1, a9, -12
    s32e    a2, a9,  -8     /* save a2 to call[j+1]'s stack frame */
40080089:	49e920        	s32e	a2, a9, -8
    s32e    a3, a9,  -4     /* save a3 to call[j+1]'s stack frame */
4008008c:	49f930        	s32e	a3, a9, -4
    s32e    a4, a0, -32     /* save a4 to call[j]'s stack frame */
4008008f:	498040        	s32e	a4, a0, -32
    s32e    a5, a0, -28     /* save a5 to call[j]'s stack frame */
40080092:	499050        	s32e	a5, a0, -28
    s32e    a6, a0, -24     /* save a6 to call[j]'s stack frame */
40080095:	49a060        	s32e	a6, a0, -24
    s32e    a7, a0, -20     /* save a7 to call[j]'s stack frame */
40080098:	49b070        	s32e	a7, a0, -20
    rfwo                    /* rotates back to call[i] position */
4008009b:	003400        	rfwo
	...

400800c0 <_WindowUnderflow8>:

    .org    0xC0
    .global _WindowUnderflow8
_WindowUnderflow8:

    l32e    a0, a9, -16     /* restore a0 from call[i+1]'s stack frame */
400800c0:	09c900        	l32e	a0, a9, -16
    l32e    a1, a9, -12     /* restore a1 from call[i+1]'s stack frame */
400800c3:	09d910        	l32e	a1, a9, -12
    l32e    a2, a9,  -8     /* restore a2 from call[i+1]'s stack frame */
400800c6:	09e920        	l32e	a2, a9, -8
    l32e    a7, a1, -12     /* a7 <- call[i-1]'s sp
400800c9:	09d170        	l32e	a7, a1, -12
                               (used to find end of call[i]'s frame) */
    l32e    a3, a9,  -4     /* restore a3 from call[i+1]'s stack frame */
400800cc:	09f930        	l32e	a3, a9, -4
    l32e    a4, a7, -32     /* restore a4 from call[i]'s stack frame */
400800cf:	098740        	l32e	a4, a7, -32
    l32e    a5, a7, -28     /* restore a5 from call[i]'s stack frame */
400800d2:	099750        	l32e	a5, a7, -28
    l32e    a6, a7, -24     /* restore a6 from call[i]'s stack frame */
400800d5:	09a760        	l32e	a6, a7, -24
    l32e    a7, a7, -20     /* restore a7 from call[i]'s stack frame */
400800d8:	09b770        	l32e	a7, a7, -20
    rfwu
400800db:	003500        	rfwu
	...

40080100 <_WindowOverflow12>:

    .org    0x100
    .global _WindowOverflow12
_WindowOverflow12:

    s32e    a0,  a13, -16   /* save a0 to call[j+1]'s stack frame */
40080100:	49cd00        	s32e	a0, a13, -16
    l32e    a0,  a1,  -12   /* a0 <- call[j-1]'s sp
40080103:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1,  a13, -12   /* save a1 to call[j+1]'s stack frame */
40080106:	49dd10        	s32e	a1, a13, -12
    s32e    a2,  a13,  -8   /* save a2 to call[j+1]'s stack frame */
40080109:	49ed20        	s32e	a2, a13, -8
    s32e    a3,  a13,  -4   /* save a3 to call[j+1]'s stack frame */
4008010c:	49fd30        	s32e	a3, a13, -4
    s32e    a4,  a0,  -48   /* save a4 to end of call[j]'s stack frame */
4008010f:	494040        	s32e	a4, a0, -48
    s32e    a5,  a0,  -44   /* save a5 to end of call[j]'s stack frame */
40080112:	495050        	s32e	a5, a0, -44
    s32e    a6,  a0,  -40   /* save a6 to end of call[j]'s stack frame */
40080115:	496060        	s32e	a6, a0, -40
    s32e    a7,  a0,  -36   /* save a7 to end of call[j]'s stack frame */
40080118:	497070        	s32e	a7, a0, -36
    s32e    a8,  a0,  -32   /* save a8 to end of call[j]'s stack frame */
4008011b:	498080        	s32e	a8, a0, -32
    s32e    a9,  a0,  -28   /* save a9 to end of call[j]'s stack frame */
4008011e:	499090        	s32e	a9, a0, -28
    s32e    a10, a0,  -24   /* save a10 to end of call[j]'s stack frame */
40080121:	49a0a0        	s32e	a10, a0, -24
    s32e    a11, a0,  -20   /* save a11 to end of call[j]'s stack frame */
40080124:	49b0b0        	s32e	a11, a0, -20
    rfwo                    /* rotates back to call[i] position */
40080127:	003400        	rfwo
	...

40080140 <_WindowUnderflow12>:

    .org 0x140
    .global _WindowUnderflow12
_WindowUnderflow12:

    l32e    a0,  a13, -16 /* restore a0 from call[i+1]'s stack frame */
40080140:	09cd00        	l32e	a0, a13, -16
    l32e    a1,  a13, -12 /* restore a1 from call[i+1]'s stack frame */
40080143:	09dd10        	l32e	a1, a13, -12
    l32e    a2,  a13,  -8 /* restore a2 from call[i+1]'s stack frame */
40080146:	09ed20        	l32e	a2, a13, -8
    l32e    a11, a1,  -12 /* a11 <- call[i-1]'s sp
40080149:	09d1b0        	l32e	a11, a1, -12
                           * (used to find end of call[i]'s frame) */
    l32e    a3,  a13,  -4 /* restore a3 from call[i+1]'s stack frame */
4008014c:	09fd30        	l32e	a3, a13, -4
    l32e    a4,  a11, -48 /* restore a4 from end of call[i]'s stack frame */
4008014f:	094b40        	l32e	a4, a11, -48
    l32e    a5,  a11, -44 /* restore a5 from end of call[i]'s stack frame */
40080152:	095b50        	l32e	a5, a11, -44
    l32e    a6,  a11, -40 /* restore a6 from end of call[i]'s stack frame */
40080155:	096b60        	l32e	a6, a11, -40
    l32e    a7,  a11, -36 /* restore a7 from end of call[i]'s stack frame */
40080158:	097b70        	l32e	a7, a11, -36
    l32e    a8,  a11, -32 /* restore a8 from end of call[i]'s stack frame */
4008015b:	098b80        	l32e	a8, a11, -32
    l32e    a9,  a11, -28 /* restore a9 from end of call[i]'s stack frame */
4008015e:	099b90        	l32e	a9, a11, -28
    l32e    a10, a11, -24 /* restore a10 from end of call[i]'s stack
40080161:	09aba0        	l32e	a10, a11, -24
    		       * frame */
    l32e    a11, a11, -20   /* restore a11 from end of call[i]'s stack
40080164:	09bbb0        	l32e	a11, a11, -20
    			 * frame */
    rfwu
40080167:	003500        	rfwu
	...

40080180 <_Level2Vector>:
 */

DEF_EXCINT 1, _handle_excint, xtensa_excint1_c

#if XCHAL_NMILEVEL >= 2
DEF_EXCINT 2, _handle_excint, xtensa_int2_c
40080180:	c4c112        	addi	a1, a1, -60
40080183:	7109      	s32i.n	a0, a1, 28
40080185:	9129      	s32i.n	a2, a1, 36
40080187:	a139      	s32i.n	a3, a1, 40
40080189:	03c200        	rsr.eps2	a0
4008018c:	5109      	s32i.n	a0, a1, 20
4008018e:	03b200        	rsr.epc2	a0
40080191:	6109      	s32i.n	a0, a1, 24
40080193:	000246        	j	400801a0 <_after_imms2>
	...

40080198 <_handle_excint_imm2>:
40080198:	081790        	lsx	f1, a7, a9
4008019b:	40          	.byte 0x40

4008019c <_c_handler_imm2>:
4008019c:	18cc      	bnez.n	a8, 400801a1 <_after_imms2+0x1>
4008019e:	4008      	l32i.n	a0, a0, 16

400801a0 <_after_imms2>:
400801a0:	ffff21        	l32r	a2, 4008019c <_c_handler_imm2>
400801a3:	fffd01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801a6:	0000a0        	jx	a0
	...

400801c0 <_Level3Vector>:
#endif

#if XCHAL_NMILEVEL >= 3
DEF_EXCINT 3, _handle_excint, xtensa_int3_c
400801c0:	c4c112        	addi	a1, a1, -60
400801c3:	7109      	s32i.n	a0, a1, 28
400801c5:	9129      	s32i.n	a2, a1, 36
400801c7:	a139      	s32i.n	a3, a1, 40
400801c9:	03c300        	rsr.eps3	a0
400801cc:	5109      	s32i.n	a0, a1, 20
400801ce:	03b300        	rsr.epc3	a0
400801d1:	6109      	s32i.n	a0, a1, 24
400801d3:	000146        	j	400801dc <_after_imms3>
	...

400801d8 <_c_handler_imm3>:
400801d8:	081920        	lsx	f1, a9, a2
400801db:	40          	.byte 0x40

400801dc <_after_imms3>:
400801dc:	ffff21        	l32r	a2, 400801d8 <_c_handler_imm3>
400801df:	ffee01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801e2:	0000a0        	jx	a0
	...

40080200 <_Level4Vector>:
#endif

#if XCHAL_NMILEVEL >= 4
DEF_EXCINT 4, _handle_excint, xtensa_int4_c
40080200:	c4c112        	addi	a1, a1, -60
40080203:	7109      	s32i.n	a0, a1, 28
40080205:	9129      	s32i.n	a2, a1, 36
40080207:	a139      	s32i.n	a3, a1, 40
40080209:	03c400        	rsr.eps4	a0
4008020c:	5109      	s32i.n	a0, a1, 20
4008020e:	03b400        	rsr.epc4	a0
40080211:	6109      	s32i.n	a0, a1, 24
40080213:	000146        	j	4008021c <_after_imms4>
	...

40080218 <_c_handler_imm4>:
40080218:	199c      	beqz.n	a9, 4008022d <_after_imms4+0x11>
4008021a:	4008      	l32i.n	a0, a0, 16

4008021c <_after_imms4>:
4008021c:	ffff21        	l32r	a2, 40080218 <_c_handler_imm4>
4008021f:	ffde01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080222:	0000a0        	jx	a0
	...

40080240 <_Level5Vector>:
#endif

#if XCHAL_NMILEVEL >= 5
DEF_EXCINT 5, _handle_excint, xtensa_int5_c
40080240:	c4c112        	addi	a1, a1, -60
40080243:	7109      	s32i.n	a0, a1, 28
40080245:	9129      	s32i.n	a2, a1, 36
40080247:	a139      	s32i.n	a3, a1, 40
40080249:	03c500        	rsr.eps5	a0
4008024c:	5109      	s32i.n	a0, a1, 20
4008024e:	03b500        	rsr.epc5	a0
40080251:	6109      	s32i.n	a0, a1, 24
40080253:	000146        	j	4008025c <_after_imms5>
	...

40080258 <_c_handler_imm5>:
40080258:	081a00        	lsx	f1, a10, a0
4008025b:	40          	.byte 0x40

4008025c <_after_imms5>:
4008025c:	ffff21        	l32r	a2, 40080258 <_c_handler_imm5>
4008025f:	ffce01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080262:	0000a0        	jx	a0
	...

40080280 <_Level6Vector>:
#endif

#if XCHAL_NMILEVEL >= 6
DEF_EXCINT 6, _handle_excint, xtensa_int6_c
40080280:	c4c112        	addi	a1, a1, -60
40080283:	7109      	s32i.n	a0, a1, 28
40080285:	9129      	s32i.n	a2, a1, 36
40080287:	a139      	s32i.n	a3, a1, 40
40080289:	03c600        	rsr.eps6	a0
4008028c:	5109      	s32i.n	a0, a1, 20
4008028e:	03b600        	rsr.epc6	a0
40080291:	6109      	s32i.n	a0, a1, 24
40080293:	000146        	j	4008029c <_after_imms6>
	...

40080298 <_c_handler_imm6>:
40080298:	1a58      	l32i.n	a5, a10, 4
4008029a:	4008      	l32i.n	a0, a0, 16

4008029c <_after_imms6>:
4008029c:	ffff21        	l32r	a2, 40080298 <_c_handler_imm6>
4008029f:	ffbe01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802a2:	0000a0        	jx	a0
	...

400802c0 <_Level7Vector>:
#endif

#if XCHAL_NMILEVEL >= 7
DEF_EXCINT 7, _handle_excint, xtensa_int7_c
400802c0:	c4c112        	addi	a1, a1, -60
400802c3:	7109      	s32i.n	a0, a1, 28
400802c5:	9129      	s32i.n	a2, a1, 36
400802c7:	a139      	s32i.n	a3, a1, 40
400802c9:	03c700        	rsr.eps7	a0
400802cc:	5109      	s32i.n	a0, a1, 20
400802ce:	03b700        	rsr.epc7	a0
400802d1:	6109      	s32i.n	a0, a1, 24
400802d3:	000146        	j	400802dc <_after_imms7>
	...

400802d8 <_c_handler_imm7>:
400802d8:	081a70        	lsx	f1, a10, a7
400802db:	40          	.byte 0x40

400802dc <_after_imms7>:
400802dc:	ffff21        	l32r	a2, 400802d8 <_c_handler_imm7>
400802df:	ffae01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802e2:	0000a0        	jx	a0
	...

40080300 <_KernelExceptionVector>:
 * out of simple caution in case app code clears the UM bit by mistake.
 */
.pushsection .KernelExceptionVector.text, "ax"
.global _KernelExceptionVector
_KernelExceptionVector:
	j _Level1Vector
40080300:	015b06        	j	40080870 <_Level1Vector>
	...

40080340 <_Level1RealVector>:
	wsr.excsave1 a0
40080340:	13d100        	wsr.excsave1	a0
	rsr.exccause a0
40080343:	03e800        	rsr.exccause	a0
	bnei a0, EXCCAUSE_ALLOCA, _not_alloca
40080346:	025066        	bnei	a0, 5, 4008034c <_not_alloca>
	j _xt_alloca_exc
40080349:	ff40c6        	j	40080050 <_xt_alloca_exc>

4008034c <_not_alloca>:
	rsr.excsave1 a0
4008034c:	03d100        	rsr.excsave1	a0
	j _Level1Vector
4008034f:	014746        	j	40080870 <_Level1Vector>
	...

400803c0 <_DoubleExceptionVector>:
.pushsection .DoubleExceptionVector.text, "ax"
.global _DoubleExceptionVector
_DoubleExceptionVector:
#if XCHAL_HAVE_DEBUG
/* Signals an unhandled double exception */
1:	break	1, 4
400803c0:	004140        	break	1, 4
#else
1:
#endif
	j	1b
400803c3:	fffe46        	j	400803c0 <_DoubleExceptionVector>
	...

Disassembly of section text:

40080550 <__start-0x2bc>:
40080550:	080000        	lsx	f0, a0, a0
40080553:	096040        	l32e	a4, a0, -40
40080556:	3ffb      	addi.n	a3, a15, 15
40080558:	0658      	l32i.n	a5, a6, 0
4008055a:	3ffb      	addi.n	a3, a15, 15
4008055c:	808c      	beqz.n	a0, 40080568 <_iram_text_start+0x18>
4008055e:	483ff4        	mula.da.ll.ldinc	m3, a15, m0, a15
40080561:	3ff5f0        	f64cmph	a15, a5, a15, 3
40080564:	ff          	.byte 0xff
40080565:	bf          	.byte 0xbf
40080566:	ff          	.byte 0xff
40080567:	ff          	.byte 0xff
40080568:	040023        	lsi	f2, a0, 16
4008056b:	003000        	rfe
4008056e:	103ff0        	and	a3, a15, a15
40080571:	fb09      	s32i.n	a0, a11, 60
40080573:	3f          	.byte 0x3f
40080574:	fb0290        	f64addc	a9, a2, 0, 0
40080577:	3f          	.byte 0x3f
40080578:	fb08a4        	lsi	f10, a8, 0x3ec
4008057b:	3f          	.byte 0x3f
4008057c:	fb0296        	bltz	a2, 40080530 <__init_APPLICATION_start+0xe0>
4008057f:	3f          	.byte 0x3f
40080580:	fb08a0        	f64addc	a10, a8, 0, 0
40080583:	3f          	.byte 0x3f
40080584:	029c      	beqz.n	a2, 40080598 <_iram_text_start+0x48>
40080586:	3ffb      	addi.n	a3, a15, 15
40080588:	02bb      	addi.n	a0, a2, 11
4008058a:	3ffb      	addi.n	a3, a15, 15
4008058c:	fb02f1        	l32r	a15, 4007f194 <esp32_rom_gpio_matrix_out+0x75288>
4008058f:	3f          	.byte 0x3f
40080590:	fb0327        	bnone	a3, a2, 4008058f <_iram_text_start+0x3f>
40080593:	3f          	.byte 0x3f
40080594:	033d      	mov.n	a3, a3
40080596:	3ffb      	addi.n	a3, a15, 15
40080598:	fb0366        	bnei	a3, -1, 40080597 <_iram_text_start+0x47>
4008059b:	3f          	.byte 0x3f
4008059c:	fb0393        	lsi	f9, a3, 0x3ec
4008059f:	3f          	.byte 0x3f
400805a0:	03bd      	mov.n	a11, a3
400805a2:	3ffb      	addi.n	a3, a15, 15
400805a4:	fb03e4        	lsi	f14, a3, 0x3ec
400805a7:	3f          	.byte 0x3f
400805a8:	fb0427        	bnone	a4, a2, 400805a7 <_iram_text_start+0x57>
400805ab:	3f          	.byte 0x3f
400805ac:	5e          	.byte 0x5e
400805ad:	3ffb04        	lsi	f0, a11, 252
400805b0:	047b      	addi.n	a0, a4, 7
400805b2:	3ffb      	addi.n	a3, a15, 15
400805b4:	fb0492        	l8ui	a9, a4, 251
400805b7:	3f          	.byte 0x3f
400805b8:	fb04a2        	l8ui	a10, a4, 251
400805bb:	3f          	.byte 0x3f
400805bc:	ae          	.byte 0xae
400805bd:	3ffb04        	lsi	f0, a11, 252
400805c0:	000000        	ill
400805c3:	3e          	.byte 0x3e
400805c4:	fb04c7        	bnone	a4, a12, 400805c3 <_iram_text_start+0x73>
400805c7:	3f          	.byte 0x3f
400805c8:	0009c4        	lsi	f12, a9, 0
400805cb:	04e300        	extui	a14, a0, 3, 1
400805ce:	3ffb      	addi.n	a3, a15, 15
400805d0:	0098      	l32i.n	a9, a0, 0
400805d2:	3ffb      	addi.n	a3, a15, 15
400805d4:	0b8c      	beqz.n	a11, 400805d8 <_iram_text_start+0x88>
400805d6:	4008      	l32i.n	a0, a0, 16
400805d8:	ff          	.byte 0xff
400805d9:	7f          	.byte 0x7f
400805da:	ff0000        	f64cmph	a0, a0, a0, 15
400805dd:	ff          	.byte 0xff
400805de:	000003        	lsi	f0, a0, 0
400805e1:	000000        	ill
400805e4:	009200        	all4	b0, b0:b1:b2:b3
400805e7:	04f440        	extui	a15, a4, 4, 1
400805ea:	3ffb      	addi.n	a3, a15, 15
400805ec:	08a8      	l32i.n	a10, a8, 0
400805ee:	3ffb      	addi.n	a3, a15, 15
400805f0:	081160        	lsx	f1, a1, a6
400805f3:	015040        	slli	a5, a0, 28
400805f6:	3ffb      	addi.n	a3, a15, 15
400805f8:	f48070        	extui	a8, a7, 0, 16
400805fb:	3f          	.byte 0x3f
400805fc:	0148      	l32i.n	a4, a1, 0
400805fe:	3ffb      	addi.n	a3, a15, 15
40080600:	c4b400        	extui	a11, a0, 4, 13
40080603:	600004        	lsi	f0, a0, 0x180
40080606:	043ff6        	bgeui	a15, 3, 4008060e <_iram_text_start+0xbe>
40080609:	3ff660        	f64cmph	a15, a6, a6, 3
4008060c:	ff          	.byte 0xff
4008060d:	ff          	.byte 0xff
4008060e:	ff          	.byte 0xff
4008060f:	8000e7        	bnone	a0, a14, 40080593 <_iram_text_start+0x43>
40080612:	bf3ff4        	lsi	f15, a15, 0x2fc
40080615:	fbfa      	add.n	a15, a11, a15
40080617:	ff          	.byte 0xff
40080618:	807c      	movi.n	a0, -8
4008061a:	ff3ff4        	lsi	f15, a15, 0x3fc
4008061d:	ffffc7        	bbsi	a15, 28, 40080620 <_iram_text_start+0xd0>
40080620:	002000        	isync
40080623:	04ff00        	extui	a15, a0, 15, 1
40080626:	3ffb      	addi.n	a3, a15, 15
40080628:	003c      	movi.n	a0, 48
4008062a:	003ff0        	lsi	f15, a15, 0
4008062d:	080000        	lsx	f0, a0, a0
40080630:	6008      	l32i.n	a0, a0, 24
40080632:	783ff6        	bgeui	a15, 3, 400806ae <_iram_text_start+0x15e>
40080635:	400092        	l8ui	a9, a0, 64
40080638:	0041a4        	lsi	f10, a1, 0
4008063b:	052a40        	extui	a2, a4, 26, 1
4008063e:	3ffb      	addi.n	a3, a15, 15
40080640:	f49000        	extui	a9, a0, 0, 16
40080643:	3f          	.byte 0x3f
40080644:	000800        	lsi	f0, a8, 0
40080647:	700000        	lsi	f0, a0, 0x1c0
4008064a:	1d0000        	lsi	f0, a0, 116
4008064d:	3ffb05        	call0	400c0600 <_iram_text_end+0x3ca0a>
40080650:	f44000        	extui	a4, a0, 0, 16
40080653:	3f          	.byte 0x3f
40080654:	08ac      	beqz.n	a8, 40080678 <_iram_text_start+0x128>
40080656:	3ffb      	addi.n	a3, a15, 15
40080658:	7619f1        	l32r	a15, 4005debc <esp32_rom_gpio_matrix_out+0x53fb0>
4008065b:	5dc005        	call0	400de25c <_iram_text_end+0x5a666>
4008065e:	000000        	ill
40080661:	000080        	ret
40080664:	bb0b      	addi.n	a11, a11, -1
40080666:	bf0002        	l8ui	a0, a0, 191
40080669:	005d      	mov.n	a5, a0
4008066b:	178b00        	lsi	f0, a11, 92
4008066e:	4008      	l32i.n	a0, a0, 16
40080670:	080f00        	lsx	f0, a15, a0
40080673:	002040        	lsi	f4, a0, 0
40080676:	000005        	call0	40080678 <_iram_text_start+0x128>
40080679:	000800        	lsi	f0, a8, 0
4008067c:	100000        	and	a0, a0, a0
4008067f:	000000        	ill
40080682:	500020        	lsi	f2, a0, 0x140
40080685:	400804        	lsi	f0, a8, 0x100
40080688:	400000        	ssr	a0
4008068b:	000000        	ill
4008068e:	000080        	ret
40080691:	200000        	or	a0, a0, a0
40080694:	408800        	lsi	f0, a8, 0x100
40080697:	000000        	ill
4008069a:	000100        	lsi	f0, a1, 0
4008069d:	020000        	andb	b0, b0, b0
400806a0:	000000        	ill
400806a3:	000010        	lsi	f1, a0, 0
400806a6:	004000        	break	0, 0
400806a9:	030000        	rsr.lbeg	a0
400806ac:	010000        	slli	a0, a0, 32
400806af:	000000        	ill
400806b2:	000400        	lsi	f0, a4, 0
400806b5:	800000        	add	a0, a0, a0
400806b8:	004000        	break	0, 0
400806bb:	100000        	and	a0, a0, a0
400806be:	000000        	ill
400806c1:	000200        	lsi	f0, a2, 0
400806c4:	040000        	extui	a0, a0, 0, 1
400806c7:	300000        	xor	a0, a0, a0
400806ca:	ac0000        	lsi	f0, a0, 0x2b0
400806cd:	3ffb00        	f64cmph	a15, a11, a0, 3
400806d0:	060000        	lsi	f0, a0, 24
400806d3:	102200        	and	a2, a2, a0
400806d6:	0ffd      	mov.n	a15, a15
400806d8:	7f          	.byte 0x7f
400806d9:	fc1c      	movi.n	a12, 31
400806db:	ff          	.byte 0xff
400806dc:	fb0050        	f64addc	a5, a0, 0, 0
400806df:	3f          	.byte 0x3f
400806e0:	fb0040        	f64addc	a4, a0, 0, 0
400806e3:	3f          	.byte 0x3f
400806e4:	fb0523        	lsi	f2, a5, 0x3ec
400806e7:	3f          	.byte 0x3f
400806e8:	0958      	l32i.n	a5, a9, 0
400806ea:	3ffb      	addi.n	a3, a15, 15
400806ec:	681c      	movi.n	a8, 22
400806ee:	2c4000        	lsi	f0, a0, 176
400806f1:	3ff530        	f64cmph	a15, a5, a3, 3
400806f4:	f53024        	lsi	f2, a0, 0x3d4
400806f7:	3f          	.byte 0x3f
400806f8:	3018      	l32i.n	a1, a0, 12
400806fa:	ff3ff5        	call12	4007faf8 <esp32_rom_gpio_matrix_out+0x75bec>
400806fd:	cf          	.byte 0xcf
400806fe:	ff          	.byte 0xff
400806ff:	ff          	.byte 0xff
40080700:	301c      	movi.n	a0, 19
40080702:	5c6001        	l32r	a0, 40057884 <esp32_rom_gpio_matrix_out+0x4d978>
40080705:	3ffb05        	call0	400c06b8 <_iram_text_end+0x3cac2>
40080708:	fb0563        	lsi	f6, a5, 0x3ec
4008070b:	3f          	.byte 0x3f
4008070c:	000a16        	beqz	a10, 40080710 <_iram_text_start+0x1c0>
4008070f:	9f0c00        	f64cmph	a0, a12, a0, 9
40080712:	dc4000        	lsi	f0, a0, 0x370
40080715:	9e          	.byte 0x9e
40080716:	104000        	and	a4, a0, a0
40080719:	3ff530        	f64cmph	a15, a5, a3, 3
4008071c:	f53004        	lsi	f0, a0, 0x3d4
4008071f:	3f          	.byte 0x3f
40080720:	ff          	.byte 0xff
40080721:	fffff7        	bbsi	a15, 31, 40080724 <_iram_text_start+0x1d4>
40080724:	018c      	beqz.n	a1, 40080728 <_iram_text_start+0x1d8>
40080726:	3ffb      	addi.n	a3, a15, 15
40080728:	f53000        	extui	a3, a0, 16, 16
4008072b:	3f          	.byte 0x3f
4008072c:	3038      	l32i.n	a3, a0, 12
4008072e:	403ff5        	call12	400c0b2c <_iram_text_end+0x3cf36>
40080731:	3ff530        	f64cmph	a15, a5, a3, 3
40080734:	f53044        	lsi	f4, a0, 0x3d4
40080737:	3f          	.byte 0x3f
40080738:	3048      	l32i.n	a4, a0, 12
4008073a:	4c3ff5        	call12	400ccb38 <_iram_text_end+0x48f42>
4008073d:	3ff530        	f64cmph	a15, a5, a3, 3
40080740:	f53030        	extui	a3, a3, 16, 16
40080743:	3f          	.byte 0x3f
40080744:	f53034        	lsi	f3, a0, 0x3d4
40080747:	3f          	.byte 0x3f
40080748:	300c      	movi.n	a0, 3
4008074a:	403ff5        	call12	400c0b48 <_iram_text_end+0x3cf52>
4008074d:	030d      	mov.n	a0, a3
4008074f:	302800        	xor	a2, a8, a0
40080752:	e83ff5        	call12	40068b50 <esp32_rom_gpio_matrix_out+0x5ec44>
40080755:	000003        	lsi	f0, a0, 0
40080758:	f53020        	extui	a3, a2, 16, 16
4008075b:	3f          	.byte 0x3f
4008075c:	0f4240        	f64cmph	a4, a2, a4, 0
4008075f:	86a000        	lsi	f0, a0, 0x218
40080762:	800001        	l32r	a0, 40060764 <esp32_rom_gpio_matrix_out+0x56858>
40080765:	061a      	add.n	a0, a6, a1
40080767:	e14000        	lsi	f0, a0, 0x384
4008076a:	400033        	lsi	f3, a0, 0x100
4008076d:	4c4b      	addi.n	a4, a12, 4
4008076f:	300800        	xor	a0, a8, a0
40080772:	ff3ff5        	call12	4007fb70 <esp32_rom_gpio_matrix_out+0x75c64>
40080775:	ff          	.byte 0xff
40080776:	ff          	.byte 0xff
40080777:	ff          	.byte 0xff
40080778:	3058      	l32i.n	a5, a0, 12
4008077a:	003ff5        	call12	40080b78 <print_digits+0xa0>
4008077d:	0018      	l32i.n	a1, a0, 0
4008077f:	140100        	extui	a0, a0, 1, 2
40080782:	010000        	slli	a0, a0, 32
40080785:	080000        	lsx	f0, a0, a0
40080788:	800101        	l32r	a0, 4006078c <esp32_rom_gpio_matrix_out+0x56880>
4008078b:	027c00        	andb	b7, b12, b0
4008078e:	3ffb      	addi.n	a3, a15, 15
40080790:	fb0000        	f64addc	a0, a0, 0, 0
40080793:	3f          	.byte 0x3f
40080794:	fb0080        	f64addc	a8, a0, 0, 0
40080797:	3f          	.byte 0x3f
40080798:	0959      	s32i.n	a5, a9, 0
4008079a:	3ffb      	addi.n	a3, a15, 15
4008079c:	045d      	mov.n	a5, a4
4008079e:	3ffb      	addi.n	a3, a15, 15
400807a0:	056a      	add.n	a0, a5, a6
400807a2:	3ffb      	addi.n	a3, a15, 15
400807a4:	fb0586        	j	4007f3be <esp32_rom_gpio_matrix_out+0x754b2>
400807a7:	3f          	.byte 0x3f
400807a8:	07d8      	l32i.n	a13, a7, 0
400807aa:	3ffb      	addi.n	a3, a15, 15
400807ac:	2708      	l32i.n	a0, a7, 8
400807ae:	4008      	l32i.n	a0, a0, 16
400807b0:	fb1160        	f64addc	a6, a1, 0, 1
400807b3:	3f          	.byte 0x3f
400807b4:	05ad      	mov.n	a10, a5
400807b6:	3ffb      	addi.n	a3, a15, 15
400807b8:	33ac      	beqz.n	a3, 400807df <_iram_text_start+0x28f>
400807ba:	4008      	l32i.n	a0, a0, 16
400807bc:	fb0960        	f64addc	a6, a9, 0, 0
400807bf:	3f          	.byte 0x3f
400807c0:	0658      	l32i.n	a5, a6, 0
400807c2:	3ffb      	addi.n	a3, a15, 15
400807c4:	fb2160        	f64addc	a6, a1, 1, 0
400807c7:	3f          	.byte 0x3f
400807c8:	fb0d60        	f64addc	a6, a13, 0, 0
400807cb:	3f          	.byte 0x3f
400807cc:	0718      	l32i.n	a1, a7, 0
400807ce:	3ffb      	addi.n	a3, a15, 15
400807d0:	fb2960        	f64addc	a6, a9, 1, 0
400807d3:	3f          	.byte 0x3f
400807d4:	fb0940        	f64addc	a4, a9, 0, 0
400807d7:	3f          	.byte 0x3f
400807d8:	090c      	movi.n	a9, 0
400807da:	3ffb      	addi.n	a3, a15, 15
400807dc:	0908      	l32i.n	a0, a9, 0
400807de:	3ffb      	addi.n	a3, a15, 15
400807e0:	094c      	movi.n	a9, 64
400807e2:	3ffb      	addi.n	a3, a15, 15
400807e4:	095a      	add.n	a0, a9, a5
400807e6:	3ffb      	addi.n	a3, a15, 15
400807e8:	2a78      	l32i.n	a7, a10, 8
400807ea:	4008      	l32i.n	a0, a0, 16
400807ec:	000a      	add.n	a0, a0, a0
400807ee:	5a0000        	msub.s	f0, f0, f0
400807f1:	fb09      	s32i.n	a0, a11, 60
400807f3:	3f          	.byte 0x3f
400807f4:	fb0084        	lsi	f8, a0, 0x3ec
400807f7:	3f          	.byte 0x3f
400807f8:	fb0954        	lsi	f5, a9, 0x3ec
400807fb:	3f          	.byte 0x3f
400807fc:	011c      	movi.n	a1, 16
400807fe:	3ffb      	addi.n	a3, a15, 15
40080800:	ff          	.byte 0xff
40080801:	ff          	.byte 0xff
40080802:	ff          	.byte 0xff
40080803:	7f          	.byte 0x7f
40080804:	0898      	l32i.n	a9, a8, 0
40080806:	3ffb      	addi.n	a3, a15, 15
40080808:	fb0084        	lsi	f8, a0, 0x3ec
4008080b:	3f          	.byte 0x3f

4008080c <__start>:
 * This is written in C rather than assembly since, during the port bring up,
 * Zephyr is being booted by the Espressif bootloader.  With it, the C stack
 * is already set up.
 */
void __attribute__((section(".iram1"))) __start(void)
{
4008080c:	004136        	entry	a1, 32
	extern uint32_t _init_start;
	extern uint32_t _bss_start;
	extern uint32_t _bss_end;

	/* Move the exception vector table to IRAM. */
	__asm__ __volatile__ (
4008080f:	ff5081        	l32r	a8, 40080550 <_iram_text_start>
40080812:	13e780        	wsr.vecbase	a8
		:
		: "r"(&_init_start));

	/* Zero out BSS.  Clobber _bss_start to avoid memset() elision. */
	(void)memset(&_bss_start, 0,
		     (&_bss_end - &_bss_start) * sizeof(_bss_start));
40080815:	ff50a1        	l32r	a10, 40080558 <_iram_text_start+0x8>
	(void)memset(&_bss_start, 0,
40080818:	ff4fc1        	l32r	a12, 40080554 <_iram_text_start+0x4>
4008081b:	00a0b2        	movi	a11, 0
4008081e:	c0cca0        	sub	a12, a12, a10
40080821:	02c565        	call8	40083478 <memset>
		: "memory");

	/* The watchdog timer is enabled in the bootloader.  We're done booting,
	 * so disable it.
	 */
	*wdt_rtc_reg &= ~RTC_CNTL_WDT_FLASHBOOT_MOD_EN;
40080824:	ff4e91        	l32r	a9, 4008055c <_iram_text_start+0xc>
40080827:	ffaba2        	movi	a10, 0xfffffbff
4008082a:	0020c0        	memw
4008082d:	002982        	l32i	a8, a9, 0
40080830:	1088a0        	and	a8, a8, a10
40080833:	0020c0        	memw
40080836:	0989      	s32i.n	a8, a9, 0
	*wdt_timg_reg &= ~TIMG_WDT_FLASHBOOT_MOD_EN;
40080838:	ff4a91        	l32r	a9, 40080560 <_iram_text_start+0x10>
4008083b:	ff4aa1        	l32r	a10, 40080564 <_iram_text_start+0x14>
4008083e:	0020c0        	memw
40080841:	0988      	l32i.n	a8, a9, 0
40080843:	1088a0        	and	a8, a8, a10
40080846:	0020c0        	memw
40080849:	0989      	s32i.n	a8, a9, 0

	/* Disable normal interrupts. */
	__asm__ __volatile__ (
4008084b:	ff4781        	l32r	a8, 40080568 <_iram_text_start+0x18>
4008084e:	13e680        	wsr.ps	a8
		"wsr %0, PS"
		:
		: "r"(PS_INTLEVEL(XCHAL_EXCM_LEVEL) | PS_UM | PS_WOE));

	/* Disable CPU1 while we figure out how to have SMP in Zephyr. */
	*app_cpu_config_reg &= ~DPORT_APPCPU_CLKGATE_EN;
40080851:	ff4691        	l32r	a9, 4008056c <_iram_text_start+0x1c>
40080854:	ea7c      	movi.n	a10, -2
40080856:	0020c0        	memw
40080859:	0988      	l32i.n	a8, a9, 0
4008085b:	1088a0        	and	a8, a8, a10
4008085e:	0020c0        	memw
40080861:	006982        	s32i	a8, a9, 0

	/* Initialize the architecture CPU pointer.  Some of the
	 * initialization code wants a valid _current before
	 * arch_kernel_init() is invoked.
	 */
	__asm__ volatile("wsr.MISC0 %0; rsync" : : "r"(&_kernel.cpus[0]));
40080864:	ff4381        	l32r	a8, 40080570 <_iram_text_start+0x20>
40080867:	13f480        	wsr.misc0	a8
4008086a:	002010        	rsync


	/* Start Zephyr */
	z_cstart();
4008086d:	01ed25        	call8	40082740 <z_cstart>

40080870 <_Level1Vector>:
DEF_EXCINT 1, _handle_excint, xtensa_excint1_c
40080870:	c4c112        	addi	a1, a1, -60
40080873:	7109      	s32i.n	a0, a1, 28
40080875:	9129      	s32i.n	a2, a1, 36
40080877:	a139      	s32i.n	a3, a1, 40
40080879:	03e600        	rsr.ps	a0
4008087c:	026c      	movi.n	a2, -32
4008087e:	100020        	and	a0, a0, a2
40080881:	5109      	s32i.n	a0, a1, 20
40080883:	03b100        	rsr.epc1	a0
40080886:	6109      	s32i.n	a0, a1, 24
40080888:	000206        	j	40080894 <_after_imms1>
	...

4008088c <_handle_excint_imm1>:
4008088c:	081790        	lsx	f1, a7, a9
4008088f:	40          	.byte 0x40

40080890 <_c_handler_imm1>:
40080890:	081aa4        	lsi	f10, a10, 32
40080893:	40          	.byte 0x40

40080894 <_after_imms1>:
40080894:	ffff21        	l32r	a2, 40080890 <_c_handler_imm1>
40080897:	fffd01        	l32r	a0, 4008088c <_handle_excint_imm1>
4008089a:	0000a0        	jx	a0
4008089d:	000000        	ill

400808a0 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
400808a0:	004136        	entry	a1, 32
	return k_sleep(Z_TIMEOUT_MS(ms));
400808a3:	00a0b2        	movi	a11, 0
400808a6:	5322b0        	max	a2, a2, a11
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
400808a9:	0aa0b2        	movi	a11, 10
400808ac:	82a2b0        	mull	a10, a2, a11
400808af:	b2b2b0        	mulsh	a11, a2, a11
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
400808b2:	026065        	call8	40082eb8 <z_impl_k_sleep>
}
400808b5:	202aa0        	or	a2, a10, a10
400808b8:	f01d      	retw.n
	...

400808bc <main>:

const float LM75A_DEGREES_RESOLUTION = 0.125;
const int LM75A_REG_ADDR_TEMP = 0;

void main(void)
{   
400808bc:	008136        	entry	a1, 64
	uint8_t cmp_data[16];
	uint8_t data[16];
	int i, ret;
	uint16_t temp = 0x00;
    uint8_t pointer = 0x00;
400808bf:	00a042        	movi	a4, 0
400808c2:	104142        	s8i	a4, a1, 16
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
400808c5:	ff2ba1        	l32r	a10, 40080574 <_iram_text_start+0x24>
400808c8:	01dc25        	call8	4008268c <z_impl_device_get_binding>

	i2c_dev = device_get_binding(I2C_DEV);
400808cb:	ff2b21        	l32r	a2, 40080578 <_iram_text_start+0x28>
400808ce:	0062a2        	s32i	a10, a2, 0
400808d1:	ff2aa1        	l32r	a10, 4008057c <_iram_text_start+0x2c>
400808d4:	01db65        	call8	4008268c <z_impl_device_get_binding>
	i2c_dev1 = device_get_binding(I2C_DEV1);
400808d7:	ff2a31        	l32r	a3, 40080580 <_iram_text_start+0x30>
400808da:	03a9      	s32i.n	a10, a3, 0
	if (!i2c_dev1) {
400808dc:	8acc      	bnez.n	a10, 400808e8 <main+0x2c>
		printk("I2C: Device driver not found.\n");
400808de:	ff29a1        	l32r	a10, 40080584 <_iram_text_start+0x34>
400808e1:	005fa5        	call8	40080edc <printk>
		printk("Read 0x%X from address 0x01.\n", data[0]);
	}
    */
	
	
}
400808e4:	f01d      	retw.n
400808e6:	610000        	xsr.lbeg	a0
	printk("----------->> -------------------- <<---------------\n");
400808e9:	ff28      	l32i.n	a2, a15, 60
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808eb:	350c      	movi.n	a5, 3
	printk("----------->> -------------------- <<---------------\n");
400808ed:	06ad      	mov.n	a10, a6
400808ef:	005ee5        	call8	40080edc <printk>
    printk("---------->>   *** I2C LM75A ***   <<--------------\n\n");
400808f2:	ff26a1        	l32r	a10, 4008058c <_iram_text_start+0x3c>
400808f5:	005e65        	call8	40080edc <printk>
	printk("I2C LM75A - Pruebas.\n");
400808f8:	ff26a1        	l32r	a10, 40080590 <_iram_text_start+0x40>
400808fb:	005e25        	call8	40080edc <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808fe:	02a8      	l32i.n	a10, a2, 0
40080900:	8d4c      	movi.n	a13, 72
40080902:	1c0c      	movi.n	a12, 1
40080904:	10c1b2        	addi	a11, a1, 16
	pointer = 0x03; //Tos register pointer - 5000h por defecto
40080907:	104152        	s8i	a5, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008090a:	02b1a5        	call8	40083424 <i2c_write>
	k_msleep(5);
4008090d:	5a0c      	movi.n	a10, 5
4008090f:	fff925        	call8	400808a0 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080912:	02a8      	l32i.n	a10, a2, 0
40080914:	8d4c      	movi.n	a13, 72
40080916:	2c0c      	movi.n	a12, 2
40080918:	01bd      	mov.n	a11, a1
4008091a:	02aea5        	call8	40083404 <i2c_read>
	k_msleep(5);
4008091d:	5a0c      	movi.n	a10, 5
4008091f:	fff825        	call8	400808a0 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
40080922:	ff1c71        	l32r	a7, 40080594 <_iram_text_start+0x44>
40080925:	0101c2        	l8ui	a12, a1, 1
40080928:	0001b2        	l8ui	a11, a1, 0
4008092b:	07ad      	mov.n	a10, a7
4008092d:	005ae5        	call8	40080edc <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080930:	02a8      	l32i.n	a10, a2, 0
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
40080932:	280c      	movi.n	a8, 2
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080934:	8d4c      	movi.n	a13, 72
40080936:	1c0c      	movi.n	a12, 1
40080938:	10c1b2        	addi	a11, a1, 16
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
4008093b:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008093e:	02ae65        	call8	40083424 <i2c_write>
	k_msleep(5);
40080941:	5a0c      	movi.n	a10, 5
40080943:	fff5e5        	call8	400808a0 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080946:	02a8      	l32i.n	a10, a2, 0
40080948:	8d4c      	movi.n	a13, 72
4008094a:	2c0c      	movi.n	a12, 2
4008094c:	01bd      	mov.n	a11, a1
4008094e:	02ab65        	call8	40083404 <i2c_read>
	k_msleep(5);
40080951:	5a0c      	movi.n	a10, 5
40080953:	fff4e5        	call8	400808a0 <k_msleep>
	printk("----->> Hysteresis - Thyst Register: %x|%x\n\n", data[0], data[1]);
40080956:	0101c2        	l8ui	a12, a1, 1
40080959:	0001b2        	l8ui	a11, a1, 0
4008095c:	ff0fa1        	l32r	a10, 40080598 <_iram_text_start+0x48>
4008095f:	0057e5        	call8	40080edc <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080962:	02a8      	l32i.n	a10, a2, 0
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080964:	180c      	movi.n	a8, 1
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080966:	8d4c      	movi.n	a13, 72
40080968:	1c0c      	movi.n	a12, 1
4008096a:	10c1b2        	addi	a11, a1, 16
	pointer = 0x01; //Configuration register pointer - 00h por defecto
4008096d:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080970:	02ab25        	call8	40083424 <i2c_write>
	k_msleep(5);
40080973:	5a0c      	movi.n	a10, 5
40080975:	fff2a5        	call8	400808a0 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 1, LM75A_DEFAULT_ADDRESS);
40080978:	02a8      	l32i.n	a10, a2, 0
4008097a:	8d4c      	movi.n	a13, 72
4008097c:	1c0c      	movi.n	a12, 1
4008097e:	01bd      	mov.n	a11, a1
40080980:	02a825        	call8	40083404 <i2c_read>
	k_msleep(5);
40080983:	5a0c      	movi.n	a10, 5
40080985:	fff1a5        	call8	400808a0 <k_msleep>
	printk("----->>  Configuration - Register %x|%x\n\n", data[0], data[1]);
40080988:	0101c2        	l8ui	a12, a1, 1
4008098b:	0001b2        	l8ui	a11, a1, 0
4008098e:	ff03a1        	l32r	a10, 4008059c <_iram_text_start+0x4c>
40080991:	0054a5        	call8	40080edc <printk>
	printk("----->>  Writing - Tos Register %x|%x\n", data[0], data[1]);
40080994:	0101c2        	l8ui	a12, a1, 1
40080997:	0001b2        	l8ui	a11, a1, 0
4008099a:	ff01a1        	l32r	a10, 400805a0 <_iram_text_start+0x50>
4008099d:	0053e5        	call8	40080edc <printk>
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
400809a0:	02a8      	l32i.n	a10, a2, 0
400809a2:	8d4c      	movi.n	a13, 72
400809a4:	3c0c      	movi.n	a12, 3
400809a6:	01bd      	mov.n	a11, a1
	data[1] = temp >> 8;//MSByte
400809a8:	014142        	s8i	a4, a1, 1
	data[2] = (uint16_t)temp & 0x0F;//LSByte
400809ab:	024142        	s8i	a4, a1, 2
	pointer = 0x03;
400809ae:	104152        	s8i	a5, a1, 16
	data[0] = pointer;
400809b1:	004152        	s8i	a5, a1, 0
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
400809b4:	02a6e5        	call8	40083424 <i2c_write>
	printk("----->>  Tos Register wrote temp: <%x>, MSByte <%x>, LSByte <%x>\n\n", temp, data[1], data[2]);
400809b7:	0201d2        	l8ui	a13, a1, 2
400809ba:	0101c2        	l8ui	a12, a1, 1
400809bd:	fef9a1        	l32r	a10, 400805a4 <_iram_text_start+0x54>
400809c0:	0b3c      	movi.n	a11, 48
400809c2:	0051a5        	call8	40080edc <printk>
	k_msleep(5);
400809c5:	5a0c      	movi.n	a10, 5
400809c7:	ffeda5        	call8	400808a0 <k_msleep>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809ca:	02a8      	l32i.n	a10, a2, 0
400809cc:	8d4c      	movi.n	a13, 72
400809ce:	1c0c      	movi.n	a12, 1
400809d0:	10c1b2        	addi	a11, a1, 16
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400809d3:	104152        	s8i	a5, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809d6:	02a4e5        	call8	40083424 <i2c_write>
	k_msleep(5);
400809d9:	5a0c      	movi.n	a10, 5
400809db:	ffec65        	call8	400808a0 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809de:	02a8      	l32i.n	a10, a2, 0
400809e0:	8d4c      	movi.n	a13, 72
400809e2:	2c0c      	movi.n	a12, 2
400809e4:	01bd      	mov.n	a11, a1
400809e6:	02a1e5        	call8	40083404 <i2c_read>
	k_msleep(5);
400809e9:	5a0c      	movi.n	a10, 5
400809eb:	ffeb65        	call8	400808a0 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400809ee:	0101c2        	l8ui	a12, a1, 1
400809f1:	0001b2        	l8ui	a11, a1, 0
400809f4:	07ad      	mov.n	a10, a7
400809f6:	004e65        	call8	40080edc <printk>
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809f9:	02a8      	l32i.n	a10, a2, 0
400809fb:	8d4c      	movi.n	a13, 72
400809fd:	1c0c      	movi.n	a12, 1
400809ff:	10c1b2        	addi	a11, a1, 16
	pointer = 0x00; // Temp register pointer
40080a02:	104142        	s8i	a4, a1, 16
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a05:	02a1e5        	call8	40083424 <i2c_write>
    printk("----------->> -------------------- <<---------------\n");
40080a08:	06ad      	mov.n	a10, a6
40080a0a:	004d25        	call8	40080edc <printk>
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
40080a0d:	fee6a1        	l32r	a10, 400805a8 <_iram_text_start+0x58>
	pointer = 0xF7;
40080a10:	747c      	movi.n	a4, -9
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
40080a12:	004ca5        	call8	40080edc <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS); //Se escribe la dirección de la cual se va a leer posteriormente
40080a15:	03a8      	l32i.n	a10, a3, 0
40080a17:	76a0d2        	movi	a13, 118
40080a1a:	1c0c      	movi.n	a12, 1
40080a1c:	10c1b2        	addi	a11, a1, 16
	pointer = 0xF7;
40080a1f:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS); //Se escribe la dirección de la cual se va a leer posteriormente
40080a22:	02a025        	call8	40083424 <i2c_write>
	k_msleep(5);
40080a25:	5a0c      	movi.n	a10, 5
40080a27:	ffe7a5        	call8	400808a0 <k_msleep>
	ret = i2c_read(i2c_dev1, &data[0], 4, BMP280_DEFAULT_ADDRESS);
40080a2a:	03a8      	l32i.n	a10, a3, 0
40080a2c:	76a0d2        	movi	a13, 118
40080a2f:	4c0c      	movi.n	a12, 4
40080a31:	01bd      	mov.n	a11, a1
40080a33:	029d25        	call8	40083404 <i2c_read>
	k_msleep(5);
40080a36:	5a0c      	movi.n	a10, 5
40080a38:	ffe665        	call8	400808a0 <k_msleep>
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080a3b:	0301c2        	l8ui	a12, a1, 3
40080a3e:	0001b2        	l8ui	a11, a1, 0
40080a41:	fedaa1        	l32r	a10, 400805ac <_iram_text_start+0x5c>
    pointer = 0xD0;
40080a44:	d0af42        	movi	a4, -48
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080a47:	004965        	call8	40080edc <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS); //Se escribe la dirección de la cual se va a leer posteriormente
40080a4a:	03a8      	l32i.n	a10, a3, 0
40080a4c:	76a0d2        	movi	a13, 118
40080a4f:	1c0c      	movi.n	a12, 1
40080a51:	10c1b2        	addi	a11, a1, 16
    pointer = 0xD0;
40080a54:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS); //Se escribe la dirección de la cual se va a leer posteriormente
40080a57:	029ce5        	call8	40083424 <i2c_write>
    k_msleep(5);
40080a5a:	5a0c      	movi.n	a10, 5
40080a5c:	ffe425        	call8	400808a0 <k_msleep>
	ret = i2c_read(i2c_dev1, &data[0], 1, BMP280_DEFAULT_ADDRESS);
40080a5f:	03a8      	l32i.n	a10, a3, 0
40080a61:	01bd      	mov.n	a11, a1
40080a63:	76a0d2        	movi	a13, 118
40080a66:	1c0c      	movi.n	a12, 1
40080a68:	0299a5        	call8	40083404 <i2c_read>
	k_msleep(5);
40080a6b:	5a0c      	movi.n	a10, 5
40080a6d:	ffe325        	call8	400808a0 <k_msleep>
	printk("----->> ID BMP280 %x\n\n", data[0]);
40080a70:	0001b2        	l8ui	a11, a1, 0
40080a73:	fecfa1        	l32r	a10, 400805b0 <_iram_text_start+0x60>
40080a76:	004665        	call8	40080edc <printk>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a79:	02a8      	l32i.n	a10, a2, 0
40080a7b:	8d4c      	movi.n	a13, 72
40080a7d:	2c0c      	movi.n	a12, 2
40080a7f:	01bd      	mov.n	a11, a1
40080a81:	029825        	call8	40083404 <i2c_read>
        if(~ret) {
40080a84:	050a26        	beqi	a10, -1, 40080a8d <main+0x1d1>
            printk("Succesful read\n");
40080a87:	fecba1        	l32r	a10, 400805b4 <_iram_text_start+0x64>
40080a8a:	000086        	j	40080a90 <main+0x1d4>
            printk("Error read\n");
40080a8d:	fecaa1        	l32r	a10, 400805b8 <_iram_text_start+0x68>
40080a90:	0044a5        	call8	40080edc <printk>
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a93:	0101c2        	l8ui	a12, a1, 1
40080a96:	0001b2        	l8ui	a11, a1, 0
40080a99:	fec8a1        	l32r	a10, 400805bc <_iram_text_start+0x6c>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a9c:	80a042        	movi	a4, 128
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a9f:	0043e5        	call8	40080edc <printk>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080aa2:	000182        	l8ui	a8, a1, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080aa5:	fec7a1        	l32r	a10, 400805c4 <_iram_text_start+0x74>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080aa8:	113880        	slli	a3, a8, 8
40080aab:	010182        	l8ui	a8, a1, 1
40080aae:	108840        	and	a8, a8, a4
40080ab1:	208830        	or	a8, a8, a3
        temp = temp * LM75A_DEGREES_RESOLUTION;
40080ab4:	418580        	srli	a8, a8, 5
40080ab7:	fec231        	l32r	a3, 400805c0 <_iram_text_start+0x70>
40080aba:	ca0800        	float.s	f0, a8, 0
40080abd:	fa1350        	wfr	f1, a3
40080ac0:	2a0010        	mul.s	f0, f0, f1
40080ac3:	eab000        	utrunc.s	a11, f0, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080ac6:	f4b0b0        	extui	a11, a11, 0, 16
40080ac9:	004125        	call8	40080edc <printk>
        k_msleep(2500);
40080acc:	febfa1        	l32r	a10, 400805c8 <_iram_text_start+0x78>
40080acf:	ffdd25        	call8	400808a0 <k_msleep>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080ad2:	ffe8c6        	j	40080a79 <main+0x1bd>
40080ad5:	000000        	ill

40080ad8 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
40080ad8:	00a136        	entry	a1, 80
40080adb:	049d      	mov.n	a9, a4
40080add:	744070        	extui	a4, a7, 0, 8
40080ae0:	058d      	mov.n	a8, a5
40080ae2:	8149      	s32i.n	a4, a1, 32
40080ae4:	500142        	l8ui	a4, a1, 80
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080ae7:	471c      	movi.n	a7, 20
		buf[i] = "0123456789abcdef"[num % base];
40080ae9:	315f60        	srai	a5, a6, 31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080aec:	000e86        	j	40080b2a <print_digits+0x52>
40080aef:	000000        	ill
		buf[i] = "0123456789abcdef"[num % base];
40080af2:	80f170        	add	a15, a1, a7
40080af5:	20c660        	or	a12, a6, a6
40080af8:	05dd      	mov.n	a13, a5
40080afa:	09ad      	mov.n	a10, a9
40080afc:	08bd      	mov.n	a11, a8
40080afe:	b189      	s32i.n	a8, a1, 44
40080b00:	a199      	s32i.n	a9, a1, 40
40080b02:	0961f2        	s32i	a15, a1, 36
40080b05:	02e7e5        	call8	40083984 <__umoddi3>
40080b08:	feb1b1        	l32r	a11, 400805cc <_iram_text_start+0x7c>
40080b0b:	91f8      	l32i.n	a15, a1, 36
40080b0d:	abaa      	add.n	a10, a11, a10
40080b0f:	000aa2        	l8ui	a10, a10, 0
		num /= base;
40080b12:	06cd      	mov.n	a12, a6
		buf[i] = "0123456789abcdef"[num % base];
40080b14:	004fa2        	s8i	a10, a15, 0
		num /= base;
40080b17:	a198      	l32i.n	a9, a1, 40
40080b19:	b188      	l32i.n	a8, a1, 44
40080b1b:	09ad      	mov.n	a10, a9
40080b1d:	08bd      	mov.n	a11, a8
40080b1f:	05dd      	mov.n	a13, a5
40080b21:	02bf25        	call8	40083714 <__udivdi3>
40080b24:	0a9d      	mov.n	a9, a10
40080b26:	0b8d      	mov.n	a8, a11
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080b28:	770b      	addi.n	a7, a7, -1
40080b2a:	20a980        	or	a10, a9, a8
40080b2d:	fc1a56        	bnez	a10, 40080af2 <print_digits+0x1a>
	}

	if (i == DIGITS_BUFLEN - 1) {
40080b30:	451c      	movi.n	a5, 20
40080b32:	079757        	bne	a7, a5, 40080b3d <print_digits+0x65>
		buf[i] = '0';
40080b35:	053c      	movi.n	a5, 48
40080b37:	144152        	s8i	a5, a1, 20
40080b3a:	000046        	j	40080b3f <print_digits+0x67>
	} else {
		i++;
40080b3d:	771b      	addi.n	a7, a7, 1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
40080b3f:	152182        	l32i	a8, a1, 84
40080b42:	591c      	movi.n	a9, 21
40080b44:	878a      	add.n	a8, a7, a8
40080b46:	050c      	movi.n	a5, 0
40080b48:	1c1897        	beq	a8, a9, 40080b68 <print_digits+0x90>
40080b4b:	ebc852        	addi	a5, a8, -21
40080b4e:	000206        	j	40080b5a <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
40080b51:	03bd      	mov.n	a11, a3
40080b53:	04ad      	mov.n	a10, a4
40080b55:	0002e0        	callx8	a2
	for (/**/; pad > 0 && pad_before; pad--) {
40080b58:	550b      	addi.n	a5, a5, -1
40080b5a:	318f50        	srai	a8, a5, 31
40080b5d:	c08850        	sub	a8, a8, a5
40080b60:	0048d6        	bgez	a8, 40080b68 <print_digits+0x90>
40080b63:	8168      	l32i.n	a6, a1, 32
40080b65:	fe8656        	bnez	a6, 40080b51 <print_digits+0x79>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b68:	561c      	movi.n	a6, 21
		out(buf[i], ctx);
40080b6a:	817a      	add.n	a8, a1, a7
40080b6c:	0008a2        	l8ui	a10, a8, 0
40080b6f:	20b330        	or	a11, a3, a3
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b72:	01c772        	addi	a7, a7, 1
		out(buf[i], ctx);
40080b75:	0002e0        	callx8	a2
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b78:	ee9767        	bne	a7, a6, 40080b6a <print_digits+0x92>
40080b7b:	000206        	j	40080b87 <print_digits+0xaf>
	}
	for (/**/; pad > 0; pad--) {
		out(pad_char, ctx);
40080b7e:	03bd      	mov.n	a11, a3
40080b80:	04ad      	mov.n	a10, a4
40080b82:	0002e0        	callx8	a2
	for (/**/; pad > 0; pad--) {
40080b85:	550b      	addi.n	a5, a5, -1
40080b87:	f315e6        	bgei	a5, 1, 40080b7e <print_digits+0xa6>
	}
}
40080b8a:	f01d      	retw.n

40080b8c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
40080b8c:	004136        	entry	a1, 32
	struct out_context *ctx = ctx_p;

	ctx->count++;
40080b8f:	0388      	l32i.n	a8, a3, 0
	return _char_out(c);
40080b91:	02ad      	mov.n	a10, a2
	ctx->count++;
40080b93:	881b      	addi.n	a8, a8, 1
40080b95:	0389      	s32i.n	a8, a3, 0
	return _char_out(c);
40080b97:	fe8e31        	l32r	a3, 400805d0 <_iram_text_start+0x80>
40080b9a:	002332        	l32i	a3, a3, 0
40080b9d:	0003e0        	callx8	a3
}
40080ba0:	0a2d      	mov.n	a2, a10
40080ba2:	f01d      	retw.n

40080ba4 <__printk_hook_install>:
{
40080ba4:	004136        	entry	a1, 32
	_char_out = fn;
40080ba7:	fe8a81        	l32r	a8, 400805d0 <_iram_text_start+0x80>
40080baa:	0829      	s32i.n	a2, a8, 0
}
40080bac:	f01d      	retw.n
	...

40080bb0 <z_vprintk>:
{
40080bb0:	00a136        	entry	a1, 80
40080bb3:	9149      	s32i.n	a4, a1, 36
	char length_mod = 0;
40080bb5:	040c      	movi.n	a4, 0
{
40080bb7:	4159      	s32i.n	a5, a1, 16
40080bb9:	5169      	s32i.n	a6, a1, 20
40080bbb:	6179      	s32i.n	a7, a1, 24
40080bbd:	7159      	s32i.n	a5, a1, 28
40080bbf:	8169      	s32i.n	a6, a1, 32
40080bc1:	076d      	mov.n	a6, a7
	int min_width = -1;
40080bc3:	f57c      	movi.n	a5, -1
	enum pad_type padding = PAD_NONE;
40080bc5:	047d      	mov.n	a7, a4
	int might_format = 0; /* 1 if encountered a '%' */
40080bc7:	048d      	mov.n	a8, a4
	while (*fmt) {
40080bc9:	00ba46        	j	40080eb6 <z_vprintk+0x306>
		if (!might_format) {
40080bcc:	08dc      	bnez.n	a8, 40080be0 <z_vprintk+0x30>
			if (*fmt != '%') {
40080bce:	592c      	movi.n	a9, 37
40080bd0:	029a97        	bne	a10, a9, 40080bd6 <z_vprintk+0x26>
40080bd3:	00ad86        	j	40080e8d <z_vprintk+0x2dd>
				out((int)*fmt, ctx);
40080bd6:	03bd      	mov.n	a11, a3
40080bd8:	a189      	s32i.n	a8, a1, 40
40080bda:	0002e0        	callx8	a2
40080bdd:	008046        	j	40080de2 <z_vprintk+0x232>
			switch (*fmt) {
40080be0:	64a092        	movi	a9, 100
40080be3:	029a97        	bne	a10, a9, 40080be9 <z_vprintk+0x39>
40080be6:	003186        	j	40080cb0 <z_vprintk+0x100>
40080be9:	3739a7        	bltu	a9, a10, 40080c24 <z_vprintk+0x74>
40080bec:	993c      	movi.n	a9, 57
40080bee:	1c39a7        	bltu	a9, a10, 40080c0e <z_vprintk+0x5e>
40080bf1:	193c      	movi.n	a9, 49
40080bf3:	7bba97        	bgeu	a10, a9, 40080c72 <z_vprintk+0xc2>
40080bf6:	d92c      	movi.n	a9, 45
40080bf8:	029a97        	bne	a10, a9, 40080bfe <z_vprintk+0x4e>
40080bfb:	00a646        	j	40080e98 <z_vprintk+0x2e8>
40080bfe:	093c      	movi.n	a9, 48
40080c00:	681a97        	beq	a10, a9, 40080c6c <z_vprintk+0xbc>
40080c03:	582c      	movi.n	a8, 37
40080c05:	021a87        	beq	a10, a8, 40080c0b <z_vprintk+0x5b>
40080c08:	009a86        	j	40080e76 <z_vprintk+0x2c6>
40080c0b:	009886        	j	40080e71 <z_vprintk+0x2c1>
40080c0e:	885c      	movi.n	a8, 88
40080c10:	029a87        	bne	a10, a8, 40080c16 <z_vprintk+0x66>
40080c13:	005286        	j	40080d61 <z_vprintk+0x1b1>
40080c16:	63a082        	movi	a8, 99
40080c19:	029a87        	bne	a10, a8, 40080c1f <z_vprintk+0x6f>
40080c1c:	008b06        	j	40080e4c <z_vprintk+0x29c>
40080c1f:	0094c6        	j	40080e76 <z_vprintk+0x2c6>
40080c22:	920000        	lsi	f0, a0, 0x248
40080c25:	9770a0        	lsi	f10, a0, 0x25c
40080c28:	029a      	add.n	a0, a2, a9
40080c2a:	004806        	j	40080d4e <z_vprintk+0x19e>
40080c2d:	1339a7        	bltu	a9, a10, 40080c44 <z_vprintk+0x94>
40080c30:	69a092        	movi	a9, 105
40080c33:	791a97        	beq	a10, a9, 40080cb0 <z_vprintk+0x100>
40080c36:	6ca092        	movi	a9, 108
40080c39:	541a97        	beq	a10, a9, 40080c91 <z_vprintk+0xe1>
40080c3c:	68a092        	movi	a9, 104
40080c3f:	000886        	j	40080c65 <z_vprintk+0xb5>
40080c42:	920000        	lsi	f0, a0, 0x248
40080c45:	9775a0        	lsi	f10, a5, 0x25c
40080c48:	651a      	add.n	a6, a5, a1
40080c4a:	0b39a7        	bltu	a9, a10, 40080c59 <z_vprintk+0xa9>
40080c4d:	73a082        	movi	a8, 115
40080c50:	029a87        	bne	a10, a8, 40080c56 <z_vprintk+0xa6>
40080c53:	006446        	j	40080de8 <z_vprintk+0x238>
40080c56:	008706        	j	40080e76 <z_vprintk+0x2c6>
40080c59:	78a092        	movi	a9, 120
40080c5c:	029a97        	bne	a10, a9, 40080c62 <z_vprintk+0xb2>
40080c5f:	003f86        	j	40080d61 <z_vprintk+0x1b1>
40080c62:	7aa092        	movi	a9, 122
40080c65:	281a97        	beq	a10, a9, 40080c91 <z_vprintk+0xe1>
40080c68:	008286        	j	40080e76 <z_vprintk+0x2c6>
40080c6b:	25d600        	extui	a13, a0, 22, 3
				if (min_width < 0 && padding == PAD_NONE) {
40080c6e:	a71600        	lsi	f0, a6, 0x29c
40080c71:	65d622        	addmi	a2, a6, 0x6500
				if (min_width < 0) {
40080c74:	ca5200        	float.s	f5, a2, 0
					min_width = *fmt - '0';
40080c77:	0346d0        	lsi	f13, a6, 12
40080c7a:	e00000        	subx4	a0, a0, a0
					min_width = 10 * min_width + *fmt - '0';
40080c7d:	5a1195        	call4	400dad98 <_iram_text_end+0x571a2>
40080c80:	f059      	s32i.n	a5, a0, 60
40080c82:	521155        	call4	400d2d98 <_iram_text_end+0x4f1a2>
40080c85:	5ad0c5        	call0	400db994 <_iram_text_end+0x57d9e>
40080c88:	565a      	add.n	a5, a6, a5
				if (padding == PAD_NONE) {
40080c8a:	0c2237        	blt	a2, a3, 40080c9a <z_vprintk+0xea>
					padding = PAD_SPACE_BEFORE;
40080c8d:	878627        	bany	a6, a2, 40080c18 <z_vprintk+0x68>
40080c90:	a09200        	addx4	a9, a2, a0
				if (*fmt == 'h' && length_mod == 'h') {
40080c93:	9768      	l32i.n	a6, a7, 36
40080c95:	059a      	add.n	a0, a5, a9
40080c97:	0d94a7        	bne	a4, a10, 40080ca8 <z_vprintk+0xf8>
40080c9a:	008146        	j	40080ea3 <z_vprintk+0x2f3>
				} else if (*fmt == 'l' && length_mod == 'l') {
40080c9d:	94c492        	addi	a9, a4, -108
40080ca0:	49cc      	bnez.n	a9, 40080ca8 <z_vprintk+0xf8>
40080ca2:	94ca92        	addi	a9, a10, -108
40080ca5:	1ff916        	beqz	a9, 40080ea8 <z_vprintk+0x2f8>
				} else if (length_mod == 0) {
40080ca8:	202416        	beqz	a4, 40080eae <z_vprintk+0x2fe>
					out((int)'%', ctx);
40080cab:	0071c6        	j	40080e76 <z_vprintk+0x2c6>
40080cae:	920000        	lsi	f0, a0, 0x248
				if (length_mod == 'z') {
40080cb1:	1c7aa0        	lsi	f10, a10, 112
40080cb4:	9788      	l32i.n	a8, a7, 36
40080cb6:	060394        	lsi	f9, a3, 24
					d = va_arg(ap, ssize_t);
40080cb9:	000c      	movi.n	a0, 0
40080cbb:	a09200        	addx4	a9, a2, a0
				} else if (length_mod == 'l') {
40080cbe:	976c      	movi.n	a7, -23
40080cc0:	860294        	lsi	f9, a2, 0x218
					d = va_arg(ap, long);
40080cc3:	0009      	s32i.n	a0, a0, 0
				} else if (length_mod == 'L') {
40080cc5:	c94c      	movi.n	a9, 76
40080cc7:	219497        	bne	a4, a9, 40080cec <z_vprintk+0x13c>
					long long lld = va_arg(ap, long long);
40080cca:	897c      	movi.n	a9, -8
40080ccc:	c67b      	addi.n	a12, a6, 7
40080cce:	10cc90        	and	a12, a12, a9
40080cd1:	9c8b      	addi.n	a9, a12, 8
40080cd3:	81b8      	l32i.n	a11, a1, 32
40080cd5:	07a897        	bge	a8, a9, 40080ce0 <z_vprintk+0x130>
40080cd8:	0228c7        	blt	a8, a12, 40080cde <z_vprintk+0x12e>
40080cdb:	28a092        	movi	a9, 40
40080cde:	71b8      	l32i.n	a11, a1, 28
40080ce0:	8b9a      	add.n	a8, a11, a9
40080ce2:	f8c882        	addi	a8, a8, -8
					d = (printk_val_t) lld;
40080ce5:	08c8      	l32i.n	a12, a8, 0
40080ce7:	1868      	l32i.n	a6, a8, 4
40080ce9:	0005c6        	j	40080d04 <z_vprintk+0x154>
					d = va_arg(ap, int);
40080cec:	964b      	addi.n	a9, a6, 4
40080cee:	81b8      	l32i.n	a11, a1, 32
40080cf0:	06a897        	bge	a8, a9, 40080cfa <z_vprintk+0x14a>
40080cf3:	012867        	blt	a8, a6, 40080cf8 <z_vprintk+0x148>
40080cf6:	492c      	movi.n	a9, 36
40080cf8:	71b8      	l32i.n	a11, a1, 28
40080cfa:	bb9a      	add.n	a11, a11, a9
40080cfc:	fccbb2        	addi	a11, a11, -4
40080cff:	0bc8      	l32i.n	a12, a11, 0
40080d01:	316fc0        	srai	a6, a12, 31
				if (*fmt != 'u' && negative(d)) {
40080d04:	75a082        	movi	a8, 117
40080d07:	251a87        	beq	a10, a8, 40080d30 <z_vprintk+0x180>
40080d0a:	0226d6        	bgez	a6, 40080d30 <z_vprintk+0x180>
					out((int)'-', ctx);
40080d0d:	03bd      	mov.n	a11, a3
40080d0f:	da2c      	movi.n	a10, 45
40080d11:	0b6192        	s32i	a9, a1, 44
40080d14:	0a61c2        	s32i	a12, a1, 40
40080d17:	0002e0        	callx8	a2
					d = -d;
40080d1a:	a1c8      	l32i.n	a12, a1, 40
40080d1c:	180c      	movi.n	a8, 1
40080d1e:	60c0c0        	neg	a12, a12
40080d21:	0a0c      	movi.n	a10, 0
40080d23:	838ac0        	moveqz	a8, a10, a12
40080d26:	60d060        	neg	a13, a6
					min_width--;
40080d29:	b198      	l32i.n	a9, a1, 44
					d = -d;
40080d2b:	c06d80        	sub	a6, a13, a8
					min_width--;
40080d2e:	550b      	addi.n	a5, a5, -1
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
40080d30:	fdc7a2        	addi	a10, a7, -3
40080d33:	080c      	movi.n	a8, 0
40080d35:	1f0c      	movi.n	a15, 1
40080d37:	0e3c      	movi.n	a14, 48
40080d39:	83f8a0        	moveqz	a15, a8, a10
40080d3c:	0b2c      	movi.n	a11, 32
40080d3e:	a70b      	addi.n	a10, a7, -1
40080d40:	83bea0        	moveqz	a11, a14, a10
40080d43:	1159      	s32i.n	a5, a1, 4
40080d45:	01b9      	s32i.n	a11, a1, 0
40080d47:	ae0c      	movi.n	a14, 10
40080d49:	06dd      	mov.n	a13, a6
40080d4b:	002106        	j	40080dd3 <z_vprintk+0x223>
				out('0', ctx);
40080d4e:	03bd      	mov.n	a11, a3
40080d50:	0a3c      	movi.n	a10, 48
40080d52:	0002e0        	callx8	a2
				out('x', ctx);
40080d55:	03bd      	mov.n	a11, a3
40080d57:	78a0a2        	movi	a10, 120
40080d5a:	0002e0        	callx8	a2
				min_width = sizeof(void *) * 2;
40080d5d:	850c      	movi.n	a5, 8
				padding = PAD_ZERO_BEFORE;
40080d5f:	170c      	movi.n	a7, 1
				if (*fmt == 'p') {
40080d61:	9198      	l32i.n	a9, a1, 36
40080d63:	881c      	movi.n	a8, 24
40080d65:	0009a2        	l8ui	a10, a9, 0
40080d68:	70a092        	movi	a9, 112
40080d6b:	029a97        	bne	a10, a9, 40080d71 <z_vprintk+0x1c1>
					x = (uintptr_t)va_arg(ap, void *);
40080d6e:	000b86        	j	40080da0 <z_vprintk+0x1f0>
				} else if (length_mod == 'l') {
40080d71:	6ca092        	movi	a9, 108
40080d74:	029497        	bne	a4, a9, 40080d7a <z_vprintk+0x1ca>
					x = va_arg(ap, unsigned long);
40080d77:	000946        	j	40080da0 <z_vprintk+0x1f0>
				} else if (length_mod == 'L') {
40080d7a:	c94c      	movi.n	a9, 76
40080d7c:	209497        	bne	a4, a9, 40080da0 <z_vprintk+0x1f0>
					x = va_arg(ap, unsigned long long);
40080d7f:	897c      	movi.n	a9, -8
40080d81:	c67b      	addi.n	a12, a6, 7
40080d83:	10cc90        	and	a12, a12, a9
40080d86:	9c8b      	addi.n	a9, a12, 8
40080d88:	81a8      	l32i.n	a10, a1, 32
40080d8a:	06a897        	bge	a8, a9, 40080d94 <z_vprintk+0x1e4>
40080d8d:	0128c7        	blt	a8, a12, 40080d92 <z_vprintk+0x1e2>
40080d90:	892c      	movi.n	a9, 40
40080d92:	71a8      	l32i.n	a10, a1, 28
40080d94:	8a9a      	add.n	a8, a10, a9
40080d96:	f8c882        	addi	a8, a8, -8
40080d99:	08c8      	l32i.n	a12, a8, 0
40080d9b:	18d8      	l32i.n	a13, a8, 4
40080d9d:	000646        	j	40080dba <z_vprintk+0x20a>
					x = va_arg(ap, unsigned int);
40080da0:	964b      	addi.n	a9, a6, 4
40080da2:	81a8      	l32i.n	a10, a1, 32
40080da4:	06a897        	bge	a8, a9, 40080dae <z_vprintk+0x1fe>
40080da7:	012867        	blt	a8, a6, 40080dac <z_vprintk+0x1fc>
40080daa:	492c      	movi.n	a9, 36
40080dac:	71a8      	l32i.n	a10, a1, 28
40080dae:	80aa90        	add	a10, a10, a9
40080db1:	fccaa2        	addi	a10, a10, -4
40080db4:	002ac2        	l32i	a12, a10, 0
40080db7:	00a0d2        	movi	a13, 0
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
40080dba:	fdc7a2        	addi	a10, a7, -3
40080dbd:	080c      	movi.n	a8, 0
40080dbf:	1f0c      	movi.n	a15, 1
40080dc1:	0e3c      	movi.n	a14, 48
40080dc3:	83f8a0        	moveqz	a15, a8, a10
40080dc6:	0b2c      	movi.n	a11, 32
40080dc8:	a70b      	addi.n	a10, a7, -1
40080dca:	83bea0        	moveqz	a11, a14, a10
40080dcd:	1159      	s32i.n	a5, a1, 4
40080dcf:	01b9      	s32i.n	a11, a1, 0
40080dd1:	0e1c      	movi.n	a14, 16
40080dd3:	03bd      	mov.n	a11, a3
40080dd5:	02ad      	mov.n	a10, a2
40080dd7:	b199      	s32i.n	a9, a1, 44
40080dd9:	a189      	s32i.n	a8, a1, 40
40080ddb:	ffcfe5        	call8	40080ad8 <print_digits>
40080dde:	b198      	l32i.n	a9, a1, 44
40080de0:	096d      	mov.n	a6, a9
			might_format = 0;
40080de2:	a188      	l32i.n	a8, a1, 40
40080de4:	003206        	j	40080eb0 <z_vprintk+0x300>
40080de7:	964b00        	lsi	f0, a11, 0x258
				char *s = va_arg(ap, char *);
40080dea:	881c      	movi.n	a8, 24
40080dec:	0ca897        	bge	a8, a9, 40080dfc <z_vprintk+0x24c>
40080def:	012867        	blt	a8, a6, 40080df4 <z_vprintk+0x244>
40080df2:	492c      	movi.n	a9, 36
40080df4:	096d      	mov.n	a6, a9
40080df6:	7188      	l32i.n	a8, a1, 28
40080df8:	000106        	j	40080e00 <z_vprintk+0x250>
40080dfb:	818800        	src	a8, a8, a0
40080dfe:	096d      	mov.n	a6, a9
40080e00:	889a      	add.n	a8, a8, a9
40080e02:	fcc882        	addi	a8, a8, -4
40080e05:	08d8      	l32i.n	a13, a8, 0
40080e07:	0d9d      	mov.n	a9, a13
				while (*s) {
40080e09:	0003c6        	j	40080e1c <z_vprintk+0x26c>
					out((int)(*s++), ctx);
40080e0c:	991b      	addi.n	a9, a9, 1
40080e0e:	03bd      	mov.n	a11, a3
40080e10:	b199      	s32i.n	a9, a1, 44
40080e12:	0a61d2        	s32i	a13, a1, 40
40080e15:	0002e0        	callx8	a2
40080e18:	a1d8      	l32i.n	a13, a1, 40
40080e1a:	b198      	l32i.n	a9, a1, 44
				while (*s) {
40080e1c:	0009a2        	l8ui	a10, a9, 0
40080e1f:	fe9a56        	bnez	a10, 40080e0c <z_vprintk+0x25c>
			might_format = 0;
40080e22:	0a8d      	mov.n	a8, a10
				if (padding == PAD_SPACE_AFTER) {
40080e24:	023726        	beqi	a7, 3, 40080e2a <z_vprintk+0x27a>
40080e27:	002146        	j	40080eb0 <z_vprintk+0x300>
					int remaining = min_width - (s - start);
40080e2a:	c099d0        	sub	a9, a9, a13
40080e2d:	c09590        	sub	a9, a5, a9
						out(' ', ctx);
40080e30:	082c      	movi.n	a8, 32
					while (remaining-- > 0) {
40080e32:	000406        	j	40080e46 <z_vprintk+0x296>
						out(' ', ctx);
40080e35:	08ad      	mov.n	a10, a8
40080e37:	03bd      	mov.n	a11, a3
40080e39:	a189      	s32i.n	a8, a1, 40
40080e3b:	b199      	s32i.n	a9, a1, 44
40080e3d:	0002e0        	callx8	a2
40080e40:	b198      	l32i.n	a9, a1, 44
40080e42:	a188      	l32i.n	a8, a1, 40
40080e44:	990b      	addi.n	a9, a9, -1
					while (remaining-- > 0) {
40080e46:	eb19e6        	bgei	a9, 1, 40080e35 <z_vprintk+0x285>
40080e49:	000ec6        	j	40080e88 <z_vprintk+0x2d8>
				int c = va_arg(ap, int);
40080e4c:	964b      	addi.n	a9, a6, 4
40080e4e:	8a1c      	movi.n	a10, 24
40080e50:	8188      	l32i.n	a8, a1, 32
40080e52:	06aa97        	bge	a10, a9, 40080e5c <z_vprintk+0x2ac>
40080e55:	012a67        	blt	a10, a6, 40080e5a <z_vprintk+0x2aa>
40080e58:	492c      	movi.n	a9, 36
40080e5a:	7188      	l32i.n	a8, a1, 28
40080e5c:	889a      	add.n	a8, a8, a9
40080e5e:	fcc882        	addi	a8, a8, -4
				out(c, ctx);
40080e61:	08a8      	l32i.n	a10, a8, 0
40080e63:	03bd      	mov.n	a11, a3
40080e65:	b199      	s32i.n	a9, a1, 44
40080e67:	0002e0        	callx8	a2
				break;
40080e6a:	b198      	l32i.n	a9, a1, 44
40080e6c:	096d      	mov.n	a6, a9
40080e6e:	000586        	j	40080e88 <z_vprintk+0x2d8>
				out((int)'%', ctx);
40080e71:	03bd      	mov.n	a11, a3
40080e73:	000386        	j	40080e85 <z_vprintk+0x2d5>
				out((int)'%', ctx);
40080e76:	03bd      	mov.n	a11, a3
40080e78:	25a0a2        	movi	a10, 37
40080e7b:	0002e0        	callx8	a2
				out((int)*fmt, ctx);
40080e7e:	9188      	l32i.n	a8, a1, 36
40080e80:	03bd      	mov.n	a11, a3
40080e82:	0008a2        	l8ui	a10, a8, 0
40080e85:	0002e0        	callx8	a2
			might_format = 0;
40080e88:	080c      	movi.n	a8, 0
				break;
40080e8a:	000886        	j	40080eb0 <z_vprintk+0x300>
				length_mod = 0;
40080e8d:	084d      	mov.n	a4, a8
				padding = PAD_NONE;
40080e8f:	087d      	mov.n	a7, a8
				min_width = -1;
40080e91:	f57c      	movi.n	a5, -1
				might_format = 1;
40080e93:	180c      	movi.n	a8, 1
40080e95:	0005c6        	j	40080eb0 <z_vprintk+0x300>
				padding = PAD_SPACE_AFTER;
40080e98:	370c      	movi.n	a7, 3
40080e9a:	000486        	j	40080eb0 <z_vprintk+0x300>
					padding = PAD_ZERO_BEFORE;
40080e9d:	170c      	movi.n	a7, 1
40080e9f:	000346        	j	40080eb0 <z_vprintk+0x300>
40080ea2:	844c00        	extui	a4, a0, 12, 9
					length_mod = 'H';
40080ea5:	0001c6        	j	40080eb0 <z_vprintk+0x300>
					length_mod = 'L';
40080ea8:	c44c      	movi.n	a4, 76
40080eaa:	000086        	j	40080eb0 <z_vprintk+0x300>
40080ead:	0a4d00        	add.s	f4, f13, f0
		++fmt;
40080eb0:	9198      	l32i.n	a9, a1, 36
40080eb2:	991b      	addi.n	a9, a9, 1
40080eb4:	9199      	s32i.n	a9, a1, 36
	while (*fmt) {
40080eb6:	9198      	l32i.n	a9, a1, 36
40080eb8:	0009a2        	l8ui	a10, a9, 0
40080ebb:	d0da56        	bnez	a10, 40080bcc <z_vprintk+0x1c>
}
40080ebe:	f01d      	retw.n

40080ec0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
40080ec0:	008136        	entry	a1, 64
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
40080ec3:	fdc4a1        	l32r	a10, 400805d4 <_iram_text_start+0x84>
	struct out_context ctx = { 0 };
40080ec6:	00a082        	movi	a8, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080ec9:	20d330        	or	a13, a3, a3
40080ecc:	20e440        	or	a14, a4, a4
40080ecf:	05fd      	mov.n	a15, a5
40080ed1:	02cd      	mov.n	a12, a2
40080ed3:	01bd      	mov.n	a11, a1
	struct out_context ctx = { 0 };
40080ed5:	0189      	s32i.n	a8, a1, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080ed7:	ffcda5        	call8	40080bb0 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
40080eda:	f01d      	retw.n

40080edc <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
40080edc:	00a136        	entry	a1, 80
	va_list ap;

	va_start(ap, fmt);
40080edf:	10c1c2        	addi	a12, a1, 16
40080ee2:	30c1b2        	addi	a11, a1, 48
40080ee5:	4d0c      	movi.n	a13, 4

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
40080ee7:	02ad      	mov.n	a10, a2
	va_start(ap, fmt);
40080ee9:	5139      	s32i.n	a3, a1, 20
40080eeb:	6149      	s32i.n	a4, a1, 24
40080eed:	7159      	s32i.n	a5, a1, 28
40080eef:	8169      	s32i.n	a6, a1, 32
40080ef1:	9179      	s32i.n	a7, a1, 36
40080ef3:	11c9      	s32i.n	a12, a1, 4
40080ef5:	01b9      	s32i.n	a11, a1, 0
40080ef7:	21d9      	s32i.n	a13, a1, 8
		vprintk(fmt, ap);
40080ef9:	fffc65        	call8	40080ec0 <vprintk>
	}
	va_end(ap);
}
40080efc:	f01d      	retw.n
	...

40080f00 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
40080f00:	004136        	entry	a1, 32
	entry(p1, p2, p3);
40080f03:	20c550        	or	a12, a5, a5
40080f06:	20b440        	or	a11, a4, a4
40080f09:	03ad      	mov.n	a10, a3
40080f0b:	0002e0        	callx8	a2
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
40080f0e:	01fee5        	call8	40082efc <z_impl_k_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
40080f11:	0213e5        	call8	40083050 <z_impl_k_thread_abort>

40080f14 <chunk_field>:
	return (chunk_unit_t *)h;
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
40080f14:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f17:	1133d0        	slli	a3, a3, 3
40080f1a:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f1c:	fdaf81        	l32r	a8, 400805d8 <_iram_text_start+0x88>
40080f1f:	2228      	l32i.n	a2, a2, 8
40080f21:	0bb827        	bgeu	a8, a2, 40080f30 <chunk_field+0x1c>
		return ((uint32_t *)cmem)[f];
40080f24:	1144e0        	slli	a4, a4, 2
40080f27:	334a      	add.n	a3, a3, a4
40080f29:	0328      	l32i.n	a2, a3, 0
40080f2b:	000246        	j	40080f38 <chunk_field+0x24>
40080f2e:	f00000        	subx8	a0, a0, a0
	} else {
		return ((uint16_t *)cmem)[f];
40080f31:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080f34:	132233        	lsi	f3, a2, 76
40080f37:	f01d00        	subx8	a1, a13, a0
	...

40080f3c <chunk_set>:
	}
}

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
40080f3c:	004136        	entry	a1, 32
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f3f:	1133d0        	slli	a3, a3, 3
40080f42:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f44:	fda581        	l32r	a8, 400805d8 <_iram_text_start+0x88>
40080f47:	2228      	l32i.n	a2, a2, 8
40080f49:	0bb827        	bgeu	a8, a2, 40080f58 <chunk_set+0x1c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
40080f4c:	1144e0        	slli	a4, a4, 2
40080f4f:	334a      	add.n	a3, a3, a4
40080f51:	0359      	s32i.n	a5, a3, 0
40080f53:	000246        	j	40080f60 <chunk_set+0x24>
40080f56:	f00000        	subx8	a0, a0, a0
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
40080f59:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080f5c:	535233        	lsi	f3, a2, 0x14c
40080f5f:	f01d00        	subx8	a1, a13, a0
	...

40080f64 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
40080f64:	004136        	entry	a1, 32
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
40080f67:	1c0c      	movi.n	a12, 1
40080f69:	03bd      	mov.n	a11, a3
40080f6b:	02ad      	mov.n	a10, a2
40080f6d:	fffa65        	call8	40080f14 <chunk_field>
}
40080f70:	4121a0        	srli	a2, a10, 1
40080f73:	f01d      	retw.n
40080f75:	000000        	ill

40080f78 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
40080f78:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f7b:	1133d0        	slli	a3, a3, 3
40080f7e:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f80:	fd9681        	l32r	a8, 400805d8 <_iram_text_start+0x88>
40080f83:	2228      	l32i.n	a2, a2, 8
40080f85:	17b827        	bgeu	a8, a2, 40080fa0 <set_chunk_used+0x28>
		if (used) {
40080f88:	1388      	l32i.n	a8, a3, 4
40080f8a:	648c      	beqz.n	a4, 40080f94 <set_chunk_used+0x1c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
40080f8c:	120c      	movi.n	a2, 1
40080f8e:	208820        	or	a8, a8, a2
40080f91:	000106        	j	40080f99 <set_chunk_used+0x21>
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
40080f94:	e27c      	movi.n	a2, -2
40080f96:	108820        	and	a8, a8, a2
40080f99:	1389      	s32i.n	a8, a3, 4
40080f9b:	000586        	j	40080fb5 <set_chunk_used+0x3d>
40080f9e:	820000        	mull	a0, a0, a0
		}
	} else {
		if (used) {
40080fa1:	8c0113        	lsi	f1, a1, 0x230
40080fa4:	120c64        	lsi	f6, a12, 72
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
40080fa7:	208820        	or	a8, a8, a2
40080faa:	000106        	j	40080fb2 <set_chunk_used+0x3a>
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
40080fad:	e27c      	movi.n	a2, -2
40080faf:	108820        	and	a8, a8, a2
40080fb2:	015382        	s16i	a8, a3, 2
		}
	}
}
40080fb5:	f01d      	retw.n
	...

40080fb8 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
40080fb8:	004136        	entry	a1, 32
	chunk_set(h, c, SIZE_AND_USED, size << 1);
40080fbb:	11d4f0        	slli	a13, a4, 1
40080fbe:	01a0c2        	movi	a12, 1
40080fc1:	20b330        	or	a11, a3, a3
40080fc4:	20a220        	or	a10, a2, a2
40080fc7:	fff765        	call8	40080f3c <chunk_set>
}
40080fca:	f01d      	retw.n

40080fcc <bucket_idx>:
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
40080fcc:	004136        	entry	a1, 32
	return big_heap(h) ? 8 : 4;
40080fcf:	fd8291        	l32r	a9, 400805d8 <_iram_text_start+0x88>
40080fd2:	2228      	l32i.n	a2, a2, 8
40080fd4:	880c      	movi.n	a8, 8
40080fd6:	023927        	bltu	a9, a2, 40080fdc <bucket_idx+0x10>
40080fd9:	04a082        	movi	a8, 4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40080fdc:	888b      	addi.n	a8, a8, 8
40080fde:	412380        	srli	a2, a8, 3
	size_t usable_sz = sz - min_chunk_size(h) + 1;
40080fe1:	331b      	addi.n	a3, a3, 1
40080fe3:	c03320        	sub	a3, a3, a2
	return 31 - __builtin_clz(usable_sz);
40080fe6:	40f330        	nsau	a3, a3
}
40080fe9:	f21c      	movi.n	a2, 31
40080feb:	c02230        	sub	a2, a2, a3
40080fee:	f01d      	retw.n

40080ff0 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
40080ff0:	004136        	entry	a1, 32
	return sizeof(void *) > 4 || chunks > 0x7fff;
40080ff3:	03bd      	mov.n	a11, a3
40080ff5:	02ad      	mov.n	a10, a2
40080ff7:	fff6e5        	call8	40080f64 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
40080ffa:	fd7751        	l32r	a5, 400805d8 <_iram_text_start+0x88>
40080ffd:	2248      	l32i.n	a4, a2, 8
40080fff:	05b547        	bgeu	a5, a4, 40081008 <free_list_add+0x18>
	if (!solo_free_header(h, c)) {
40081002:	021a66        	bnei	a10, 1, 40081008 <free_list_add+0x18>
40081005:	001bc6        	j	40081078 <free_list_add+0x88>
		int bidx = bucket_idx(h, chunk_size(h, c));
40081008:	0abd      	mov.n	a11, a10
4008100a:	02ad      	mov.n	a10, a2
4008100c:	fffbe5        	call8	40080fcc <bucket_idx>
	if (b->next == 0) {
4008100f:	118ae0        	slli	a8, a10, 2
40081012:	828a      	add.n	a8, a2, a8
40081014:	4848      	l32i.n	a4, a8, 16
40081016:	44ec      	bnez.n	a4, 4008103e <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
40081018:	140c      	movi.n	a4, 1
4008101a:	401a00        	ssl	a10
4008101d:	a14400        	sll	a4, a4
40081020:	32a8      	l32i.n	a10, a2, 12
	chunk_set(h, c, FREE_PREV, prev);
40081022:	03dd      	mov.n	a13, a3
40081024:	20aa40        	or	a10, a10, a4
40081027:	32a9      	s32i.n	a10, a2, 12
40081029:	2c0c      	movi.n	a12, 2
4008102b:	03bd      	mov.n	a11, a3
		b->next = c;
4008102d:	4839      	s32i.n	a3, a8, 16
4008102f:	02ad      	mov.n	a10, a2
40081031:	fff0a5        	call8	40080f3c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40081034:	03dd      	mov.n	a13, a3
40081036:	3c0c      	movi.n	a12, 3
40081038:	03bd      	mov.n	a11, a3
4008103a:	000d46        	j	40081073 <free_list_add+0x83>
4008103d:	a0c200        	addx4	a12, a2, a0
	return chunk_field(h, c, FREE_PREV);
40081040:	b44002        	s8i	a0, a0, 180
40081043:	a22020        	muluh	a2, a0, a2
40081046:	ece520        	lsi	f2, a5, 0x3b0
40081049:	ff          	.byte 0xff
	chunk_set(h, c, FREE_PREV, prev);
4008104a:	0add      	mov.n	a13, a10
	return chunk_field(h, c, FREE_PREV);
4008104c:	0a5d      	mov.n	a5, a10
	chunk_set(h, c, FREE_PREV, prev);
4008104e:	2c0c      	movi.n	a12, 2
40081050:	03bd      	mov.n	a11, a3
40081052:	02ad      	mov.n	a10, a2
40081054:	ffee65        	call8	40080f3c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40081057:	04dd      	mov.n	a13, a4
40081059:	3c0c      	movi.n	a12, 3
4008105b:	03bd      	mov.n	a11, a3
4008105d:	02ad      	mov.n	a10, a2
4008105f:	ffede5        	call8	40080f3c <chunk_set>
40081062:	03dd      	mov.n	a13, a3
40081064:	3c0c      	movi.n	a12, 3
40081066:	05bd      	mov.n	a11, a5
40081068:	02ad      	mov.n	a10, a2
4008106a:	ffed25        	call8	40080f3c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
4008106d:	03dd      	mov.n	a13, a3
4008106f:	2c0c      	movi.n	a12, 2
40081071:	04bd      	mov.n	a11, a4
40081073:	02ad      	mov.n	a10, a2
40081075:	ffec65        	call8	40080f3c <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
40081078:	f01d      	retw.n
	...

4008107c <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
4008107c:	004136        	entry	a1, 32
	return big_heap_bytes(size) ? 8 : 4;
4008107f:	fd5751        	l32r	a5, 400805dc <_iram_text_start+0x8c>
40081082:	890c      	movi.n	a9, 8
40081084:	013547        	bltu	a5, a4, 40081089 <sys_heap_init+0xd>
40081087:	490c      	movi.n	a9, 4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
40081089:	c04490        	sub	a4, a4, a9

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
4008108c:	887c      	movi.n	a8, -8
4008108e:	537b      	addi.n	a5, a3, 7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081090:	334a      	add.n	a3, a3, a4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40081092:	105580        	and	a5, a5, a8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081095:	103380        	and	a3, a3, a8
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
40081098:	fd5291        	l32r	a9, 400805e0 <_iram_text_start+0x90>
4008109b:	fd5181        	l32r	a8, 400805e0 <_iram_text_start+0x90>
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
4008109e:	c03350        	sub	a3, a3, a5
	heap->heap = h;
400810a1:	0259      	s32i.n	a5, a2, 0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
400810a3:	413330        	srli	a3, a3, 3
	h->len = buf_sz;
	h->avail_buckets = 0;
400810a6:	040c      	movi.n	a4, 0
	h->chunk0_hdr_area = 0;
400810a8:	0589      	s32i.n	a8, a5, 0
400810aa:	1599      	s32i.n	a9, a5, 4

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
400810ac:	03bd      	mov.n	a11, a3
	h->len = buf_sz;
400810ae:	2539      	s32i.n	a3, a5, 8
	h->avail_buckets = 0;
400810b0:	3549      	s32i.n	a4, a5, 12
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
400810b2:	20a550        	or	a10, a5, a5
400810b5:	fff165        	call8	40080fcc <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
400810b8:	112ae0        	slli	a2, a10, 2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
400810bb:	1bc222        	addi	a2, a2, 27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
400810be:	ba1b      	addi.n	a11, a10, 1
400810c0:	412320        	srli	a2, a2, 3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
400810c3:	10c592        	addi	a9, a5, 16
400810c6:	048d      	mov.n	a8, a4
400810c8:	000186        	j	400810d2 <sys_heap_init+0x56>
400810cb:	094900        	l32e	a0, a9, -48
400810ce:	881b      	addi.n	a8, a8, 1
400810d0:	994b      	addi.n	a9, a9, 4
400810d2:	f628b7        	blt	a8, a11, 400810cc <sys_heap_init+0x50>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
400810d5:	02cd      	mov.n	a12, a2
400810d7:	05ad      	mov.n	a10, a5
400810d9:	0b0c      	movi.n	a11, 0
400810db:	ffede5        	call8	40080fb8 <set_chunk_size>
	set_chunk_used(h, 0, true);
400810de:	05ad      	mov.n	a10, a5
400810e0:	1c0c      	movi.n	a12, 1
400810e2:	0b0c      	movi.n	a11, 0
400810e4:	ffe925        	call8	40080f78 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
400810e7:	c04320        	sub	a4, a3, a2
400810ea:	04cd      	mov.n	a12, a4
400810ec:	02bd      	mov.n	a11, a2
400810ee:	05ad      	mov.n	a10, a5
400810f0:	ffec65        	call8	40080fb8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
400810f3:	02dd      	mov.n	a13, a2
400810f5:	02bd      	mov.n	a11, a2
400810f7:	05ad      	mov.n	a10, a5
400810f9:	0c0c      	movi.n	a12, 0
400810fb:	ffe425        	call8	40080f3c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
400810fe:	03bd      	mov.n	a11, a3
40081100:	05ad      	mov.n	a10, a5
40081102:	0c0c      	movi.n	a12, 0
40081104:	ffeb25        	call8	40080fb8 <set_chunk_size>
40081107:	04dd      	mov.n	a13, a4
40081109:	03bd      	mov.n	a11, a3
4008110b:	05ad      	mov.n	a10, a5
4008110d:	0c0c      	movi.n	a12, 0
4008110f:	ffe2e5        	call8	40080f3c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
40081112:	03bd      	mov.n	a11, a3
40081114:	05ad      	mov.n	a10, a5
40081116:	1c0c      	movi.n	a12, 1
40081118:	ffe5e5        	call8	40080f78 <set_chunk_used>

	free_list_add(h, chunk0_size);
4008111b:	02bd      	mov.n	a11, a2
4008111d:	05ad      	mov.n	a10, a5
4008111f:	ffed25        	call8	40080ff0 <free_list_add>
}
40081122:	f01d      	retw.n

40081124 <arch_printk_char_out>:
	CODE_UNREACHABLE;
}

/* Boot-time static default printk handler, possibly to be overridden later. */
int arch_printk_char_out(int c)
{
40081124:	004136        	entry	a1, 32
	if (c == '\n') {
40081127:	079266        	bnei	a2, 10, 40081132 <arch_printk_char_out+0xe>
		esp32_rom_uart_tx_one_char('\r');
4008112a:	da0c      	movi.n	a10, 13
4008112c:	fd2e81        	l32r	a8, 400805e4 <_iram_text_start+0x94>
4008112f:	0008e0        	callx8	a8
	}
	esp32_rom_uart_tx_one_char(c);
40081132:	74a020        	extui	a10, a2, 0, 8
40081135:	fd2b81        	l32r	a8, 400805e4 <_iram_text_start+0x94>
40081138:	0008e0        	callx8	a8
	return 0;
}
4008113b:	020c      	movi.n	a2, 0
4008113d:	f01d      	retw.n
	...

40081140 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
40081140:	004136        	entry	a1, 32
40081143:	fd29a1        	l32r	a10, 400805e8 <_iram_text_start+0x98>
40081146:	015465        	call8	4008268c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
40081149:	fd2821        	l32r	a2, 400805ec <_iram_text_start+0x9c>
4008114c:	0062a2        	s32i	a10, a2, 0
	__stdout_hook_install(console_out);
4008114f:	fd2821        	l32r	a2, 400805f0 <_iram_text_start+0xa0>
40081152:	02ad      	mov.n	a10, a2
40081154:	00a9a5        	call8	40081bf0 <__stdout_hook_install>
	__printk_hook_install(console_out);
40081157:	02ad      	mov.n	a10, a2
40081159:	ffa4a5        	call8	40080ba4 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
4008115c:	020c      	movi.n	a2, 0
4008115e:	f01d      	retw.n

40081160 <console_out>:
{
40081160:	004136        	entry	a1, 32
	if ('\n' == c) {
40081163:	fd2231        	l32r	a3, 400805ec <_iram_text_start+0x9c>
40081166:	0a9266        	bnei	a2, 10, 40081174 <console_out+0x14>
40081169:	03a8      	l32i.n	a10, a3, 0
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
4008116b:	2a88      	l32i.n	a8, a10, 8
4008116d:	db0c      	movi.n	a11, 13
4008116f:	1888      	l32i.n	a8, a8, 4
40081171:	0008e0        	callx8	a8
	uart_poll_out(uart_console_dev, c);
40081174:	03a8      	l32i.n	a10, a3, 0
40081176:	2a38      	l32i.n	a3, a10, 8
40081178:	74b020        	extui	a11, a2, 0, 8
4008117b:	1338      	l32i.n	a3, a3, 4
4008117d:	0003e0        	callx8	a3
}
40081180:	f01d      	retw.n
	...

40081184 <clock_control_esp32_on>:
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
}

static int clock_control_esp32_on(const struct device *dev,
				  clock_control_subsys_t sys)
{
40081184:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
	uint32_t offset =  GET_REG_OFFSET(sys);

	__ASSERT_NO_MSG(bank >= CLOCK_REGS_BANK_COUNT);

	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
40081187:	180c      	movi.n	a8, 1
	uint32_t bank = GET_REG_BANK(sys);
40081189:	419530        	srli	a9, a3, 5
	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
4008118c:	401300        	ssl	a3
4008118f:	a13800        	sll	a3, a8
40081192:	fd1881        	l32r	a8, 400805f4 <_iram_text_start+0xa4>
40081195:	1199d0        	slli	a9, a9, 3
40081198:	889a      	add.n	a8, a8, a9
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
4008119a:	08a8      	l32i.n	a10, a8, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].rst);
	return 0;
}
4008119c:	020c      	movi.n	a2, 0
4008119e:	0020c0        	memw
400811a1:	0a98      	l32i.n	a9, a10, 0
#include <stdbool.h>
#include <arch/xtensa/arch.h>

static inline void esp32_set_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
400811a3:	209390        	or	a9, a3, a9
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
400811a6:	0020c0        	memw
400811a9:	0a99      	s32i.n	a9, a10, 0
	return *(volatile uint32_t *)addr;
400811ab:	1898      	l32i.n	a9, a8, 4
}

static inline void esp32_clear_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
400811ad:	f87c      	movi.n	a8, -1
400811af:	0020c0        	memw
400811b2:	09a8      	l32i.n	a10, a9, 0
400811b4:	308830        	xor	a8, a8, a3
400811b7:	1088a0        	and	a8, a8, a10
	*(volatile uint32_t *)addr = data;
400811ba:	0020c0        	memw
400811bd:	0989      	s32i.n	a8, a9, 0
400811bf:	f01d      	retw.n
400811c1:	000000        	ill

400811c4 <clock_control_esp32_get_status>:
	return 0;
}

static enum clock_control_status clock_control_esp32_get_status(const struct device *dev,
								clock_control_subsys_t sys)
{
400811c4:	004136        	entry	a1, 32
	ARG_UNUSED(dev);
	uint32_t bank = GET_REG_BANK(sys);
400811c7:	418530        	srli	a8, a3, 5
	uint32_t offset =  GET_REG_OFFSET(sys);

	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400811ca:	1198d0        	slli	a9, a8, 3
400811cd:	fd0981        	l32r	a8, 400805f4 <_iram_text_start+0xa4>
400811d0:	889a      	add.n	a8, a8, a9
 * @return Value
 */
static inline uint32_t IRAM_ATTR DPORT_READ_PERI_REG(uint32_t reg)
{
#if defined(BOOTLOADER_BUILD) || defined(CONFIG_FREERTOS_UNICORE) || !defined(ESP_PLATFORM)
    return _DPORT_REG_READ(reg);
400811d2:	0828      	l32i.n	a2, a8, 0
		return CLOCK_CONTROL_STATUS_ON;
	}
	return CLOCK_CONTROL_STATUS_OFF;
}
400811d4:	180c      	movi.n	a8, 1
400811d6:	0020c0        	memw
400811d9:	0228      	l32i.n	a2, a2, 0
	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400811db:	400300        	ssr	a3
400811de:	912020        	srl	a2, a2
400811e1:	043020        	extui	a3, a2, 0, 1
}
400811e4:	220c      	movi.n	a2, 2
400811e6:	832830        	moveqz	a2, a8, a3
400811e9:	f01d      	retw.n
	...

400811ec <clock_control_esp32_get_rate>:

static int clock_control_esp32_get_rate(const struct device *dev,
					clock_control_subsys_t sub_system,
					uint32_t *rate)
{
400811ec:	004136        	entry	a1, 32
	ARG_UNUSED(sub_system);

	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
	uint32_t soc_clk_sel = REG_GET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL);
400811ef:	fd0281        	l32r	a8, 400805f8 <_iram_text_start+0xa8>
400811f2:	0020c0        	memw
400811f5:	0888      	l32i.n	a8, a8, 0
400811f7:	158b80        	extui	a8, a8, 27, 2

	switch (soc_clk_sel) {
400811fa:	688c      	beqz.n	a8, 40081204 <clock_control_esp32_get_rate+0x18>
400811fc:	020c      	movi.n	a2, 0
400811fe:	171826        	beqi	a8, 1, 40081219 <clock_control_esp32_get_rate+0x2d>
40081201:	000706        	j	40081221 <clock_control_esp32_get_rate+0x35>
	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
40081204:	1228      	l32i.n	a2, a2, 4
	case RTC_CNTL_SOC_CLK_SEL_XTL:
		*rate = xtal_freq[xtal_freq_sel];
40081206:	2228      	l32i.n	a2, a2, 8
40081208:	1192e0        	slli	a9, a2, 2
4008120b:	fcfc21        	l32r	a2, 400805fc <_iram_text_start+0xac>
4008120e:	229a      	add.n	a2, a2, a9
40081210:	0228      	l32i.n	a2, a2, 0
40081212:	0429      	s32i.n	a2, a4, 0
		return 0;
40081214:	082d      	mov.n	a2, a8
40081216:	000306        	j	40081226 <clock_control_esp32_get_rate+0x3a>
	case RTC_CNTL_SOC_CLK_SEL_PLL:
		*rate = MHZ(80);
40081219:	fcf981        	l32r	a8, 40080600 <_iram_text_start+0xb0>
4008121c:	0489      	s32i.n	a8, a4, 0
		return 0;
4008121e:	000106        	j	40081226 <clock_control_esp32_get_rate+0x3a>
	default:
		*rate = 0;
40081221:	0429      	s32i.n	a2, a4, 0
		return -ENOTSUP;
40081223:	ddaf22        	movi	a2, -35
	}
}
40081226:	f01d      	retw.n

40081228 <clock_control_esp32_init>:

static int clock_control_esp32_init(const struct device *dev)
{
40081228:	004136        	entry	a1, 32
	struct esp32_clock_config *cfg = DEV_CFG(dev);
4008122b:	1238      	l32i.n	a3, a2, 4

	/* Wait for UART first before changing freq to avoid garbage on console */
	esp32_rom_uart_tx_wait_idle(0);
4008122d:	0a0c      	movi.n	a10, 0
4008122f:	fd0181        	l32r	a8, 40080634 <_iram_text_start+0xe4>
40081232:	0008e0        	callx8	a8

	switch (cfg->clk_src_sel) {
40081235:	0368      	l32i.n	a6, a3, 0
40081237:	968c      	beqz.n	a6, 40081244 <clock_control_esp32_init+0x1c>
		break;
	case ESP32_CLK_SRC_PLL:
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
		break;
	default:
		return -EINVAL;
40081239:	a26c      	movi.n	a2, -22
	switch (cfg->clk_src_sel) {
4008123b:	021626        	beqi	a6, 1, 40081241 <clock_control_esp32_init+0x19>
4008123e:	006ec6        	j	400813fd <clock_control_esp32_init+0x1d5>
40081241:	001186        	j	4008128b <clock_control_esp32_init+0x63>
		REG_SET_FIELD(APB_CTRL_SYSCLK_CONF_REG, APB_CTRL_PRE_DIV_CNT, cfg->xtal_div);
40081244:	fcf051        	l32r	a5, 40080604 <_iram_text_start+0xb4>
40081247:	3328      	l32i.n	a2, a3, 12
40081249:	0020c0        	memw
4008124c:	0548      	l32i.n	a4, a5, 0
4008124e:	00ac62        	movi	a6, 0xfffffc00
40081251:	104460        	and	a4, a4, a6
40081254:	942020        	extui	a2, a2, 0, 10
40081257:	202240        	or	a2, a2, a4
4008125a:	0020c0        	memw
4008125d:	0529      	s32i.n	a2, a5, 0
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
4008125f:	2328      	l32i.n	a2, a3, 8
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081261:	fcea51        	l32r	a5, 4008060c <_iram_text_start+0xbc>
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
40081264:	1142e0        	slli	a4, a2, 2
40081267:	fce521        	l32r	a2, 400805fc <_iram_text_start+0xac>
4008126a:	224a      	add.n	a2, a2, a4
4008126c:	0228      	l32i.n	a2, a2, 0
4008126e:	fce641        	l32r	a4, 40080608 <_iram_text_start+0xb8>
40081271:	220b      	addi.n	a2, a2, -1
40081273:	0020c0        	memw
40081276:	0429      	s32i.n	a2, a4, 0
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081278:	fce041        	l32r	a4, 400805f8 <_iram_text_start+0xa8>
4008127b:	0020c0        	memw
4008127e:	0428      	l32i.n	a2, a4, 0
40081280:	102250        	and	a2, a2, a5
40081283:	0020c0        	memw
40081286:	0429      	s32i.n	a2, a4, 0
		break;
40081288:	0051c6        	j	400813d3 <clock_control_esp32_init+0x1ab>
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
4008128b:	1328      	l32i.n	a2, a3, 4
	switch (cpu_freq) {
4008128d:	a0a042        	movi	a4, 160
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081290:	2378      	l32i.n	a7, a3, 8
	switch (cpu_freq) {
40081292:	0c1247        	beq	a2, a4, 400812a2 <clock_control_esp32_init+0x7a>
40081295:	f0a052        	movi	a5, 240
		cpu_period_sel = DPORT_CPUPERIOD_SEL_240;
40081298:	240c      	movi.n	a4, 2
	switch (cpu_freq) {
4008129a:	081257        	beq	a2, a5, 400812a6 <clock_control_esp32_init+0x7e>
	uint32_t cpu_period_sel = DPORT_CPUPERIOD_SEL_80;
4008129d:	040c      	movi.n	a4, 0
4008129f:	000046        	j	400812a4 <clock_control_esp32_init+0x7c>
		cpu_period_sel = DPORT_CPUPERIOD_SEL_160;
400812a2:	064d      	mov.n	a4, a6
		pll_freq = RTC_PLL_FREQ_320M;
400812a4:	060c      	movi.n	a6, 0
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
400812a6:	fcda51        	l32r	a5, 40080610 <_iram_text_start+0xc0>
400812a9:	fcda81        	l32r	a8, 40080614 <_iram_text_start+0xc4>
400812ac:	0020c0        	memw
400812af:	0528      	l32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
400812b1:	8d1c      	movi.n	a13, 24
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
400812b3:	102280        	and	a2, a2, a8
400812b6:	0020c0        	memw
400812b9:	0529      	s32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
400812bb:	0c0c      	movi.n	a12, 0
400812bd:	04a0b2        	movi	a11, 4
400812c0:	66a0a2        	movi	a10, 102
400812c3:	fcdd81        	l32r	a8, 40080638 <_iram_text_start+0xe8>
400812c6:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_EXT_CAP, BBPLL_IR_CAL_EXT_CAP_VAL);
400812c9:	0d2c      	movi.n	a13, 32
400812cb:	1c0c      	movi.n	a12, 1
400812cd:	04a0b2        	movi	a11, 4
400812d0:	66a0a2        	movi	a10, 102
400812d3:	fcd981        	l32r	a8, 40080638 <_iram_text_start+0xe8>
400812d6:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_FCAL, BBPLL_OC_ENB_FCAL_VAL);
400812d9:	4c0c      	movi.n	a12, 4
400812db:	0cbd      	mov.n	a11, a12
400812dd:	9aa0d2        	movi	a13, 154
400812e0:	66a0a2        	movi	a10, 102
400812e3:	fcd581        	l32r	a8, 40080638 <_iram_text_start+0xe8>
400812e6:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_VCON, BBPLL_OC_ENB_VCON_VAL);
400812e9:	0d0c      	movi.n	a13, 0
400812eb:	ac0c      	movi.n	a12, 10
400812ed:	4b0c      	movi.n	a11, 4
400812ef:	66a0a2        	movi	a10, 102
400812f2:	fcd181        	l32r	a8, 40080638 <_iram_text_start+0xe8>
400812f5:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_CAL_7_0, BBPLL_BBADC_CAL_7_0_VAL);
400812f8:	0d0c      	movi.n	a13, 0
400812fa:	cc0c      	movi.n	a12, 12
400812fc:	4b0c      	movi.n	a11, 4
400812fe:	66a0a2        	movi	a10, 102
40081301:	fccd81        	l32r	a8, 40080638 <_iram_text_start+0xe8>
40081304:	0008e0        	callx8	a8
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
40081307:	fcc421        	l32r	a2, 40080618 <_iram_text_start+0xc8>
4008130a:	fcc481        	l32r	a8, 4008061c <_iram_text_start+0xcc>
4008130d:	0020c0        	memw
40081310:	0258      	l32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
40081312:	bc0c      	movi.n	a12, 11
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
40081314:	105580        	and	a5, a5, a8
40081317:	fcc281        	l32r	a8, 40080620 <_iram_text_start+0xd0>
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
4008131a:	4b0c      	movi.n	a11, 4
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
4008131c:	205580        	or	a5, a5, a8
4008131f:	0020c0        	memw
40081322:	0259      	s32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
40081324:	fcc051        	l32r	a5, 40080624 <_iram_text_start+0xd4>
40081327:	1126c0        	slli	a2, a6, 4
4008132a:	c06260        	sub	a6, a2, a6
4008132d:	256a      	add.n	a2, a5, a6
4008132f:	0102d2        	l8ui	a13, a2, 1
40081332:	66a0a2        	movi	a10, 102
40081335:	fcc081        	l32r	a8, 40080638 <_iram_text_start+0xe8>
40081338:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
4008133b:	0202d2        	l8ui	a13, a2, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008133e:	1127f0        	slli	a2, a7, 1
40081341:	227a      	add.n	a2, a2, a7
40081343:	1122f0        	slli	a2, a2, 1
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081346:	9c0c      	movi.n	a12, 9
40081348:	4b0c      	movi.n	a11, 4
4008134a:	66a0a2        	movi	a10, 102
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008134d:	226a      	add.n	a2, a2, a6
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
4008134f:	fcba81        	l32r	a8, 40080638 <_iram_text_start+0xe8>
40081352:	0008e0        	callx8	a8
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081355:	252a      	add.n	a2, a5, a2
40081357:	0602d2        	l8ui	a13, a2, 6
4008135a:	050252        	l8ui	a5, a2, 5
4008135d:	11dd90        	slli	a13, a13, 7
40081360:	1155c0        	slli	a5, a5, 4
40081363:	20dd50        	or	a13, a13, a5
40081366:	030252        	l8ui	a5, a2, 3
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081369:	2c0c      	movi.n	a12, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008136b:	20dd50        	or	a13, a13, a5
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
4008136e:	74d0d0        	extui	a13, a13, 0, 8
40081371:	4b0c      	movi.n	a11, 4
40081373:	66a0a2        	movi	a10, 102
40081376:	fcb081        	l32r	a8, 40080638 <_iram_text_start+0xe8>
40081379:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DIV_7_0, bb_cfg->div7_0);
4008137c:	0402d2        	l8ui	a13, a2, 4
4008137f:	3c0c      	movi.n	a12, 3
40081381:	4b0c      	movi.n	a11, 4
40081383:	66a0a2        	movi	a10, 102
40081386:	fcac81        	l32r	a8, 40080638 <_iram_text_start+0xe8>
40081389:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DCUR, ((bb_cfg->bw << 6) | bb_cfg->dcur));
4008138c:	0802d2        	l8ui	a13, a2, 8
4008138f:	070222        	l8ui	a2, a2, 7
40081392:	11dda0        	slli	a13, a13, 6
40081395:	20dd20        	or	a13, a13, a2
40081398:	74d0d0        	extui	a13, a13, 0, 8
4008139b:	5c0c      	movi.n	a12, 5
4008139d:	4b0c      	movi.n	a11, 4
4008139f:	66a0a2        	movi	a10, 102
400813a2:	fca581        	l32r	a8, 40080638 <_iram_text_start+0xe8>
400813a5:	0008e0        	callx8	a8
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
400813a8:	fca021        	l32r	a2, 40080628 <_iram_text_start+0xd8>
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
400813ab:	fc9851        	l32r	a5, 4008060c <_iram_text_start+0xbc>
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
400813ae:	0020c0        	memw
400813b1:	0249      	s32i.n	a4, a2, 0
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
400813b3:	fc9141        	l32r	a4, 400805f8 <_iram_text_start+0xa8>
400813b6:	0020c0        	memw
400813b9:	0428      	l32i.n	a2, a4, 0
400813bb:	102250        	and	a2, a2, a5
400813be:	fc9b51        	l32r	a5, 4008062c <_iram_text_start+0xdc>
400813c1:	202250        	or	a2, a2, a5
400813c4:	0020c0        	memw
400813c7:	0429      	s32i.n	a2, a4, 0
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
400813c9:	fc9921        	l32r	a2, 40080630 <_iram_text_start+0xe0>
400813cc:	f44c      	movi.n	a4, 79
400813ce:	0020c0        	memw
400813d1:	0249      	s32i.n	a4, a2, 0

	/* Re-calculate the CCOUNT register value to make time calculation correct.
	 * This should be updated on each frequency change
	 * New CCOUNT = Current CCOUNT * (new freq / old freq)
	 */
	XTHAL_SET_CCOUNT((uint64_t)XTHAL_GET_CCOUNT() * cfg->cpu_freq / xtal_freq[cfg->xtal_freq_sel]);
400813d3:	03ea40        	rsr.ccount	a4
400813d6:	13a8      	l32i.n	a10, a3, 4
400813d8:	2338      	l32i.n	a3, a3, 8
400813da:	312f40        	srai	a2, a4, 31
400813dd:	1153e0        	slli	a5, a3, 2
400813e0:	fc8731        	l32r	a3, 400805fc <_iram_text_start+0xac>
400813e3:	8222a0        	mull	a2, a2, a10
400813e6:	a2ba40        	muluh	a11, a10, a4
400813e9:	335a      	add.n	a3, a3, a5
400813eb:	03c8      	l32i.n	a12, a3, 0
400813ed:	82aa40        	mull	a10, a10, a4
400813f0:	0d0c      	movi.n	a13, 0
400813f2:	80b2b0        	add	a11, a2, a11
400813f5:	0231e5        	call8	40083714 <__udivdi3>
400813f8:	13eaa0        	wsr.ccount	a10
	return 0;
400813fb:	020c      	movi.n	a2, 0
}
400813fd:	f01d      	retw.n
	...

40081400 <clock_control_esp32_off>:
{
40081400:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
40081403:	419530        	srli	a9, a3, 5
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
40081406:	180c      	movi.n	a8, 1
40081408:	401300        	ssl	a3
4008140b:	a13800        	sll	a3, a8
4008140e:	1189d0        	slli	a8, a9, 3
40081411:	fc7891        	l32r	a9, 400805f4 <_iram_text_start+0xa4>
}
40081414:	020c      	movi.n	a2, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
40081416:	998a      	add.n	a9, a9, a8
	return *(volatile uint32_t *)addr;
40081418:	09a8      	l32i.n	a10, a9, 0
4008141a:	f87c      	movi.n	a8, -1
4008141c:	0020c0        	memw
4008141f:	0ab8      	l32i.n	a11, a10, 0
40081421:	308830        	xor	a8, a8, a3
40081424:	1088b0        	and	a8, a8, a11
	*(volatile uint32_t *)addr = data;
40081427:	0020c0        	memw
4008142a:	0a89      	s32i.n	a8, a10, 0
	return *(volatile uint32_t *)addr;
4008142c:	1988      	l32i.n	a8, a9, 4
4008142e:	0020c0        	memw
40081431:	0898      	l32i.n	a9, a8, 0
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081433:	203390        	or	a3, a3, a9
	*(volatile uint32_t *)addr = data;
40081436:	0020c0        	memw
40081439:	0839      	s32i.n	a3, a8, 0
}
4008143b:	f01d      	retw.n
4008143d:	000000        	ill

40081440 <set_reg>:

	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
}

static int set_reg(uint32_t pin, uint32_t clr_mask, uint32_t set_mask)
{
40081440:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081443:	782c      	movi.n	a8, 39
	volatile uint32_t *reg = reg_for_pin(pin);
	uint32_t v;

	if (!reg) {
		return -EINVAL;
40081445:	aa6c      	movi.n	a10, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081447:	253827        	bltu	a8, a2, 40081470 <set_reg+0x30>
	off = pin_mux_off[pin];
4008144a:	fc7c91        	l32r	a9, 4008063c <_iram_text_start+0xec>
4008144d:	992a      	add.n	a9, a9, a2
4008144f:	000992        	l8ui	a9, a9, 0
	if (!off) {
40081452:	a99c      	beqz.n	a9, 40081470 <set_reg+0x30>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081454:	fc7b21        	l32r	a2, 40080640 <_iram_text_start+0xf0>
	}

	v = *reg;
	v &= ~clr_mask;
40081457:	f87c      	movi.n	a8, -1
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081459:	992a      	add.n	a9, a9, a2
	v = *reg;
4008145b:	0020c0        	memw
4008145e:	0928      	l32i.n	a2, a9, 0
	v &= ~clr_mask;
40081460:	308830        	xor	a8, a8, a3
40081463:	108820        	and	a8, a8, a2
	v |= set_mask;
40081466:	208840        	or	a8, a8, a4
	*reg = v;
40081469:	0020c0        	memw
4008146c:	0989      	s32i.n	a8, a9, 0

	return 0;
4008146e:	0a0c      	movi.n	a10, 0
}
40081470:	0a2d      	mov.n	a2, a10
40081472:	f01d      	retw.n

40081474 <pinmux_set>:

static int pinmux_set(const struct device *dev, uint32_t pin, uint32_t func)
{
40081474:	004136        	entry	a1, 32
40081477:	20a330        	or	a10, a3, a3
	 * value due to a deficiency in the pinmux API.  This setting is
	 * part of the GPIO API.
	 */

	if (func > 6) {
		return -EINVAL;
4008147a:	eaaf22        	movi	a2, -22
	if (func > 6) {
4008147d:	1174f6        	bgeui	a4, 7, 40081492 <pinmux_set+0x1e>
	}

	return set_reg(pin, MCU_SEL_M, func<<MCU_SEL_S | 2<<FUN_DRV_S);
40081480:	fc71c1        	l32r	a12, 40080644 <_iram_text_start+0xf4>
40081483:	114440        	slli	a4, a4, 12
40081486:	fc70b1        	l32r	a11, 40080648 <_iram_text_start+0xf8>
40081489:	20c4c0        	or	a12, a4, a12
4008148c:	fffb25        	call8	40081440 <set_reg>
4008148f:	202aa0        	or	a2, a10, a10
}
40081492:	f01d      	retw.n

40081494 <pinmux_input>:
	return -EINVAL;
}

#define CFG(id)   ((GPIO_ ## id ## _REG) & 0xff)
static int pinmux_input(const struct device *dev, uint32_t pin, uint8_t func)
{
40081494:	004136        	entry	a1, 32
	static const uint8_t offs[2][3] = {
		{ CFG(ENABLE1_W1TC), CFG(ENABLE1_W1TS), 32 },
		{ CFG(ENABLE_W1TC), CFG(ENABLE_W1TS), 0 },
	};
	const uint8_t *line = offs[pin < 32];
40081497:	f81c      	movi.n	a8, 31
{
40081499:	744040        	extui	a4, a4, 0, 8
	const uint8_t *line = offs[pin < 32];
4008149c:	00a052        	movi	a5, 0
4008149f:	013837        	bltu	a8, a3, 400814a4 <pinmux_input+0x10>
400814a2:	350c      	movi.n	a5, 3
400814a4:	fc6a81        	l32r	a8, 4008064c <_iram_text_start+0xfc>
	/* Since PINMUX_INPUT_ENABLED == 1 and PINMUX_OUTPUT_ENABLED == 0,
	 * we can not set a gpio port as input and output at the same time,
	 * So we always set the gpio as input. Thus, the gpio can be used on
	 * I2C drivers for example.
	 */
	r = set_reg(pin, 0, FUN_IE);
400814a7:	00a2c2        	movi	a12, 0x200
400814aa:	0b0c      	movi.n	a11, 0
400814ac:	03ad      	mov.n	a10, a3
	const uint8_t *line = offs[pin < 32];
400814ae:	805580        	add	a5, a5, a8
	r = set_reg(pin, 0, FUN_IE);
400814b1:	fff8e5        	call8	40081440 <set_reg>
	if (func == PINMUX_INPUT_ENABLED) {
400814b4:	051466        	bnei	a4, 1, 400814bd <pinmux_input+0x29>
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[0]);
400814b7:	000582        	l8ui	a8, a5, 0
400814ba:	000286        	j	400814c8 <pinmux_input+0x34>
	} else if (func == PINMUX_OUTPUT_ENABLED) {
400814bd:	74ec      	bnez.n	a4, 400814e8 <pinmux_input+0x54>
		if (pin >= 34U && pin <= 39U) {
400814bf:	dec342        	addi	a4, a3, -34
400814c2:	2264b6        	bltui	a4, 6, 400814e8 <pinmux_input+0x54>
			/* These pins are input only */
			return -EINVAL;
		}
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[1]);
400814c5:	010582        	l8ui	a8, a5, 1
400814c8:	fc6241        	l32r	a4, 40080650 <_iram_text_start+0x100>
400814cb:	884a      	add.n	a8, a8, a4
	} else {
		return -EINVAL;
	}

	if (r < 0) {
400814cd:	019a96        	bltz	a10, 400814ea <pinmux_input+0x56>
		return r;
	}

	*reg = BIT(pin - line[2]);
400814d0:	020542        	l8ui	a4, a5, 2
400814d3:	150c      	movi.n	a5, 1
400814d5:	c03340        	sub	a3, a3, a4
400814d8:	401300        	ssl	a3
400814db:	a13500        	sll	a3, a5
400814de:	0020c0        	memw
400814e1:	0839      	s32i.n	a3, a8, 0

	ARG_UNUSED(dev);
	return 0;
400814e3:	0a0c      	movi.n	a10, 0
400814e5:	000046        	j	400814ea <pinmux_input+0x56>
		return -EINVAL;
400814e8:	aa6c      	movi.n	a10, -22
}
400814ea:	0a2d      	mov.n	a2, a10
400814ec:	f01d      	retw.n
	...

400814f0 <pinmux_initialize>:
	.pullup = pinmux_pullup,
	.input = pinmux_input
};

static int pinmux_initialize(const struct device *device)
{
400814f0:	004136        	entry	a1, 32
	uint32_t pin;

	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400814f3:	020c      	movi.n	a2, 0
		pinmux_set(NULL, pin, 0);
400814f5:	203220        	or	a3, a2, a2
400814f8:	20b220        	or	a11, a2, a2
400814fb:	20c330        	or	a12, a3, a3
400814fe:	20a330        	or	a10, a3, a3
40081501:	fff725        	call8	40081474 <pinmux_set>
	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
40081504:	221b      	addi.n	a2, a2, 1
40081506:	882c      	movi.n	a8, 40
40081508:	ec9287        	bne	a2, a8, 400814f8 <pinmux_initialize+0x8>
	}

	ARG_UNUSED(device);
	return 0;
}
4008150b:	020c      	movi.n	a2, 0
4008150d:	f01d      	retw.n
	...

40081510 <pinmux_pullup>:
{
40081510:	004136        	entry	a1, 32
40081513:	744040        	extui	a4, a4, 0, 8
40081516:	03ad      	mov.n	a10, a3
	switch (func) {
40081518:	848c      	beqz.n	a4, 40081524 <pinmux_pullup+0x14>
4008151a:	0f1426        	beqi	a4, 1, 4008152d <pinmux_pullup+0x1d>
	return -EINVAL;
4008151d:	aa6c      	movi.n	a10, -22
4008151f:	0004c6        	j	40081536 <pinmux_pullup+0x26>
40081522:	c20000        	quou	a0, a0, a0
		return set_reg(pin, FUN_PU, FUN_PD);
40081525:	b280a0        	mulsh	a8, a0, a10
40081528:	4600a1        	l32r	a10, 40052d28 <esp32_rom_gpio_matrix_out+0x48e1c>
4008152b:	c20001        	l32r	a0, 40071d2c <esp32_rom_gpio_matrix_out+0x67e20>
		return set_reg(pin, FUN_PD, FUN_PU);
4008152e:	b200a1        	l32r	a10, 4006dd30 <esp32_rom_gpio_matrix_out+0x63e24>
40081531:	e580a0        	extui	a8, a10, 16, 15
40081534:	2dfff0        	lsi	f15, a15, 180
}
40081537:	1d0a      	add.n	a1, a13, a0
40081539:	0000f0        	callx12	a0

4008153c <pinmux_get>:
{
4008153c:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008153f:	782c      	movi.n	a8, 39
		return -EINVAL;
40081541:	a26c      	movi.n	a2, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081543:	1d3837        	bltu	a8, a3, 40081564 <pinmux_get+0x28>
	off = pin_mux_off[pin];
40081546:	fc3d21        	l32r	a2, 4008063c <_iram_text_start+0xec>
40081549:	223a      	add.n	a2, a2, a3
4008154b:	000282        	l8ui	a8, a2, 0
		return -EINVAL;
4008154e:	a26c      	movi.n	a2, -22
	if (!off) {
40081550:	089c      	beqz.n	a8, 40081564 <pinmux_get+0x28>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081552:	fc3b21        	l32r	a2, 40080640 <_iram_text_start+0xf0>
40081555:	882a      	add.n	a8, a8, a2
	*func = (*reg & MCU_SEL_M) >> MCU_SEL_S;
40081557:	0020c0        	memw
4008155a:	0828      	l32i.n	a2, a8, 0
4008155c:	242c20        	extui	a2, a2, 12, 3
4008155f:	0429      	s32i.n	a2, a4, 0
	return 0;
40081561:	00a022        	movi	a2, 0
}
40081564:	f01d      	retw.n
	...

40081568 <ccompare_isr>:
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
	return val;
}

static void ccompare_isr(const void *arg)
{
40081568:	004136        	entry	a1, 32
	z_xt_ints_off(1 << irq);
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008156b:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008156e:	03eaa0        	rsr.ccount	a10
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount();
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
40081571:	fc3891        	l32r	a9, 40080654 <_iram_text_start+0x104>
40081574:	fc3981        	l32r	a8, 40080658 <_iram_text_start+0x108>
40081577:	0029b2        	l32i	a11, a9, 0
4008157a:	c0aab0        	sub	a10, a10, a11
4008157d:	a2aa80        	muluh	a10, a10, a8

	last_count += dticks * CYC_PER_TICK;
40081580:	fc3781        	l32r	a8, 4008065c <_iram_text_start+0x10c>
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
40081583:	41a9a0        	srli	a10, a10, 9
	last_count += dticks * CYC_PER_TICK;
40081586:	828a80        	mull	a8, a10, a8
40081589:	8088b0        	add	a8, a8, a11
4008158c:	006982        	s32i	a8, a9, 0
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	XTOS_RESTORE_INTLEVEL(key);
4008158f:	13e6c0        	wsr.ps	a12
40081592:	002010        	rsync
		}
		set_ccompare(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
40081595:	01d2a5        	call8	400832c0 <z_clock_announce>
}
40081598:	f01d      	retw.n
	...

4008159c <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
4008159c:	004136        	entry	a1, 32
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008159f:	03ea80        	rsr.ccount	a8
	ARG_UNUSED(device);

	IRQ_CONNECT(TIMER_IRQ, 0, ccompare_isr, 0, 0);
	set_ccompare(ccount() + CYC_PER_TICK);
400815a2:	fc2e91        	l32r	a9, 4008065c <_iram_text_start+0x10c>
400815a5:	889a      	add.n	a8, a8, a9
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
400815a7:	13f180        	wsr.ccompare1	a8
 */
static inline void z_xt_ints_on(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400815aa:	03e480        	rsr.intenable	a8
	val |= mask;
400815ad:	fc2c91        	l32r	a9, 40080660 <_iram_text_start+0x110>
400815b0:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400815b3:	13e480        	wsr.intenable	a8
400815b6:	002010        	rsync
	irq_enable(TIMER_IRQ);
	return 0;
}
400815b9:	020c      	movi.n	a2, 0
400815bb:	f01d      	retw.n
400815bd:	000000        	ill

400815c0 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
400815c0:	004136        	entry	a1, 32
	ARG_UNUSED(idle);

#if defined(CONFIG_TICKLESS_KERNEL)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
400815c3:	020266        	bnei	a2, -1, 400815c9 <z_clock_set_timeout+0x9>
400815c6:	fc2721        	l32r	a2, 40080664 <_iram_text_start+0x114>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400815c9:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400815cc:	03eab0        	rsr.ccount	a11

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount(), cyc, adj;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK;
400815cf:	080c      	movi.n	a8, 0
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
400815d1:	220b      	addi.n	a2, a2, -1
	cyc = ticks * CYC_PER_TICK;
400815d3:	532280        	max	a2, a2, a8
400815d6:	fc2381        	l32r	a8, 40080664 <_iram_text_start+0x114>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815d9:	fc23a1        	l32r	a10, 40080668 <_iram_text_start+0x118>
	cyc = ticks * CYC_PER_TICK;
400815dc:	432280        	min	a2, a2, a8
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815df:	fc1d81        	l32r	a8, 40080654 <_iram_text_start+0x104>
	cyc = ticks * CYC_PER_TICK;
400815e2:	fc1ed1        	l32r	a13, 4008065c <_iram_text_start+0x10c>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815e5:	0898      	l32i.n	a9, a8, 0
	cyc = ticks * CYC_PER_TICK;
400815e7:	8222d0        	mull	a2, a2, a13
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400815ea:	c0aa90        	sub	a10, a10, a9
400815ed:	aaba      	add.n	a10, a10, a11
	if (cyc <= MAX_CYC - adj) {
400815ef:	f87c      	movi.n	a8, -1
400815f1:	30e8a0        	xor	a14, a8, a10
400815f4:	013e27        	bltu	a14, a2, 400815f9 <z_clock_set_timeout+0x39>
		cyc += adj;
400815f7:	82aa      	add.n	a8, a2, a10
	} else {
		cyc = MAX_CYC;
	}
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400815f9:	fc1721        	l32r	a2, 40080658 <_iram_text_start+0x108>
400815fc:	a28820        	muluh	a8, a8, a2
	cyc += last_count;

	if ((cyc - curr) < MIN_DELAY) {
400815ff:	e7a322        	movi	a2, 0x3e7
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
40081602:	418980        	srli	a8, a8, 9
40081605:	8288d0        	mull	a8, a8, a13
	cyc += last_count;
40081608:	808980        	add	a8, a9, a8
	if ((cyc - curr) < MIN_DELAY) {
4008160b:	c0b8b0        	sub	a11, a8, a11
4008160e:	0232b7        	bltu	a2, a11, 40081614 <z_clock_set_timeout+0x54>
		cyc += CYC_PER_TICK;
40081611:	8088d0        	add	a8, a8, a13
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
40081614:	13f180        	wsr.ccompare1	a8
	XTOS_RESTORE_INTLEVEL(key);
40081617:	13e6c0        	wsr.ps	a12
4008161a:	002010        	rsync
	}

	set_ccompare(cyc);
	k_spin_unlock(&lock, key);
#endif
}
4008161d:	f01d      	retw.n
	...

40081620 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
40081620:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081623:	006380        	rsil	a8, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081626:	03ea20        	rsr.ccount	a2
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (ccount() - last_count) / CYC_PER_TICK;
40081629:	fc0a91        	l32r	a9, 40080654 <_iram_text_start+0x104>
4008162c:	0998      	l32i.n	a9, a9, 0
4008162e:	c02290        	sub	a2, a2, a9
40081631:	fc0991        	l32r	a9, 40080658 <_iram_text_start+0x108>
40081634:	a22290        	muluh	a2, a2, a9
40081637:	412920        	srli	a2, a2, 9
	XTOS_RESTORE_INTLEVEL(key);
4008163a:	13e680        	wsr.ps	a8
4008163d:	002010        	rsync

	k_spin_unlock(&lock, key);
	return ret;
}
40081640:	f01d      	retw.n
	...

40081644 <z_xtensa_fatal_error>:
	return "na";
#endif
}

void z_xtensa_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
40081644:	004136        	entry	a1, 32
	if (esf) {
40081647:	338c      	beqz.n	a3, 4008164e <z_xtensa_fatal_error+0xa>
		z_xtensa_dump_stack(esf);
40081649:	03ad      	mov.n	a10, a3
4008164b:	01e0a5        	call8	40083454 <z_xtensa_dump_stack>
	}

	z_fatal_error(reason, esf);
4008164e:	20b330        	or	a11, a3, a3
40081651:	20a220        	or	a10, a2, a2
40081654:	010925        	call8	400826e8 <z_fatal_error>
}
40081657:	000090        	retw
	...

4008165c <xtensa_spill_reg_windows>:
        SPILL_ALL_WINDOWS
4008165c:	10ccc0        	and	a12, a12, a12
4008165f:	408030        	rotw	3
40081662:	10ccc0        	and	a12, a12, a12
40081665:	408030        	rotw	3
40081668:	10ccc0        	and	a12, a12, a12
4008166b:	408030        	rotw	3
4008166e:	10ccc0        	and	a12, a12, a12
40081671:	408030        	rotw	3
40081674:	10ccc0        	and	a12, a12, a12
40081677:	408040        	rotw	4
        ret
4008167a:	f00d      	ret.n

4008167c <xtensa_save_high_regs>:
	rsr.WINDOWSTART a2
4008167c:	034920        	rsr.windowstart	a2
	slli a3, a2, (XCHAL_NUM_AREGS / 4)
4008167f:	113200        	slli	a3, a2, 16
	or a2, a2, a3
40081682:	202230        	or	a2, a2, a3
	rsr.WINDOWBASE a3
40081685:	034830        	rsr.windowbase	a3
	ssr a3
40081688:	400300        	ssr	a3
	srl a2, a2
4008168b:	912020        	srl	a2, a2
	mov a3, a1 /* Stash our original stack pointer */
4008168e:	013d      	mov.n	a3, a1
	bbsi a2, 1, _high_gpr_spill_done
40081690:	28e217        	bbsi	a2, 1, 400816bc <_high_gpr_spill_done>
	addi a1, a1, -16
40081693:	f0c112        	addi	a1, a1, -16
	s32i a4, a1, 0
40081696:	0149      	s32i.n	a4, a1, 0
	s32i a5, a1, 4
40081698:	1159      	s32i.n	a5, a1, 4
	s32i a6, a1, 8
4008169a:	2169      	s32i.n	a6, a1, 8
	s32i a7, a1, 12
4008169c:	3179      	s32i.n	a7, a1, 12
	bbsi a2, 2, _high_gpr_spill_done
4008169e:	1ae227        	bbsi	a2, 2, 400816bc <_high_gpr_spill_done>
	addi a1, a1, -16
400816a1:	f0c112        	addi	a1, a1, -16
	s32i a8, a1, 0
400816a4:	0189      	s32i.n	a8, a1, 0
	s32i a9, a1, 4
400816a6:	1199      	s32i.n	a9, a1, 4
	s32i a10, a1, 8
400816a8:	21a9      	s32i.n	a10, a1, 8
	s32i a11, a1, 12
400816aa:	31b9      	s32i.n	a11, a1, 12
	bbsi a2, 3, _high_gpr_spill_done
400816ac:	0ce237        	bbsi	a2, 3, 400816bc <_high_gpr_spill_done>
	addi a1, a1, -16
400816af:	f0c112        	addi	a1, a1, -16
	s32i a12, a1, 0
400816b2:	01c9      	s32i.n	a12, a1, 0
	s32i a13, a1, 4
400816b4:	11d9      	s32i.n	a13, a1, 4
	s32i a14, a1, 8
400816b6:	0261e2        	s32i	a14, a1, 8
	s32i a15, a1, 12
400816b9:	0361f2        	s32i	a15, a1, 12

400816bc <_high_gpr_spill_done>:
	addi a1, a1, -4
400816bc:	fcc112        	addi	a1, a1, -4
	s32i a3, a1, 0
400816bf:	0139      	s32i.n	a3, a1, 0
	ret
400816c1:	f00d      	ret.n
	...

400816c4 <xtensa_restore_high_regs>:
	l32i a2, a1, 0
400816c4:	0128      	l32i.n	a2, a1, 0
	addi a1, a1, 4
400816c6:	114b      	addi.n	a1, a1, 4
	mov a3, a2
400816c8:	023d      	mov.n	a3, a2
	beq a1, a2, _high_restore_done
400816ca:	261127        	beq	a1, a2, 400816f4 <_high_restore_done>
	addi a2, a2, -16
400816cd:	f0c222        	addi	a2, a2, -16
	l32i a4, a2, 0
400816d0:	0248      	l32i.n	a4, a2, 0
	l32i a5, a2, 4
400816d2:	1258      	l32i.n	a5, a2, 4
	l32i a6, a2, 8
400816d4:	2268      	l32i.n	a6, a2, 8
	l32i a7, a2, 12
400816d6:	3278      	l32i.n	a7, a2, 12
	beq a1, a2, _high_restore_done
400816d8:	181127        	beq	a1, a2, 400816f4 <_high_restore_done>
	addi a2, a2, -16
400816db:	f0c222        	addi	a2, a2, -16
	l32i a8, a2, 0
400816de:	0288      	l32i.n	a8, a2, 0
	l32i a9, a2, 4
400816e0:	1298      	l32i.n	a9, a2, 4
	l32i a10, a2, 8
400816e2:	22a8      	l32i.n	a10, a2, 8
	l32i a11, a2, 12
400816e4:	32b8      	l32i.n	a11, a2, 12
	beq a1, a2, _high_restore_done
400816e6:	0a1127        	beq	a1, a2, 400816f4 <_high_restore_done>
	addi a2, a2, -16
400816e9:	f0c222        	addi	a2, a2, -16
	l32i a12, a2, 0
400816ec:	02c8      	l32i.n	a12, a2, 0
	l32i a13, a2, 4
400816ee:	12d8      	l32i.n	a13, a2, 4
	l32i a14, a2, 8
400816f0:	22e8      	l32i.n	a14, a2, 8
	l32i a15, a2, 12
400816f2:	32f8      	l32i.n	a15, a2, 12

400816f4 <_high_restore_done>:
	mov a1, a3 /* Original stack */
400816f4:	031d      	mov.n	a1, a3
	ret
400816f6:	f00d      	ret.n
	...

400816f9 <_restore_context>:
	call0 xtensa_restore_high_regs
400816f9:	fffc85        	call0	400816c4 <xtensa_restore_high_regs>
	l32i a0, a1, BSA_PC_OFF
400816fc:	6108      	l32i.n	a0, a1, 24
	wsr.EPC6 a0
400816fe:	13b600        	wsr.epc6	a0
	l32i a0, a1, BSA_PS_OFF
40081701:	5108      	l32i.n	a0, a1, 20
	wsr.EPS6 a0
40081703:	13c600        	wsr.eps6	a0
	l32i a0, a1, BSA_SAR_OFF
40081706:	4108      	l32i.n	a0, a1, 16
	wsr.SAR a0
40081708:	130300        	wsr.sar	a0
	l32i a0, a1, BSA_LBEG_OFF
4008170b:	3108      	l32i.n	a0, a1, 12
	wsr.LBEG a0
4008170d:	130000        	wsr.lbeg	a0
	l32i a0, a1, BSA_LEND_OFF
40081710:	2108      	l32i.n	a0, a1, 8
	wsr.LEND a0
40081712:	130100        	wsr.lend	a0
	l32i a0, a1, BSA_LCOUNT_OFF
40081715:	1108      	l32i.n	a0, a1, 4
	wsr.LCOUNT a0
40081717:	130200        	wsr.lcount	a0
	l32i a0, a1, BSA_SCOMPARE1_OFF
4008171a:	0108      	l32i.n	a0, a1, 0
	wsr.SCOMPARE1 a0
4008171c:	130c00        	wsr.scompare1	a0
	rsync
4008171f:	002010        	rsync
	l32i a0, a1, BSA_A0_OFF
40081722:	7108      	l32i.n	a0, a1, 28
	l32i a2, a1, BSA_A2_OFF
40081724:	9128      	l32i.n	a2, a1, 36
	l32i a3, a1, BSA_A3_OFF
40081726:	a138      	l32i.n	a3, a1, 40
	addi a1, a1, BASE_SAVE_AREA_SIZE
40081728:	3cc112        	addi	a1, a1, 60
	rfi 6
4008172b:	003610        	rfi	6
	...

40081730 <xtensa_switch>:
	entry a1, 16
40081730:	002136        	entry	a1, 16
	SPILL_ALL_WINDOWS
40081733:	10ccc0        	and	a12, a12, a12
40081736:	408030        	rotw	3
40081739:	10ccc0        	and	a12, a12, a12
4008173c:	408030        	rotw	3
4008173f:	10ccc0        	and	a12, a12, a12
40081742:	408030        	rotw	3
40081745:	10ccc0        	and	a12, a12, a12
40081748:	408030        	rotw	3
4008174b:	10ccc0        	and	a12, a12, a12
4008174e:	408040        	rotw	4
	addi a1, a1, -BASE_SAVE_AREA_SIZE
40081751:	c4c112        	addi	a1, a1, -60
	s32i a0, a1, BSA_A0_OFF
40081754:	7109      	s32i.n	a0, a1, 28
	s32i a2, a1, BSA_A2_OFF
40081756:	9129      	s32i.n	a2, a1, 36
	s32i a3, a1, BSA_A3_OFF
40081758:	a139      	s32i.n	a3, a1, 40
	ODD_REG_SAVE
4008175a:	030300        	rsr.sar	a0
4008175d:	4109      	s32i.n	a0, a1, 16
4008175f:	030000        	rsr.lbeg	a0
40081762:	3109      	s32i.n	a0, a1, 12
40081764:	030100        	rsr.lend	a0
40081767:	2109      	s32i.n	a0, a1, 8
40081769:	030200        	rsr.lcount	a0
4008176c:	1109      	s32i.n	a0, a1, 4
4008176e:	030c00        	rsr.scompare1	a0
40081771:	0109      	s32i.n	a0, a1, 0
	rsr.PS a0
40081773:	03e600        	rsr.ps	a0
	s32i a0, a1, BSA_PS_OFF
40081776:	5109      	s32i.n	a0, a1, 20
	movi a0, _switch_restore_pc
40081778:	fbbd01        	l32r	a0, 4008066c <_iram_text_start+0x11c>
	s32i a0, a1, BSA_PC_OFF
4008177b:	6109      	s32i.n	a0, a1, 24
	call0 xtensa_save_high_regs
4008177d:	ffefc5        	call0	4008167c <xtensa_save_high_regs>
	l32i a2, a1, 0
40081780:	0128      	l32i.n	a2, a1, 0
	l32i a3, a2, BSA_A3_OFF
40081782:	a238      	l32i.n	a3, a2, 40
	s32i a1, a3, 0
40081784:	0319      	s32i.n	a1, a3, 0
	l32i a1, a2, BSA_A2_OFF
40081786:	9218      	l32i.n	a1, a2, 36
	j _restore_context
40081788:	ffdb46        	j	400816f9 <_restore_context>

4008178b <_switch_restore_pc>:
	retw
4008178b:	f01d      	retw.n
4008178d:	000000        	ill

40081790 <_handle_excint>:
	EXCINT_HANDLER CONFIG_XTENSA_KERNEL_CPU_PTR_SR, ___cpu_t_nested_OFFSET, ___cpu_t_irq_stack_OFFSET
40081790:	8129      	s32i.n	a2, a1, 32
40081792:	030300        	rsr.sar	a0
40081795:	4109      	s32i.n	a0, a1, 16
40081797:	030000        	rsr.lbeg	a0
4008179a:	3109      	s32i.n	a0, a1, 12
4008179c:	030100        	rsr.lend	a0
4008179f:	2109      	s32i.n	a0, a1, 8
400817a1:	030200        	rsr.lcount	a0
400817a4:	1109      	s32i.n	a0, a1, 4
400817a6:	030c00        	rsr.scompare1	a0
400817a9:	0109      	s32i.n	a0, a1, 0
400817ab:	ffed05        	call0	4008167c <xtensa_save_high_regs>
400817ae:	0128      	l32i.n	a2, a1, 0
400817b0:	8228      	l32i.n	a2, a2, 32
400817b2:	03e600        	rsr.ps	a0
400817b5:	f30c      	movi.n	a3, 15
400817b7:	100030        	and	a0, a0, a3
400817ba:	a0cc      	bnez.n	a0, 400817c8 <_not_l1>
400817bc:	03e600        	rsr.ps	a0
400817bf:	01a032        	movi	a3, 1
400817c2:	200030        	or	a0, a0, a3
400817c5:	13e600        	wsr.ps	a0

400817c8 <_not_l1>:
400817c8:	03e600        	rsr.ps	a0
400817cb:	f36c      	movi.n	a3, -17
400817cd:	100030        	and	a0, a0, a3
400817d0:	13e600        	wsr.ps	a0
400817d3:	002010        	rsync
400817d6:	03f430        	rsr.misc0	a3
400817d9:	0308      	l32i.n	a0, a3, 0
400817db:	708c      	beqz.n	a0, 400817e6 <_switch_stacks_3>
400817dd:	001b      	addi.n	a0, a0, 1
400817df:	0309      	s32i.n	a0, a3, 0
400817e1:	013d      	mov.n	a3, a1
400817e3:	000146        	j	400817ec <_do_call_3>

400817e6 <_switch_stacks_3>:
400817e6:	001b      	addi.n	a0, a0, 1
400817e8:	0309      	s32i.n	a0, a3, 0
400817ea:	1338      	l32i.n	a3, a3, 4

400817ec <_do_call_3>:
400817ec:	036d      	mov.n	a6, a3
400817ee:	01ad      	mov.n	a10, a1
400817f0:	013d      	mov.n	a3, a1
400817f2:	02bd      	mov.n	a11, a2
400817f4:	0118      	l32i.n	a1, a1, 0
400817f6:	3cc112        	addi	a1, a1, 60
400817f9:	000095        	call4	40081804 <_xstack_call0_5>
400817fc:	031d      	mov.n	a1, a3
400817fe:	062d      	mov.n	a2, a6
40081800:	0003c6        	j	40081813 <_xstack_returned_5>
	...

40081804 <_xstack_call0_5>:
40081804:	002136        	entry	a1, 16
40081807:	021d      	mov.n	a1, a2
40081809:	000055        	call4	40081810 <_xstack_call1_5>
4008180c:	062d      	mov.n	a2, a6
4008180e:	f01d      	retw.n

40081810 <_xstack_call1_5>:
40081810:	0007a0        	jx	a7

40081813 <_xstack_returned_5>:
40081813:	006700        	rsil	a0, 7
40081816:	03f430        	rsr.misc0	a3
40081819:	0308      	l32i.n	a0, a3, 0
4008181b:	000b      	addi.n	a0, a0, -1
4008181d:	0309      	s32i.n	a0, a3, 0
4008181f:	251617        	beq	a6, a1, 40081848 <_restore_3>
40081822:	0118      	l32i.n	a1, a1, 0
40081824:	3cc112        	addi	a1, a1, 60
40081827:	10ccc0        	and	a12, a12, a12
4008182a:	408030        	rotw	3
4008182d:	10ccc0        	and	a12, a12, a12
40081830:	408030        	rotw	3
40081833:	10ccc0        	and	a12, a12, a12
40081836:	408030        	rotw	3
40081839:	10ccc0        	and	a12, a12, a12
4008183c:	408030        	rotw	3
4008183f:	10ccc0        	and	a12, a12, a12
40081842:	408040        	rotw	4
40081845:	201660        	or	a1, a6, a6

40081848 <_restore_3>:
40081848:	ffab46        	j	400816f9 <_restore_context>
	...

4008184c <xtensa_init_stack>:
LOG_MODULE_DECLARE(os);

void *xtensa_init_stack(int *stack_top,
			void (*entry)(void *, void *, void *),
			void *arg1, void *arg2, void *arg3)
{
4008184c:	004136        	entry	a1, 32
	 * arrange to enter the function with a CALLINC of 1 and a
	 * stack pointer 16 bytes above the top, so its ENTRY at the
	 * start will decrement the stack pointer by 16.
	 */
	const int bsasz = BASE_SAVE_AREA_SIZE - 16;
	void **bsa = (void **) (((char *) stack_top) - bsasz);
4008184f:	d4c272        	addi	a7, a2, -44

	(void)memset(bsa, 0, bsasz);
40081852:	cc2c      	movi.n	a12, 44
40081854:	0b0c      	movi.n	a11, 0
40081856:	20a770        	or	a10, a7, a7
40081859:	01c1e5        	call8	40083478 <memset>

	bsa[BSA_PC_OFF/4] = z_thread_entry;
4008185c:	fb8591        	l32r	a9, 40080670 <_iram_text_start+0x120>
4008185f:	ecc282        	addi	a8, a2, -20
40081862:	0899      	s32i.n	a9, a8, 0
	bsa[BSA_PS_OFF/4] = (void *)(PS_WOE | PS_UM | PS_CALLINC(1));
40081864:	fb8491        	l32r	a9, 40080674 <_iram_text_start+0x124>
40081867:	e8c282        	addi	a8, a2, -24
4008186a:	0899      	s32i.n	a9, a8, 0
	/* Arguments to z_thread_entry().  Remember these start at A6,
	 * which will be rotated into A2 by the ENTRY instruction that
	 * begins the C function.  And A4-A7 and A8-A11 are optional
	 * quads that live below the BSA!
	 */
	bsa[-1] = arg1;  /* a7 */
4008186c:	d0c282        	addi	a8, a2, -48
4008186f:	0849      	s32i.n	a4, a8, 0
	bsa[-2] = entry; /* a6 */
40081871:	ccc282        	addi	a8, a2, -52
40081874:	0839      	s32i.n	a3, a8, 0
	bsa[-3] = 0;     /* a5 */
40081876:	c8c292        	addi	a9, a2, -56
40081879:	080c      	movi.n	a8, 0
4008187b:	0989      	s32i.n	a8, a9, 0
	bsa[-4] = 0;     /* a4 */
4008187d:	c4c292        	addi	a9, a2, -60
40081880:	0989      	s32i.n	a8, a9, 0

	bsa[-5] = 0;     /* a11 */
40081882:	c0c292        	addi	a9, a2, -64
40081885:	0989      	s32i.n	a8, a9, 0
	bsa[-6] = 0;     /* a10 */
40081887:	bcc292        	addi	a9, a2, -68
4008188a:	0989      	s32i.n	a8, a9, 0
	bsa[-7] = arg3;  /* a9 */
4008188c:	b8c282        	addi	a8, a2, -72
4008188f:	0869      	s32i.n	a6, a8, 0
	bsa[-8] = arg2;  /* a8 */
40081891:	b4c282        	addi	a8, a2, -76
40081894:	0859      	s32i.n	a5, a8, 0

	/* Finally push the BSA pointer and return the stack pointer
	 * as the handle
	 */
	bsa[-9] = bsa;
40081896:	b0c222        	addi	a2, a2, -80
40081899:	0279      	s32i.n	a7, a2, 0
	return &bsa[-9];
}
4008189b:	f01d      	retw.n
4008189d:	000000        	ill

400818a0 <arch_new_thread>:

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
400818a0:	004136        	entry	a1, 32
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
400818a3:	81e8      	l32i.n	a14, a1, 32
{
400818a5:	07dd      	mov.n	a13, a7
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
400818a7:	06cd      	mov.n	a12, a6
400818a9:	05bd      	mov.n	a11, a5
400818ab:	04ad      	mov.n	a10, a4
400818ad:	fff9e5        	call8	4008184c <xtensa_init_stack>
400818b0:	1462a2        	s32i	a10, a2, 80
						  p1, p2, p3);
}
400818b3:	f01d      	retw.n
400818b5:	000000        	ill

400818b8 <z_irq_spurious>:

void z_irq_spurious(const void *arg)
{
400818b8:	004136        	entry	a1, 32
	int irqs, ie;

	ARG_UNUSED(arg);

	__asm__ volatile("rsr.interrupt %0" : "=r"(irqs));
400818bb:	03e280        	rsr.interrupt	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(ie));
400818be:	03e480        	rsr.intenable	a8
	LOG_ERR(" ** Spurious INTERRUPT(s) %p, INTENABLE = %p",
		(void *)irqs, (void *)ie);
	z_xtensa_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
400818c1:	0b0c      	movi.n	a11, 0
400818c3:	1a0c      	movi.n	a10, 1
400818c5:	ffd7e5        	call8	40081644 <z_xtensa_fatal_error>
}
400818c8:	f01d      	retw.n
	...

400818cc <xtensa_int2_c>:
		__asm__ volatile("wsr.intclear %0" : : "r"(m)); \
	}							\
	return z_get_next_switch_handle(interrupted_stack);		\
}

DEF_INT_C_HANDLER(2)
400818cc:	004136        	entry	a1, 32
400818cf:	03e240        	rsr.interrupt	a4
400818d2:	03e430        	rsr.intenable	a3

static inline int _xtensa_handle_one_int2(unsigned int mask)
{
	int irq;

	if (mask & BIT(19)) {
400818d5:	fb6851        	l32r	a5, 40080678 <_iram_text_start+0x128>
400818d8:	104430        	and	a4, a4, a3
400818db:	0e8457        	bany	a4, a5, 400818ed <xtensa_int2_c+0x21>
		mask = BIT(19);
		irq = 19;
		goto handle_irq;
	}
	if (mask & BIT(20)) {
400818de:	fb6731        	l32r	a3, 4008067c <_iram_text_start+0x12c>
400818e1:	0f8437        	bany	a4, a3, 400818f4 <xtensa_int2_c+0x28>
		mask = BIT(20);
		irq = 20;
		goto handle_irq;
	}
	if (mask & BIT(21)) {
400818e4:	fb6731        	l32r	a3, 40080680 <_iram_text_start+0x130>
400818e7:	0e8437        	bany	a4, a3, 400818f9 <xtensa_int2_c+0x2d>
400818ea:	000986        	j	40081914 <xtensa_int2_c+0x48>
		irq = 19;
400818ed:	381c      	movi.n	a8, 19
		mask = BIT(19);
400818ef:	053d      	mov.n	a3, a5
400818f1:	000186        	j	400818fb <xtensa_int2_c+0x2f>
		irq = 20;
400818f4:	481c      	movi.n	a8, 20
400818f6:	000046        	j	400818fb <xtensa_int2_c+0x2f>
		mask = BIT(21);
		irq = 21;
400818f9:	581c      	movi.n	a8, 21
		goto handle_irq;
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400818fb:	fb6291        	l32r	a9, 40080684 <_iram_text_start+0x134>
400818fe:	1188d0        	slli	a8, a8, 3
40081901:	898a      	add.n	a8, a9, a8
40081903:	1898      	l32i.n	a9, a8, 4
40081905:	08a8      	l32i.n	a10, a8, 0
40081907:	304430        	xor	a4, a4, a3
4008190a:	0009e0        	callx8	a9
4008190d:	13e330        	wsr.intclear	a3
40081910:	fff1c6        	j	400818db <xtensa_int2_c+0xf>
40081913:	a22000        	muluh	a2, a0, a0
40081916:	042520        	extui	a2, a2, 5, 1
40081919:	2aa001        	l32r	a0, 4004c39c <esp32_rom_gpio_matrix_out+0x42490>
4008191c:	009020        	all4	b2, b0:b1:b2:b3
	...

40081920 <xtensa_int3_c>:
DEF_INT_C_HANDLER(3)
40081920:	004136        	entry	a1, 32
40081923:	03e240        	rsr.interrupt	a4
40081926:	03e430        	rsr.intenable	a3
40081929:	104430        	and	a4, a4, a3
	if (mask & 0x408800) {
4008192c:	fb5a31        	l32r	a3, 40080694 <_iram_text_start+0x144>
4008192f:	150437        	bnone	a4, a3, 40081948 <xtensa_int3_c+0x28>
		if (mask & BIT(11)) {
40081932:	fb4431        	l32r	a3, 40080644 <_iram_text_start+0xf4>
40081935:	268437        	bany	a4, a3, 4008195f <xtensa_int3_c+0x3f>
		if (mask & BIT(15)) {
40081938:	fb4a31        	l32r	a3, 40080660 <_iram_text_start+0x110>
4008193b:	258437        	bany	a4, a3, 40081964 <xtensa_int3_c+0x44>
		if (mask & BIT(22)) {
4008193e:	fb5231        	l32r	a3, 40080688 <_iram_text_start+0x138>
40081941:	490437        	bnone	a4, a3, 4008198e <xtensa_int3_c+0x6e>
40081944:	000846        	j	40081969 <xtensa_int3_c+0x49>
40081947:	513100        	lsi	f0, a1, 0x144
		if (mask & BIT(23)) {
4008194a:	37fb      	addi.n	a3, a7, 15
4008194c:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(27)) {
4008194f:	37fb37        	bbsi	a11, 19, 4008198a <xtensa_int3_c+0x6a>
40081952:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(29)) {
40081955:	4f          	.byte 0x4f
40081956:	37fb      	addi.n	a3, a7, 15
40081958:	1c3304        	lsi	f0, a3, 112
			irq = 29;
4008195b:	86d8      	l32i.n	a13, a6, 32
4008195d:	0c0005        	call0	4008d960 <_iram_text_end+0x9d6a>
			irq = 11;
40081960:	46b8      	l32i.n	a11, a6, 16
40081962:	0c0004        	lsi	f0, a0, 48
			irq = 15;
40081965:	06f8      	l32i.n	a15, a6, 0
40081967:	1c0003        	lsi	f0, a0, 112
			irq = 22;
4008196a:	c668      	l32i.n	a6, a6, 48
4008196c:	1c0001        	l32r	a0, 4004896c <esp32_rom_gpio_matrix_out+0x3ea60>
			irq = 23;
4008196f:	8678      	l32i.n	a7, a6, 32
40081971:	000000        	ill
			irq = 27;
40081974:	b81c      	movi.n	a8, 27
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081976:	fb4391        	l32r	a9, 40080684 <_iram_text_start+0x134>
40081979:	1188d0        	slli	a8, a8, 3
4008197c:	898a      	add.n	a8, a9, a8
4008197e:	1898      	l32i.n	a9, a8, 4
40081980:	08a8      	l32i.n	a10, a8, 0
40081982:	304430        	xor	a4, a4, a3
40081985:	0009e0        	callx8	a9
40081988:	13e330        	wsr.intclear	a3
4008198b:	ffe746        	j	4008192c <xtensa_int3_c+0xc>
4008198e:	20a220        	or	a10, a2, a2
40081991:	00fc65        	call8	40082958 <z_get_next_switch_handle>
40081994:	202aa0        	or	a2, a10, a10
40081997:	000090        	retw
	...

4008199c <xtensa_int4_c>:
DEF_INT_C_HANDLER(4)
4008199c:	004136        	entry	a1, 32
4008199f:	03e240        	rsr.interrupt	a4
400819a2:	03e430        	rsr.intenable	a3
400819a5:	104430        	and	a4, a4, a3

static inline int _xtensa_handle_one_int4(unsigned int mask)
{
	int irq;

	if (mask & 0x3000000) {
400819a8:	fb4031        	l32r	a3, 400806a8 <_iram_text_start+0x158>
400819ab:	0e0437        	bnone	a4, a3, 400819bd <xtensa_int4_c+0x21>
		if (mask & BIT(24)) {
400819ae:	fb3a31        	l32r	a3, 40080698 <_iram_text_start+0x148>
400819b1:	198437        	bany	a4, a3, 400819ce <xtensa_int4_c+0x32>
			mask = BIT(24);
			irq = 24;
			goto handle_irq;
		}
		if (mask & BIT(25)) {
400819b4:	fb3a31        	l32r	a3, 4008069c <_iram_text_start+0x14c>
400819b7:	370437        	bnone	a4, a3, 400819f2 <xtensa_int4_c+0x56>
400819ba:	000546        	j	400819d3 <xtensa_int4_c+0x37>
			mask = BIT(25);
			irq = 25;
			goto handle_irq;
		}
	} else {
		if (mask & BIT(28)) {
400819bd:	fb3831        	l32r	a3, 400806a0 <_iram_text_start+0x150>
400819c0:	148437        	bany	a4, a3, 400819d8 <xtensa_int4_c+0x3c>
			mask = BIT(28);
			irq = 28;
			goto handle_irq;
		}
		if (mask & BIT(30)) {
400819c3:	fb3831        	l32r	a3, 400806a4 <_iram_text_start+0x154>
400819c6:	280437        	bnone	a4, a3, 400819f2 <xtensa_int4_c+0x56>
			mask = BIT(30);
			irq = 30;
400819c9:	e81c      	movi.n	a8, 30
400819cb:	0002c6        	j	400819da <xtensa_int4_c+0x3e>
			irq = 24;
400819ce:	881c      	movi.n	a8, 24
400819d0:	000186        	j	400819da <xtensa_int4_c+0x3e>
			irq = 25;
400819d3:	981c      	movi.n	a8, 25
400819d5:	000046        	j	400819da <xtensa_int4_c+0x3e>
			irq = 28;
400819d8:	c81c      	movi.n	a8, 28
			goto handle_irq;
		}
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400819da:	fb2a91        	l32r	a9, 40080684 <_iram_text_start+0x134>
400819dd:	1188d0        	slli	a8, a8, 3
400819e0:	898a      	add.n	a8, a9, a8
400819e2:	1898      	l32i.n	a9, a8, 4
400819e4:	08a8      	l32i.n	a10, a8, 0
400819e6:	304430        	xor	a4, a4, a3
400819e9:	0009e0        	callx8	a9
400819ec:	13e330        	wsr.intclear	a3
400819ef:	ffed46        	j	400819a8 <xtensa_int4_c+0xc>
400819f2:	20a220        	or	a10, a2, a2
400819f5:	00f625        	call8	40082958 <z_get_next_switch_handle>
400819f8:	202aa0        	or	a2, a10, a10
400819fb:	000090        	retw
	...

40081a00 <xtensa_int5_c>:
DEF_INT_C_HANDLER(5)
40081a00:	004136        	entry	a1, 32
40081a03:	03e240        	rsr.interrupt	a4
40081a06:	03e430        	rsr.intenable	a3
	if (mask & BIT(16)) {
40081a09:	fb2851        	l32r	a5, 400806ac <_iram_text_start+0x15c>
40081a0c:	104430        	and	a4, a4, a3
40081a0f:	0001c6        	j	40081a1a <xtensa_int5_c+0x1a>
40081a12:	300000        	xor	a0, a0, a0
40081a15:	303044        	lsi	f4, a0, 192
40081a18:	5713e3        	lsi	f14, a3, 0x15c
40081a1b:	311084        	lsi	f8, a0, 196
	if (mask & BIT(26)) {
40081a1e:	37fb24        	lsi	f2, a11, 220
40081a21:	d61184        	lsi	f8, a1, 0x358
	if (mask & BIT(31)) {
40081a24:	1c0254        	lsi	f5, a2, 112
		irq = 31;
40081a27:	31f8      	l32i.n	a15, a1, 12
		mask = BIT(31);
40081a29:	06fb23        	lsi	f2, a11, 24
40081a2c:	1c0002        	l8ui	a0, a0, 28
		irq = 16;
40081a2f:	3d08      	l32i.n	a0, a13, 12
		mask = BIT(16);
40081a31:	004605        	call0	40081e94 <i2c_esp32_configure_pins+0x38>
40081a34:	a81c00        	lsi	f0, a12, 0x2a0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a37:	fb1391        	l32r	a9, 40080684 <_iram_text_start+0x134>
40081a3a:	1188d0        	slli	a8, a8, 3
40081a3d:	808980        	add	a8, a9, a8
40081a40:	012892        	l32i	a9, a8, 4
40081a43:	0028a2        	l32i	a10, a8, 0
40081a46:	0009e0        	callx8	a9
40081a49:	fc7356        	bnez	a3, 40081a14 <xtensa_int5_c+0x14>
40081a4c:	20a220        	or	a10, a2, a2
40081a4f:	00f0a5        	call8	40082958 <z_get_next_switch_handle>
40081a52:	202aa0        	or	a2, a10, a10
40081a55:	000090        	retw

40081a58 <xtensa_int6_c>:
DEF_INT_C_HANDLER(6)
40081a58:	004136        	entry	a1, 32
40081a5b:	20a220        	or	a10, a2, a2
40081a5e:	03e280        	rsr.interrupt	a8
40081a61:	03e480        	rsr.intenable	a8
40081a64:	00ef25        	call8	40082958 <z_get_next_switch_handle>
40081a67:	202aa0        	or	a2, a10, a10
40081a6a:	000090        	retw
40081a6d:	000000        	ill

40081a70 <xtensa_int7_c>:
DEF_INT_C_HANDLER(7)
40081a70:	004136        	entry	a1, 32
40081a73:	03e230        	rsr.interrupt	a3
40081a76:	03e440        	rsr.intenable	a4
40081a79:	103340        	and	a3, a3, a4
	if (mask & BIT(14)) {
40081a7c:	fb0f41        	l32r	a4, 400806b8 <_iram_text_start+0x168>
40081a7f:	150347        	bnone	a3, a4, 40081a98 <xtensa_int7_c+0x28>
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a82:	fb0081        	l32r	a8, 40080684 <_iram_text_start+0x134>
40081a85:	303340        	xor	a3, a3, a4
40081a88:	1d2892        	l32i	a9, a8, 116
40081a8b:	1c28a2        	l32i	a10, a8, 112
40081a8e:	0009e0        	callx8	a9
40081a91:	13e340        	wsr.intclear	a4
40081a94:	fff9c6        	j	40081a7f <xtensa_int7_c+0xf>
40081a97:	a22000        	muluh	a2, a0, a0
40081a9a:	ebe520        	f64cmpl	a14, a5, a2
40081a9d:	2aa000        	mul.s	f10, f0, f0
40081aa0:	009020        	all4	b2, b0:b1:b2:b3
	...

40081aa4 <xtensa_excint1_c>:
 * DEF_EXCINT 1 vector declaration in assembly code.  This one looks
 * different because exceptions and interrupts land at the same
 * vector; other interrupt levels have their own vectors.
 */
void *xtensa_excint1_c(int *interrupted_stack)
{
40081aa4:	004136        	entry	a1, 32
	int cause, vaddr, *bsa = *(int **)interrupted_stack;

	__asm__ volatile("rsr.exccause %0" : "=r"(cause));
40081aa7:	03e850        	rsr.exccause	a5

	if (cause == EXCCAUSE_LEVEL1_INTERRUPT) {
40081aaa:	024526        	beqi	a5, 4, 40081ab0 <xtensa_excint1_c+0xc>
40081aad:	0045c6        	j	40081bc8 <xtensa_excint1_c+0x124>
static inline DEF_INT_C_HANDLER(1)
40081ab0:	03e240        	rsr.interrupt	a4
40081ab3:	03e430        	rsr.intenable	a3
		if (mask & 0x780) {
40081ab6:	80a762        	movi	a6, 0x780
40081ab9:	104430        	and	a4, a4, a3
	if (mask & 0x7f) {
40081abc:	643040        	extui	a3, a4, 0, 7
40081abf:	048316        	beqz	a3, 40081b0b <xtensa_excint1_c+0x67>
		if (mask & 0x7) {
40081ac2:	243040        	extui	a3, a4, 0, 3
40081ac5:	739c      	beqz.n	a3, 40081ae0 <xtensa_excint1_c+0x3c>
			if (mask & BIT(0)) {
40081ac7:	043040        	extui	a3, a4, 0, 1
40081aca:	09a356        	bnez	a3, 40081b68 <xtensa_excint1_c+0xc4>
			if (mask & BIT(1)) {
40081acd:	290c      	movi.n	a9, 2
40081acf:	020497        	bnone	a4, a9, 40081ad5 <xtensa_excint1_c+0x31>
40081ad2:	0025c6        	j	40081b6d <xtensa_excint1_c+0xc9>
			if (mask & BIT(2)) {
40081ad5:	430c      	movi.n	a3, 4
40081ad7:	028437        	bany	a4, a3, 40081add <xtensa_excint1_c+0x39>
40081ada:	004186        	j	40081be4 <xtensa_excint1_c+0x140>
40081add:	0024c6        	j	40081b74 <xtensa_excint1_c+0xd0>
			if (mask & 0x18) {
40081ae0:	831c      	movi.n	a3, 24
40081ae2:	120437        	bnone	a4, a3, 40081af8 <xtensa_excint1_c+0x54>
				if (mask & BIT(3)) {
40081ae5:	830c      	movi.n	a3, 8
40081ae7:	020437        	bnone	a4, a3, 40081aed <xtensa_excint1_c+0x49>
40081aea:	0022c6        	j	40081b79 <xtensa_excint1_c+0xd5>
				if (mask & BIT(4)) {
40081aed:	031c      	movi.n	a3, 16
40081aef:	028437        	bany	a4, a3, 40081af5 <xtensa_excint1_c+0x51>
40081af2:	003b86        	j	40081be4 <xtensa_excint1_c+0x140>
40081af5:	002186        	j	40081b7f <xtensa_excint1_c+0xdb>
				if (mask & BIT(5)) {
40081af8:	032c      	movi.n	a3, 32
40081afa:	020437        	bnone	a4, a3, 40081b00 <xtensa_excint1_c+0x5c>
40081afd:	0020c6        	j	40081b84 <xtensa_excint1_c+0xe0>
				if (mask & BIT(6)) {
40081b00:	034c      	movi.n	a3, 64
40081b02:	028437        	bany	a4, a3, 40081b08 <xtensa_excint1_c+0x64>
40081b05:	0036c6        	j	40081be4 <xtensa_excint1_c+0x140>
40081b08:	001f46        	j	40081b89 <xtensa_excint1_c+0xe5>
		if (mask & 0x780) {
40081b0b:	2d0467        	bnone	a4, a6, 40081b3c <xtensa_excint1_c+0x98>
			if (mask & 0x180) {
40081b0e:	80a132        	movi	a3, 0x180
40081b11:	130437        	bnone	a4, a3, 40081b28 <xtensa_excint1_c+0x84>
				if (mask & BIT(7)) {
40081b14:	80a032        	movi	a3, 128
40081b17:	738437        	bany	a4, a3, 40081b8e <xtensa_excint1_c+0xea>
				if (mask & BIT(8)) {
40081b1a:	00a132        	movi	a3, 0x100
40081b1d:	028437        	bany	a4, a3, 40081b23 <xtensa_excint1_c+0x7f>
40081b20:	003006        	j	40081be4 <xtensa_excint1_c+0x140>
40081b23:	001b06        	j	40081b93 <xtensa_excint1_c+0xef>
40081b26:	320000        	orbc	b0, b0, b0
				if (mask & BIT(9)) {
40081b29:	3700a2        	l8ui	a10, a0, 55
40081b2c:	326984        	lsi	f8, a9, 200
				if (mask & BIT(10)) {
40081b2f:	3700a4        	lsi	f10, a0, 220
40081b32:	060284        	lsi	f8, a2, 24
40081b35:	002b      	addi.n	a0, a0, 2
40081b37:	001886        	j	40081b9d <xtensa_excint1_c+0xf9>
40081b3a:	310000        	srai	a0, a0, 16
			if (mask & 0x3000) {
40081b3d:	37fae3        	lsi	f14, a10, 220
40081b40:	311104        	lsi	f0, a1, 196
				if (mask & BIT(12)) {
40081b43:	de          	.byte 0xde
40081b44:	37fa      	add.n	a3, a7, a15
40081b46:	315984        	lsi	f8, a9, 196
				if (mask & BIT(13)) {
40081b49:	37fab6        	bltui	a10, 0x100, 40081b84 <xtensa_excint1_c+0xe0>
40081b4c:	860284        	lsi	f8, a2, 0x218
40081b4f:	860024        	lsi	f2, a0, 0x218
40081b52:	310014        	lsi	f1, a0, 196
				if (mask & BIT(17)) {
40081b55:	fadb      	addi.n	a15, a10, 13
40081b57:	518437        	bany	a4, a3, 40081bac <xtensa_excint1_c+0x108>
				if (mask & BIT(18)) {
40081b5a:	fada31        	l32r	a3, 400806c4 <_iram_text_start+0x174>
40081b5d:	028437        	bany	a4, a3, 40081b63 <xtensa_excint1_c+0xbf>
40081b60:	002006        	j	40081be4 <xtensa_excint1_c+0x140>
					irq = 18;
40081b63:	281c      	movi.n	a8, 18
40081b65:	001146        	j	40081bae <xtensa_excint1_c+0x10a>
				irq = 0;
40081b68:	080c      	movi.n	a8, 0
40081b6a:	001006        	j	40081bae <xtensa_excint1_c+0x10a>
				irq = 1;
40081b6d:	180c      	movi.n	a8, 1
				mask = BIT(1);
40081b6f:	093d      	mov.n	a3, a9
40081b71:	000e46        	j	40081bae <xtensa_excint1_c+0x10a>
				irq = 2;
40081b74:	098d      	mov.n	a8, a9
40081b76:	000d06        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 3;
40081b79:	380c      	movi.n	a8, 3
40081b7b:	000bc6        	j	40081bae <xtensa_excint1_c+0x10a>
40081b7e:	058d00        	extui	a8, a0, 29, 1
					irq = 4;
40081b81:	000a46        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 5;
40081b84:	580c      	movi.n	a8, 5
40081b86:	000906        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 6;
40081b89:	680c      	movi.n	a8, 6
40081b8b:	0007c6        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 7;
40081b8e:	780c      	movi.n	a8, 7
40081b90:	000686        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 8;
40081b93:	880c      	movi.n	a8, 8
40081b95:	000546        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 9;
40081b98:	980c      	movi.n	a8, 9
40081b9a:	000406        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 10;
40081b9d:	a80c      	movi.n	a8, 10
40081b9f:	0002c6        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 12;
40081ba2:	c80c      	movi.n	a8, 12
40081ba4:	000186        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 13;
40081ba7:	d80c      	movi.n	a8, 13
40081ba9:	000046        	j	40081bae <xtensa_excint1_c+0x10a>
					irq = 17;
40081bac:	181c      	movi.n	a8, 17
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081bae:	fab591        	l32r	a9, 40080684 <_iram_text_start+0x134>
40081bb1:	1188d0        	slli	a8, a8, 3
40081bb4:	898a      	add.n	a8, a9, a8
40081bb6:	1898      	l32i.n	a9, a8, 4
40081bb8:	08a8      	l32i.n	a10, a8, 0
40081bba:	304430        	xor	a4, a4, a3
40081bbd:	0009e0        	callx8	a9
40081bc0:	13e330        	wsr.intclear	a3
40081bc3:	ffbd46        	j	40081abc <xtensa_excint1_c+0x18>
40081bc6:	660000        	lsi	f0, a0, 0x198

		return xtensa_int1_c(interrupted_stack);

	} else if (cause == EXCCAUSE_SYSCALL) {
40081bc9:	480c15        	call4	400c9c8c <_iram_text_end+0x46096>
	int cause, vaddr, *bsa = *(int **)interrupted_stack;
40081bcc:	643802        	lsi	f0, a8, 0x190

		/* Xtensa exceptions don't automatically advance PC,
		 * have to skip the SYSCALL instruction manually or
		 * else it will just loop forever
		 */
		bsa[BSA_PC_OFF/4] += 3;
40081bcf:	333b      	addi.n	a3, a3, 3
40081bd1:	6439      	s32i.n	a3, a4, 24
40081bd3:	000346        	j	40081be4 <xtensa_excint1_c+0x140>
40081bd6:	300000        	xor	a0, a0, a0

	} else {
		uint32_t ps = bsa[BSA_PS_OFF/4];

		__asm__ volatile("rsr.excvaddr %0" : "=r"(vaddr));
40081bd9:	ee          	.byte 0xee
40081bda:	a0a203        	lsi	f0, a2, 0x280
		/* FIXME: legacy xtensa port reported "HW" exception
		 * for all unhandled exceptions, which seems incorrect
		 * as these are software errors.  Should clean this
		 * up.
		 */
		z_xtensa_fatal_error(K_ERR_CPU_EXCEPTION,
40081bdd:	b22000        	mulsh	a2, a0, a0
40081be0:	a62520        	lsi	f2, a5, 0x298
40081be3:	ff          	.byte 0xff
				     (void *)interrupted_stack);
	}

	return z_get_next_switch_handle(interrupted_stack);
40081be4:	02ad      	mov.n	a10, a2
40081be6:	00d725        	call8	40082958 <z_get_next_switch_handle>
}
40081be9:	0a2d      	mov.n	a2, a10
40081beb:	f01d      	retw.n
40081bed:	000000        	ill

40081bf0 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
40081bf0:	004136        	entry	a1, 32
	_stdout_hook = hook;
40081bf3:	fab681        	l32r	a8, 400806cc <_iram_text_start+0x17c>
40081bf6:	0829      	s32i.n	a2, a8, 0
}
40081bf8:	f01d      	retw.n
	...

40081bfc <gpio_esp32_pin_interrupt_configure>:

static int gpio_esp32_pin_interrupt_configure(const struct device *port,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
40081bfc:	004136        	entry	a1, 32
	if (mode == GPIO_INT_MODE_DISABLED) {
40081bff:	fa8881        	l32r	a8, 40080620 <_iram_text_start+0xd0>
{
40081c02:	743030        	extui	a3, a3, 0, 8
	if (mode == GPIO_INT_MODE_DISABLED) {
40081c05:	211487        	beq	a4, a8, 40081c2a <gpio_esp32_pin_interrupt_configure+0x2e>
	if (mode == GPIO_INT_MODE_LEVEL) {
40081c08:	faac91        	l32r	a9, 400806b8 <_iram_text_start+0x168>
			return -ENOTSUP;
40081c0b:	ddaf82        	movi	a8, -35
	if (mode == GPIO_INT_MODE_LEVEL) {
40081c0e:	4f1497        	beq	a4, a9, 40081c61 <gpio_esp32_pin_interrupt_configure+0x65>
		switch (trig) {
40081c11:	faac41        	l32r	a4, 400806c4 <_iram_text_start+0x174>
40081c14:	181547        	beq	a5, a4, 40081c30 <gpio_esp32_pin_interrupt_configure+0x34>
40081c17:	faae41        	l32r	a4, 400806d0 <_iram_text_start+0x180>
40081c1a:	431547        	beq	a5, a4, 40081c61 <gpio_esp32_pin_interrupt_configure+0x65>
40081c1d:	faa841        	l32r	a4, 400806c0 <_iram_text_start+0x170>
			return -EINVAL;
40081c20:	a86c      	movi.n	a8, -22
		switch (trig) {
40081c22:	3b9547        	bne	a5, a4, 40081c61 <gpio_esp32_pin_interrupt_configure+0x65>
			return 2;
40081c25:	280c      	movi.n	a8, 2
40081c27:	0001c6        	j	40081c32 <gpio_esp32_pin_interrupt_configure+0x36>
		return 0;       /* Disables interrupt for a pin. */
40081c2a:	080c      	movi.n	a8, 0
40081c2c:	000086        	j	40081c32 <gpio_esp32_pin_interrupt_configure+0x36>
40081c2f:	180c00        	lsxp	f0, a12, a0
	struct gpio_esp32_data *data = port->data;
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081c32:	3248      	l32i.n	a4, a2, 12
40081c34:	8498      	l32i.n	a9, a4, 32
40081c36:	939a      	add.n	a9, a3, a9
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081c38:	faa731        	l32r	a3, 400806d4 <_iram_text_start+0x184>
40081c3b:	993a      	add.n	a9, a9, a3
40081c3d:	1199e0        	slli	a9, a9, 2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081c40:	006340        	rsil	a4, 3
	}

	key = irq_lock();

	reg_val = *reg;
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081c43:	faa551        	l32r	a5, 400806d8 <_iram_text_start+0x188>
	reg_val = *reg;
40081c46:	0938      	l32i.n	a3, a9, 0
	/* Enable Interrupt on CPU0 (PRO_CPU) */
	reg_val |= GPIO_CPU0_INT_ENABLE;
	/* Interrupt triggering mode */
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081c48:	118890        	slli	a8, a8, 7
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081c4b:	103350        	and	a3, a3, a5
40081c4e:	208830        	or	a8, a8, a3
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081c51:	fa8331        	l32r	a3, 40080660 <_iram_text_start+0x110>
40081c54:	208830        	or	a8, a8, a3
	*reg = reg_val;
40081c57:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40081c59:	13e640        	wsr.ps	a4
40081c5c:	002010        	rsync

	irq_unlock(key);

	return 0;
40081c5f:	080c      	movi.n	a8, 0
}
40081c61:	082d      	mov.n	a2, a8
40081c63:	f01d      	retw.n
40081c65:	000000        	ill

40081c68 <gpio_esp32_isr>:
#if defined(CONFIG_GPIO_ESP32_1)
GPIO_DEVICE_INIT(1);
#endif

static void gpio_esp32_isr(const void *param)
{
40081c68:	004136        	entry	a1, 32

#if defined(CONFIG_GPIO_ESP32_0)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_0));
40081c6b:	fa9ca1        	l32r	a10, 400806dc <_iram_text_start+0x18c>
40081c6e:	0194a5        	call8	400835b8 <gpio_esp32_fire_callbacks>
#endif
#if defined(CONFIG_GPIO_ESP32_1)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_1));
40081c71:	fa9ba1        	l32r	a10, 400806e0 <_iram_text_start+0x190>
40081c74:	019425        	call8	400835b8 <gpio_esp32_fire_callbacks>
#endif

	ARG_UNUSED(param);
}
40081c77:	f01d      	retw.n
40081c79:	000000        	ill

40081c7c <gpio_esp32_init>:
{
40081c7c:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40081c7f:	3228      	l32i.n	a2, a2, 12
40081c81:	fa98a1        	l32r	a10, 400806e4 <_iram_text_start+0x194>
40081c84:	00a065        	call8	4008268c <z_impl_device_get_binding>
	data->pinmux = device_get_binding(CONFIG_PINMUX_NAME);
40081c87:	12a9      	s32i.n	a10, a2, 4
		return -ENOTSUP;
40081c89:	ddaf22        	movi	a2, -35
	if (!data->pinmux) {
40081c8c:	8abc      	beqz.n	a10, 40081cc8 <gpio_esp32_init+0x4c>
	if (!isr_connected) {
40081c8e:	fa9631        	l32r	a3, 400806e8 <_iram_text_start+0x198>
	return 0;
40081c91:	020c      	movi.n	a2, 0
	if (!isr_connected) {
40081c93:	000382        	l8ui	a8, a3, 0
40081c96:	2e9827        	bne	a8, a2, 40081cc8 <gpio_esp32_init+0x4c>
 */
static inline void z_xt_ints_off(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081c99:	03e480        	rsr.intenable	a8
	val &= ~mask;
40081c9c:	ffab92        	movi	a9, 0xfffffbff
40081c9f:	108890        	and	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081ca2:	13e480        	wsr.intenable	a8
40081ca5:	002010        	rsync
		esp32_rom_intr_matrix_set(0, ETS_GPIO_INTR_SOURCE,
40081ca8:	ac0c      	movi.n	a12, 10
40081caa:	6b1c      	movi.n	a11, 22
40081cac:	02ad      	mov.n	a10, a2
40081cae:	fa8f81        	l32r	a8, 400806ec <_iram_text_start+0x19c>
40081cb1:	0008e0        	callx8	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081cb4:	03e480        	rsr.intenable	a8
	val |= mask;
40081cb7:	00a492        	movi	a9, 0x400
40081cba:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081cbd:	13e480        	wsr.intenable	a8
40081cc0:	002010        	rsync
		isr_connected = true;
40081cc3:	180c      	movi.n	a8, 1
40081cc5:	004382        	s8i	a8, a3, 0
}
40081cc8:	f01d      	retw.n
	...

40081ccc <gpio_esp32_config>:
{
40081ccc:	006136        	entry	a1, 48
	struct gpio_esp32_data *data = dev->data;
40081ccf:	3268      	l32i.n	a6, a2, 12
{
40081cd1:	743030        	extui	a3, a3, 0, 8
	r = pinmux_pin_get(data->pinmux, io_pin, &func);
40081cd4:	16a8      	l32i.n	a10, a6, 4
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081cd6:	8658      	l32i.n	a5, a6, 32
				 uint32_t *func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->get(dev, pin, func);
40081cd8:	2a28      	l32i.n	a2, a10, 8
40081cda:	535a      	add.n	a5, a3, a5
40081cdc:	1228      	l32i.n	a2, a2, 4
40081cde:	01cd      	mov.n	a12, a1
40081ce0:	20b550        	or	a11, a5, a5
40081ce3:	0002e0        	callx8	a2
40081ce6:	0a2d      	mov.n	a2, a10
	if (r < 0) {
40081ce8:	090a96        	bltz	a10, 40081d7c <gpio_esp32_config+0xb0>
	pinmux_pin_set(data->pinmux, io_pin, PIN_FUNC_GPIO);
40081ceb:	16a8      	l32i.n	a10, a6, 4
	return api->set(dev, pin, func);
40081ced:	2c0c      	movi.n	a12, 2
40081cef:	2a28      	l32i.n	a2, a10, 8
40081cf1:	05bd      	mov.n	a11, a5
40081cf3:	0228      	l32i.n	a2, a2, 0
40081cf5:	0002e0        	callx8	a2
	if (flags & GPIO_PULL_UP) {
40081cf8:	0c1c      	movi.n	a12, 16
40081cfa:	10c4c0        	and	a12, a4, a12
40081cfd:	16a8      	l32i.n	a10, a6, 4
40081cff:	9c8c      	beqz.n	a12, 40081d0c <gpio_esp32_config+0x40>
				    uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->pullup(dev, pin, func);
40081d01:	2a28      	l32i.n	a2, a10, 8
40081d03:	1c0c      	movi.n	a12, 1
40081d05:	2228      	l32i.n	a2, a2, 8
40081d07:	000206        	j	40081d13 <gpio_esp32_config+0x47>
40081d0a:	570000        	lsi	f0, a0, 0x15c
	} else if (flags & GPIO_PULL_DOWN) {
40081d0d:	280864        	lsi	f6, a8, 160
40081d10:	282a      	add.n	a2, a8, a2
40081d12:	05bd22        	l32ai	a2, a13, 20
40081d15:	0002e0        	callx8	a2
	if (flags & GPIO_OUTPUT) {
40081d18:	16a8      	l32i.n	a10, a6, 4
40081d1a:	2a28      	l32i.n	a2, a10, 8
40081d1c:	3288      	l32i.n	a8, a2, 12
40081d1e:	00a222        	movi	a2, 0x200
40081d21:	102420        	and	a2, a4, a2
40081d24:	04c216        	beqz	a2, 40081d74 <gpio_esp32_config+0xa8>
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081d27:	fa6b21        	l32r	a2, 400806d4 <_iram_text_start+0x184>
40081d2a:	252a      	add.n	a2, a5, a2
40081d2c:	1122e0        	slli	a2, a2, 2
		if (flags & GPIO_SINGLE_ENDED) {
40081d2f:	0d6417        	bbci	a4, 1, 40081d40 <gpio_esp32_config+0x74>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
40081d32:	4b0c      	movi.n	a11, 4
40081d34:	1104b7        	bnone	a4, a11, 40081d49 <gpio_esp32_config+0x7d>
				*reg |= GPIO_PIN_PAD_DRIVER;
40081d37:	0298      	l32i.n	a9, a2, 0
40081d39:	2099b0        	or	a9, a9, a11
40081d3c:	0001c6        	j	40081d47 <gpio_esp32_config+0x7b>
40081d3f:	029800        	andb	b9, b8, b0
			*reg &= ~GPIO_PIN_PAD_DRIVER;
40081d42:	bb7c      	movi.n	a11, -5
40081d44:	1099b0        	and	a9, a9, a11
40081d47:	0299      	s32i.n	a9, a2, 0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
40081d49:	0464b7        	bbci	a4, 11, 40081d51 <gpio_esp32_config+0x85>
			*data->port.set_reg = BIT(pin);
40081d4c:	2648      	l32i.n	a4, a6, 8
40081d4e:	000106        	j	40081d56 <gpio_esp32_config+0x8a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
40081d51:	1064a7        	bbci	a4, 10, 40081d65 <gpio_esp32_config+0x99>
			*data->port.clear_reg = BIT(pin);
40081d54:	3648      	l32i.n	a4, a6, 12
40081d56:	01a022        	movi	a2, 1
40081d59:	401300        	ssl	a3
40081d5c:	a13200        	sll	a3, a2
40081d5f:	0020c0        	memw
40081d62:	006432        	s32i	a3, a4, 0
					  uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->input(dev, pin, func);
40081d65:	0c0c      	movi.n	a12, 0
40081d67:	05bd      	mov.n	a11, a5
40081d69:	0008e0        	callx8	a8
		if (r < 0) {
40081d6c:	020c      	movi.n	a2, 0
40081d6e:	432a20        	min	a2, a10, a2
40081d71:	0001c6        	j	40081d7c <gpio_esp32_config+0xb0>
40081d74:	1c0c      	movi.n	a12, 1
40081d76:	20b550        	or	a11, a5, a5
40081d79:	0008e0        	callx8	a8
}
40081d7c:	f01d      	retw.n
	...

40081d80 <i2c_esp32_isr>:

	return ret;
}

static void i2c_esp32_isr(const struct device *device)
{
40081d80:	004136        	entry	a1, 32
	const int fifo_give_mask = I2C_ACK_ERR_INT_ST |
				   I2C_TIME_OUT_INT_ST |
				   I2C_TRANS_COMPLETE_INT_ST |
				   I2C_ARBITRATION_LOST_INT_ST;
	const struct i2c_esp32_config *config = device->config;
40081d83:	012232        	l32i	a3, a2, 4

	if (sys_read32(I2C_INT_STATUS_REG(config->index)) & fifo_give_mask) {
40081d86:	002392        	l32i	a9, a3, 0
40081d89:	1189e0        	slli	a8, a9, 2
40081d8c:	808890        	add	a8, a8, a9
40081d8f:	fa5891        	l32r	a9, 400806f0 <_iram_text_start+0x1a0>
40081d92:	118820        	slli	a8, a8, 14
40081d95:	889a      	add.n	a8, a8, a9
	return *(volatile uint32_t *)addr;
40081d97:	0020c0        	memw
40081d9a:	0898      	l32i.n	a9, a8, 0
40081d9c:	a0a582        	movi	a8, 0x5a0
40081d9f:	060987        	bnone	a9, a8, 40081da9 <i2c_esp32_isr+0x29>

		/* Only give the semaphore if a watched interrupt happens.
		 * Error checking is performed at the other side of the
		 * semaphore, by reading the status register.
		 */
		k_sem_give(&data->fifo_sem);
40081da2:	32a8      	l32i.n	a10, a2, 12
40081da4:	aa8b      	addi.n	a10, a10, 8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
40081da6:	011625        	call8	40082f08 <z_impl_k_sem_give>
	}

	/* Acknowledge all I2C interrupts */
	sys_write32(~0, I2C_INT_CLR_REG(config->index));
40081da9:	0398      	l32i.n	a9, a3, 0
40081dab:	fa5221        	l32r	a2, 400806f4 <_iram_text_start+0x1a4>
40081dae:	1189e0        	slli	a8, a9, 2
40081db1:	889a      	add.n	a8, a8, a9
40081db3:	118820        	slli	a8, a8, 14
40081db6:	882a      	add.n	a8, a8, a2
	*(volatile uint32_t *)addr = data;
40081db8:	f27c      	movi.n	a2, -1
40081dba:	0020c0        	memw
40081dbd:	0829      	s32i.n	a2, a8, 0
}
40081dbf:	f01d      	retw.n
40081dc1:	000000        	ill

40081dc4 <i2c_esp32_reset_fifo$isra$0>:
static inline void i2c_esp32_reset_fifo(const struct i2c_esp32_config *config)
40081dc4:	004136        	entry	a1, 32
	uint32_t reg = I2C_FIFO_CONF_REG(config->index);
40081dc7:	1182e0        	slli	a8, a2, 2
40081dca:	282a      	add.n	a2, a8, a2
40081dcc:	fa4b81        	l32r	a8, 400806f8 <_iram_text_start+0x1a8>
40081dcf:	112220        	slli	a2, a2, 14
40081dd2:	228a      	add.n	a2, a2, a8
	return *(volatile uint32_t *)addr;
40081dd4:	0020c0        	memw
40081dd7:	0288      	l32i.n	a8, a2, 0
40081dd9:	fa3b91        	l32r	a9, 400806c8 <_iram_text_start+0x178>
40081ddc:	208890        	or	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081ddf:	0020c0        	memw
40081de2:	0289      	s32i.n	a8, a2, 0
	return *(volatile uint32_t *)addr;
40081de4:	0020c0        	memw
40081de7:	0288      	l32i.n	a8, a2, 0
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081de9:	fa4491        	l32r	a9, 400806fc <_iram_text_start+0x1ac>
40081dec:	108890        	and	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081def:	0020c0        	memw
40081df2:	0289      	s32i.n	a8, a2, 0
}
40081df4:	f01d      	retw.n
	...

40081df8 <i2c_esp32_write_addr>:
{
40081df8:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40081dfb:	1268      	l32i.n	a6, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081dfd:	3278      	l32i.n	a7, a2, 12
	i2c_esp32_reset_fifo(config);
40081dff:	06a8      	l32i.n	a10, a6, 0
40081e01:	fffc25        	call8	40081dc4 <i2c_esp32_reset_fifo$isra$0>
	sys_write32(addr & I2C_FIFO_RDATA, I2C_DATA_APB_REG(config->index));
40081e04:	0628      	l32i.n	a2, a6, 0
40081e06:	748050        	extui	a8, a5, 0, 8
40081e09:	1192e0        	slli	a9, a2, 2
40081e0c:	992a      	add.n	a9, a9, a2
40081e0e:	fa3c21        	l32r	a2, 40080700 <_iram_text_start+0x1b0>
40081e11:	119920        	slli	a9, a9, 14
40081e14:	992a      	add.n	a9, a9, a2
40081e16:	0020c0        	memw
40081e19:	0989      	s32i.n	a8, a9, 0
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081e1b:	0788      	l32i.n	a8, a7, 0
	uint32_t addr_len = 1U;
40081e1d:	190c      	movi.n	a9, 1
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081e1f:	156807        	bbci	a8, 0, 40081e38 <i2c_esp32_write_addr+0x40>
		sys_write32(I2C_DATA_APB_REG(config->index),
40081e22:	0668      	l32i.n	a6, a6, 0
			    (addr >> 8) & I2C_FIFO_RDATA);
40081e24:	415850        	srli	a5, a5, 8
		sys_write32(I2C_DATA_APB_REG(config->index),
40081e27:	1186e0        	slli	a8, a6, 2
40081e2a:	886a      	add.n	a8, a8, a6
40081e2c:	118820        	slli	a8, a8, 14
40081e2f:	882a      	add.n	a8, a8, a2
40081e31:	0020c0        	memw
40081e34:	0589      	s32i.n	a8, a5, 0
		addr_len++;
40081e36:	290c      	movi.n	a9, 2
	if ((msg->flags & I2C_MSG_RW_MASK) != I2C_MSG_WRITE) {
40081e38:	080422        	l8ui	a2, a4, 8
40081e3b:	116207        	bbci	a2, 0, 40081e50 <i2c_esp32_write_addr+0x58>
		*cmd++ = (struct i2c_esp32_cmd) {
40081e3e:	940c      	movi.n	a4, 9
40081e40:	114480        	slli	a4, a4, 8
40081e43:	209940        	or	a9, a9, a4
40081e46:	234b      	addi.n	a2, a3, 4
40081e48:	0020c0        	memw
40081e4b:	0399      	s32i.n	a9, a3, 0
40081e4d:	0001c6        	j	40081e58 <i2c_esp32_write_addr+0x60>
		msg->len += addr_len;
40081e50:	1458      	l32i.n	a5, a4, 4
40081e52:	032d      	mov.n	a2, a3
40081e54:	959a      	add.n	a9, a5, a9
40081e56:	1499      	s32i.n	a9, a4, 4
}
40081e58:	f01d      	retw.n
	...

40081e5c <i2c_esp32_configure_pins>:
{
40081e5c:	004136        	entry	a1, 32
#ifndef ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_
#define ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_

static const char *gpio_esp32_get_gpio_for_pin(int pin)
{
	if (pin < 32) {
40081e5f:	1fa052        	movi	a5, 31
		return NULL;
#endif /* CONFIG_GPIO_ESP32_0 */
	}

#if defined(CONFIG_GPIO_ESP32_1)
	return DT_LABEL(DT_INST(1, espressif_esp32_gpio));
40081e62:	fa28a1        	l32r	a10, 40080704 <_iram_text_start+0x1b4>
	if (pin < 32) {
40081e65:	022527        	blt	a5, a2, 40081e6b <i2c_esp32_configure_pins+0xf>
		return DT_LABEL(DT_INST(0, espressif_esp32_gpio));
40081e68:	fa28a1        	l32r	a10, 40080708 <_iram_text_start+0x1b8>
40081e6b:	008225        	call8	4008268c <z_impl_device_get_binding>
		return -EINVAL;
40081e6e:	eaaf82        	movi	a8, -22
	if (!gpio) {
40081e71:	047a16        	beqz	a10, 40081ebc <i2c_esp32_configure_pins+0x60>
	ret = gpio_pin_configure(gpio, pin, pin_mode);
40081e74:	746020        	extui	a6, a2, 0, 8
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40081e77:	032a52        	l32i	a5, a10, 12
	return api->pin_configure(port, pin, flags);
40081e7a:	2a88      	l32i.n	a8, a10, 8
40081e7c:	fa24c1        	l32r	a12, 4008070c <_iram_text_start+0x1bc>
40081e7f:	0888      	l32i.n	a8, a8, 0
40081e81:	06bd      	mov.n	a11, a6
40081e83:	0008e0        	callx8	a8
40081e86:	0a8d      	mov.n	a8, a10
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
40081e88:	0adc      	bnez.n	a10, 40081e9c <i2c_esp32_configure_pins+0x40>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40081e8a:	eb7c      	movi.n	a11, -2
40081e8c:	401600        	ssl	a6
40081e8f:	818bb0        	src	a8, a11, a11
40081e92:	05b8      	l32i.n	a11, a5, 0
40081e94:	10bb80        	and	a11, a11, a8
40081e97:	05b9      	s32i.n	a11, a5, 0
	if (ret < 0) {
40081e99:	000086        	j	40081e9f <i2c_esp32_configure_pins+0x43>
40081e9c:	01ca96        	bltz	a10, 40081ebc <i2c_esp32_configure_pins+0x60>
	esp32_rom_gpio_matrix_out(pin, matrix_out, false, false);
40081e9f:	0d0c      	movi.n	a13, 0
40081ea1:	0dcd      	mov.n	a12, a13
40081ea3:	03bd      	mov.n	a11, a3
40081ea5:	20a220        	or	a10, a2, a2
40081ea8:	fa1a81        	l32r	a8, 40080710 <_iram_text_start+0x1c0>
40081eab:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(pin, matrix_in, false);
40081eae:	0c0c      	movi.n	a12, 0
40081eb0:	04bd      	mov.n	a11, a4
40081eb2:	02ad      	mov.n	a10, a2
40081eb4:	fa1881        	l32r	a8, 40080714 <_iram_text_start+0x1c4>
40081eb7:	0008e0        	callx8	a8
40081eba:	080c      	movi.n	a8, 0
}
40081ebc:	082d      	mov.n	a2, a8
40081ebe:	f01d      	retw.n

40081ec0 <i2c_esp32_configure>:
{
40081ec0:	006136        	entry	a1, 48
	const struct i2c_esp32_config *config = dev->config;
40081ec3:	1248      	l32i.n	a4, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081ec5:	3278      	l32i.n	a7, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081ec7:	006360        	rsil	a6, 3
	ret = i2c_esp32_configure_pins(config->pins.scl,
40081eca:	64c8      	l32i.n	a12, a4, 24
40081ecc:	54b8      	l32i.n	a11, a4, 20
40081ece:	0724a2        	l32i	a10, a4, 28
40081ed1:	fff8a5        	call8	40081e5c <i2c_esp32_configure_pins>
	if (ret < 0) {
40081ed4:	242a96        	bltz	a10, 4008211a <i2c_esp32_configure+0x25a>
	ret = i2c_esp32_configure_pins(config->pins.sda,
40081ed7:	44c8      	l32i.n	a12, a4, 16
40081ed9:	34b8      	l32i.n	a11, a4, 12
40081edb:	84a8      	l32i.n	a10, a4, 32
40081edd:	fff7e5        	call8	40081e5c <i2c_esp32_configure_pins>
	if (ret < 0) {
40081ee0:	236a96        	bltz	a10, 4008211a <i2c_esp32_configure+0x25a>
	clock_control_on(data->clock_dev, config->peripheral_id);
40081ee3:	a7a8      	l32i.n	a10, a7, 40
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
40081ee5:	0924b2        	l32i	a11, a4, 36
40081ee8:	2a58      	l32i.n	a5, a10, 8
40081eea:	002552        	l32i	a5, a5, 0
40081eed:	0005e0        	callx8	a5
	if (config->mode.tx_lsb_first) {
40081ef0:	280492        	l8ui	a9, a4, 40
		v |= I2C_TX_LSB_FIRST;
40081ef3:	084c      	movi.n	a8, 64
40081ef5:	050c      	movi.n	a5, 0
40081ef7:	935890        	movnez	a5, a8, a9
	if (config->mode.rx_lsb_first) {
40081efa:	290482        	l8ui	a8, a4, 41
40081efd:	488c      	beqz.n	a8, 40081f05 <i2c_esp32_configure+0x45>
		v |= I2C_RX_LSB_FIRST;
40081eff:	80a082        	movi	a8, 128
40081f02:	205580        	or	a5, a5, a8
	if (dev_config & I2C_MODE_MASTER) {
40081f05:	0498      	l32i.n	a9, a4, 0
40081f07:	1189e0        	slli	a8, a9, 2
40081f0a:	889a      	add.n	a8, a8, a9
40081f0c:	fa0391        	l32r	a9, 40080718 <_iram_text_start+0x1c8>
40081f0f:	118820        	slli	a8, a8, 14
40081f12:	889a      	add.n	a8, a8, a9
40081f14:	091c      	movi.n	a9, 16
40081f16:	0f0397        	bnone	a3, a9, 40081f29 <i2c_esp32_configure+0x69>
40081f19:	070c      	movi.n	a7, 0
		v |= I2C_MS_MODE;
40081f1b:	205590        	or	a5, a5, a9
40081f1e:	0020c0        	memw
40081f21:	0879      	s32i.n	a7, a8, 0
40081f23:	001506        	j	40081f7b <i2c_esp32_configure+0xbb>
40081f26:	000000        	ill
		uint32_t addr = (data->address & I2C_SLAVE_ADDR_V);
40081f29:	021772        	l16ui	a7, a7, 4
40081f2c:	e47070        	extui	a7, a7, 0, 15
		if (dev_config & I2C_ADDR_10_BITS) {
40081f2f:	056307        	bbci	a3, 0, 40081f38 <i2c_esp32_configure+0x78>
			addr |= I2C_ADDR_10BIT_EN;
40081f32:	f9e091        	l32r	a9, 400806b4 <_iram_text_start+0x164>
40081f35:	207790        	or	a7, a7, a9
40081f38:	0020c0        	memw
40081f3b:	0879      	s32i.n	a7, a8, 0
		sys_clear_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40081f3d:	0488      	l32i.n	a8, a4, 0

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f3f:	dfaf92        	movi	a9, -33
40081f42:	1178e0        	slli	a7, a8, 2
40081f45:	778a      	add.n	a7, a7, a8
40081f47:	f9f581        	l32r	a8, 4008071c <_iram_text_start+0x1cc>
40081f4a:	117720        	slli	a7, a7, 14
40081f4d:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081f4f:	0020c0        	memw
40081f52:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f54:	108890        	and	a8, a8, a9
40081f57:	0020c0        	memw
40081f5a:	0789      	s32i.n	a8, a7, 0
		sys_clear_bit(I2C_FIFO_CONF_REG(config->index),
40081f5c:	0488      	l32i.n	a8, a4, 0
40081f5e:	f9f091        	l32r	a9, 40080720 <_iram_text_start+0x1d0>
40081f61:	1178e0        	slli	a7, a8, 2
40081f64:	778a      	add.n	a7, a7, a8
40081f66:	f9e481        	l32r	a8, 400806f8 <_iram_text_start+0x1a8>
40081f69:	117720        	slli	a7, a7, 14
40081f6c:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081f6e:	0020c0        	memw
40081f71:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f73:	108890        	and	a8, a8, a9
40081f76:	0020c0        	memw
40081f79:	0789      	s32i.n	a8, a7, 0
	sys_write32(v, I2C_CTR_REG(config->index));
40081f7b:	0488      	l32i.n	a8, a4, 0
	v |= I2C_CLK_EN;
40081f7d:	03a172        	movi	a7, 0x103
40081f80:	205570        	or	a5, a5, a7
	sys_write32(v, I2C_CTR_REG(config->index));
40081f83:	1178e0        	slli	a7, a8, 2
40081f86:	778a      	add.n	a7, a7, a8
40081f88:	f9e581        	l32r	a8, 4008071c <_iram_text_start+0x1cc>
40081f8b:	117720        	slli	a7, a7, 14
40081f8e:	778a      	add.n	a7, a7, a8
40081f90:	0020c0        	memw
40081f93:	0759      	s32i.n	a5, a7, 0
	const struct i2c_esp32_config *config = dev->config;
40081f95:	1258      	l32i.n	a5, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081f97:	3278      	l32i.n	a7, a2, 12
	uint32_t sys_clk_freq = 0;
40081f99:	020c      	movi.n	a2, 0
40081f9b:	0129      	s32i.n	a2, a1, 0
	ret = i2c_esp32_configure_speed(dev, I2C_SPEED_GET(dev_config));
40081f9d:	243130        	extui	a3, a3, 1, 3
	uint32_t freq_hz = speed_to_freq_tbl[speed];
40081fa0:	f9e121        	l32r	a2, 40080724 <_iram_text_start+0x1d4>
40081fa3:	1133e0        	slli	a3, a3, 2
40081fa6:	323a      	add.n	a3, a2, a3
40081fa8:	0328      	l32i.n	a2, a3, 0
		return -ENOTSUP;
40081faa:	ddafa2        	movi	a10, -35
	if (!freq_hz) {
40081fad:	163216        	beqz	a2, 40082114 <i2c_esp32_configure+0x254>
	if (clock_control_get_rate(data->clock_dev,
40081fb0:	a7a8      	l32i.n	a10, a7, 40
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
40081fb2:	95b8      	l32i.n	a11, a5, 36
40081fb4:	2a38      	l32i.n	a3, a10, 8
40081fb6:	01cd      	mov.n	a12, a1
40081fb8:	3338      	l32i.n	a3, a3, 12
40081fba:	0003e0        	callx8	a3
40081fbd:	151a56        	bnez	a10, 40082112 <i2c_esp32_configure+0x252>
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081fc0:	0578      	l32i.n	a7, a5, 0
	period = (sys_clk_freq / freq_hz);
40081fc2:	0188      	l32i.n	a8, a1, 0
40081fc4:	c28820        	quou	a8, a8, a2
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081fc7:	1127e0        	slli	a2, a7, 2
40081fca:	227a      	add.n	a2, a2, a7
40081fcc:	f9d771        	l32r	a7, 40080728 <_iram_text_start+0x1d8>
40081fcf:	112220        	slli	a2, a2, 14
40081fd2:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fd4:	0020c0        	memw
40081fd7:	0278      	l32i.n	a7, a2, 0
	period /= 2U; /* Set hold and setup times to 1/2th of period */
40081fd9:	413180        	srli	a3, a8, 1
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081fdc:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fdf:	0020c0        	memw
40081fe2:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081fe4:	0578      	l32i.n	a7, a5, 0
	period /= 2U; /* Set sample and hold times to 1/4th of period */
40081fe6:	418280        	srli	a8, a8, 2
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081fe9:	1127e0        	slli	a2, a7, 2
40081fec:	227a      	add.n	a2, a2, a7
40081fee:	f9cf71        	l32r	a7, 4008072c <_iram_text_start+0x1dc>
40081ff1:	112220        	slli	a2, a2, 14
40081ff4:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081ff6:	0020c0        	memw
40081ff9:	0278      	l32i.n	a7, a2, 0
40081ffb:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081ffe:	0020c0        	memw
40082001:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_START_HOLD_REG(config->index));
40082003:	0578      	l32i.n	a7, a5, 0
40082005:	1127e0        	slli	a2, a7, 2
40082008:	227a      	add.n	a2, a2, a7
4008200a:	f9c971        	l32r	a7, 40080730 <_iram_text_start+0x1e0>
4008200d:	112220        	slli	a2, a2, 14
40082010:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082012:	0020c0        	memw
40082015:	0278      	l32i.n	a7, a2, 0
40082017:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
4008201a:	0020c0        	memw
4008201d:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_RSTART_SETUP_REG(config->index));
4008201f:	0578      	l32i.n	a7, a5, 0
40082021:	1127e0        	slli	a2, a7, 2
40082024:	227a      	add.n	a2, a2, a7
40082026:	f9c371        	l32r	a7, 40080734 <_iram_text_start+0x1e4>
40082029:	112220        	slli	a2, a2, 14
4008202c:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
4008202e:	0020c0        	memw
40082031:	0278      	l32i.n	a7, a2, 0
40082033:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40082036:	0020c0        	memw
40082039:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_HOLD_REG(config->index));
4008203b:	0578      	l32i.n	a7, a5, 0
4008203d:	1127e0        	slli	a2, a7, 2
40082040:	227a      	add.n	a2, a2, a7
40082042:	f9bd71        	l32r	a7, 40080738 <_iram_text_start+0x1e8>
40082045:	112220        	slli	a2, a2, 14
40082048:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
4008204a:	0020c0        	memw
4008204d:	0278      	l32i.n	a7, a2, 0
4008204f:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40082052:	0020c0        	memw
40082055:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_SETUP_REG(config->index));
40082057:	0578      	l32i.n	a7, a5, 0
40082059:	1127e0        	slli	a2, a7, 2
4008205c:	227a      	add.n	a2, a2, a7
4008205e:	f9b771        	l32r	a7, 4008073c <_iram_text_start+0x1ec>
40082061:	112220        	slli	a2, a2, 14
40082064:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082066:	0020c0        	memw
40082069:	0278      	l32i.n	a7, a2, 0
4008206b:	203370        	or	a3, a3, a7
	*(volatile uint32_t *)addr = data;
4008206e:	0020c0        	memw
40082071:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_HOLD_REG(config->index));
40082073:	0538      	l32i.n	a3, a5, 0
40082075:	1123e0        	slli	a2, a3, 2
40082078:	223a      	add.n	a2, a2, a3
4008207a:	f9b131        	l32r	a3, 40080740 <_iram_text_start+0x1f0>
4008207d:	112220        	slli	a2, a2, 14
40082080:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40082082:	0020c0        	memw
40082085:	0238      	l32i.n	a3, a2, 0
40082087:	203830        	or	a3, a8, a3
	*(volatile uint32_t *)addr = data;
4008208a:	0020c0        	memw
4008208d:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_SAMPLE_REG(config->index));
4008208f:	0538      	l32i.n	a3, a5, 0
40082091:	ffab52        	movi	a5, 0xfffffbff
40082094:	1123e0        	slli	a2, a3, 2
40082097:	223a      	add.n	a2, a2, a3
40082099:	f9aa31        	l32r	a3, 40080744 <_iram_text_start+0x1f4>
4008209c:	112220        	slli	a2, a2, 14
4008209f:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
400820a1:	0020c0        	memw
400820a4:	0238      	l32i.n	a3, a2, 0
400820a6:	208830        	or	a8, a8, a3
	*(volatile uint32_t *)addr = data;
400820a9:	0020c0        	memw
400820ac:	0289      	s32i.n	a8, a2, 0
	sys_clear_bit(I2C_FIFO_CONF_REG(config->index), I2C_NONFIFO_EN_S);
400820ae:	0438      	l32i.n	a3, a4, 0
400820b0:	1123e0        	slli	a2, a3, 2
400820b3:	223a      	add.n	a2, a2, a3
400820b5:	f99031        	l32r	a3, 400806f8 <_iram_text_start+0x1a8>
400820b8:	112220        	slli	a2, a2, 14
400820bb:	223a      	add.n	a2, a2, a3
	uint32_t temp = *(volatile uint32_t *)addr;
400820bd:	0020c0        	memw
400820c0:	0238      	l32i.n	a3, a2, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
400820c2:	103350        	and	a3, a3, a5
400820c5:	0020c0        	memw
400820c8:	0239      	s32i.n	a3, a2, 0
	sys_write32(v << I2C_TIME_OUT_REG_S, I2C_TO_REG(config->index));
400820ca:	0438      	l32i.n	a3, a4, 0
400820cc:	1123e0        	slli	a2, a3, 2
400820cf:	223a      	add.n	a2, a2, a3
400820d1:	f99d31        	l32r	a3, 40080748 <_iram_text_start+0x1f8>
400820d4:	112220        	slli	a2, a2, 14
400820d7:	223a      	add.n	a2, a2, a3
400820d9:	f99c31        	l32r	a3, 4008074c <_iram_text_start+0x1fc>
400820dc:	0020c0        	memw
400820df:	0239      	s32i.n	a3, a2, 0
		    I2C_INT_ENA_REG(config->index));
400820e1:	0438      	l32i.n	a3, a4, 0
400820e3:	1123e0        	slli	a2, a3, 2
400820e6:	223a      	add.n	a2, a2, a3
400820e8:	f99a31        	l32r	a3, 40080750 <_iram_text_start+0x200>
400820eb:	112220        	slli	a2, a2, 14
400820ee:	223a      	add.n	a2, a2, a3
400820f0:	a0a532        	movi	a3, 0x5a0
400820f3:	0020c0        	memw
400820f6:	0239      	s32i.n	a3, a2, 0
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400820f8:	03e430        	rsr.intenable	a3
	z_xt_ints_on(1 << irq);
400820fb:	c448      	l32i.n	a4, a4, 48
400820fd:	120c      	movi.n	a2, 1
400820ff:	401400        	ssl	a4
40082102:	a12200        	sll	a2, a2
	val |= mask;
40082105:	202230        	or	a2, a2, a3
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40082108:	13e420        	wsr.intenable	a2
4008210b:	002010        	rsync
4008210e:	000086        	j	40082114 <i2c_esp32_configure+0x254>
40082111:	aa6c00        	floor.s	a6, f12, 0
	XTOS_RESTORE_INTLEVEL(key);
40082114:	13e660        	wsr.ps	a6
40082117:	002010        	rsync
}
4008211a:	0a2d      	mov.n	a2, a10
4008211c:	f01d      	retw.n
	...

40082120 <i2c_esp32_transmit>:
{
40082120:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40082123:	1238      	l32i.n	a3, a2, 4
	struct i2c_esp32_data *data = dev->data;
40082125:	32a8      	l32i.n	a10, a2, 12
	sys_set_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40082127:	0328      	l32i.n	a2, a3, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082129:	092c      	movi.n	a9, 32
4008212b:	1182e0        	slli	a8, a2, 2
4008212e:	882a      	add.n	a8, a8, a2
40082130:	f97b21        	l32r	a2, 4008071c <_iram_text_start+0x1cc>
40082133:	118820        	slli	a8, a8, 14
40082136:	882a      	add.n	a8, a8, a2
	uint32_t temp = *(volatile uint32_t *)addr;
40082138:	0020c0        	memw
4008213b:	0828      	l32i.n	a2, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
4008213d:	202290        	or	a2, a2, a9
40082140:	0020c0        	memw
40082143:	0829      	s32i.n	a2, a8, 0
	return z_impl_k_sem_take(sem, timeout);
40082145:	f983c1        	l32r	a12, 40080754 <_iram_text_start+0x204>
40082148:	f926d1        	l32r	a13, 400805e0 <_iram_text_start+0x90>
4008214b:	aa8b      	addi.n	a10, a10, 8
4008214d:	00df65        	call8	40082f44 <z_impl_k_sem_take>
		return -ETIMEDOUT;
40082150:	c4af22        	movi	a2, -60
	if (k_sem_take(&data->fifo_sem, K_MSEC(I2C_ESP32_TIMEOUT_MS)) < 0) {
40082153:	026a96        	bltz	a10, 4008217d <i2c_esp32_transmit+0x5d>
	status = sys_read32(I2C_INT_RAW_REG(config->index));
40082156:	0328      	l32i.n	a2, a3, 0
40082158:	1182e0        	slli	a8, a2, 2
4008215b:	882a      	add.n	a8, a8, a2
4008215d:	f97e21        	l32r	a2, 40080758 <_iram_text_start+0x208>
40082160:	118820        	slli	a8, a8, 14
40082163:	882a      	add.n	a8, a8, a2
	return *(volatile uint32_t *)addr;
40082165:	0020c0        	memw
40082168:	0898      	l32i.n	a9, a8, 0
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
4008216a:	20a482        	movi	a8, 0x420
4008216d:	108980        	and	a8, a9, a8
		return -EIO;
40082170:	b27c      	movi.n	a2, -5
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
40082172:	78cc      	bnez.n	a8, 4008217d <i2c_esp32_transmit+0x5d>
	if (status & I2C_TIME_OUT_INT_RAW) {
40082174:	049890        	extui	a9, a9, 8, 1
	return 0;
40082177:	c4af22        	movi	a2, -60
4008217a:	832890        	moveqz	a2, a8, a9
}
4008217d:	f01d      	retw.n
	...

40082180 <i2c_esp32_init>:
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &i2c_esp32_driver_api);
#endif /* DT_NODE_HAS_STATUS(DT_DRV_INST(1), okay) */

static int i2c_esp32_init(const struct device *dev)
{
40082180:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40082183:	1248      	l32i.n	a4, a2, 4
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
40082185:	f97551        	l32r	a5, 4008075c <_iram_text_start+0x20c>
	struct i2c_esp32_data *data = dev->data;
	uint32_t bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
40082188:	e488      	l32i.n	a8, a4, 56
	struct i2c_esp32_data *data = dev->data;
4008218a:	3268      	l32i.n	a6, a2, 12
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
4008218c:	630c      	movi.n	a3, 6
	switch (bitrate) {
4008218e:	2c1857        	beq	a8, a5, 400821be <i2c_esp32_init+0x3e>
40082191:	143587        	bltu	a5, a8, 400821a9 <i2c_esp32_init+0x29>
40082194:	f97351        	l32r	a5, 40080760 <_iram_text_start+0x210>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
40082197:	230c      	movi.n	a3, 2
	switch (bitrate) {
40082199:	211857        	beq	a8, a5, 400821be <i2c_esp32_init+0x3e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
4008219c:	f97231        	l32r	a3, 40080764 <_iram_text_start+0x214>
4008219f:	450c      	movi.n	a5, 4
400821a1:	c08830        	sub	a8, a8, a3
400821a4:	000446        	j	400821b9 <i2c_esp32_init+0x39>
400821a7:	510000        	lsi	f0, a0, 0x144
	switch (bitrate) {
400821aa:	6f          	.byte 0x6f
400821ab:	0cf9      	s32i.n	a15, a12, 0
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
400821ad:	185783        	lsi	f8, a7, 96
	switch (bitrate) {
400821b0:	310c      	movi.n	a1, 3
	return 0;
400821b2:	6e          	.byte 0x6e
400821b3:	0cf9      	s32i.n	a15, a12, 0
400821b5:	8830a5        	call8	4000a4c0 <esp32_rom_gpio_matrix_out+0x5b4>
400821b8:	030cc0        	rsr.scompare1	a12
400821bb:	833580        	moveqz	a3, a5, a8
	data->clock_dev = device_get_binding(config->clock_name);
400821be:	24a8      	l32i.n	a10, a4, 8
400821c0:	004ca5        	call8	4008268c <z_impl_device_get_binding>
400821c3:	a6a9      	s32i.n	a10, a6, 40
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400821c5:	006350        	rsil	a5, 3
	return z_impl_k_sem_init(sem, initial_count, limit);
400821c8:	1c0c      	movi.n	a12, 1
400821ca:	0cbd      	mov.n	a11, a12
400821cc:	a68b      	addi.n	a10, a6, 8
400821ce:	0151a5        	call8	400836e8 <z_impl_k_sem_init>
400821d1:	1c0c      	movi.n	a12, 1
400821d3:	20bcc0        	or	a11, a12, a12
400821d6:	18c6a2        	addi	a10, a6, 24
400821d9:	0150e5        	call8	400836e8 <z_impl_k_sem_init>
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400821dc:	03e460        	rsr.intenable	a6
	z_xt_ints_off(1 << irq);
400821df:	c498      	l32i.n	a9, a4, 48
	val &= ~mask;
400821e1:	e87c      	movi.n	a8, -2
400821e3:	401900        	ssl	a9
400821e6:	818880        	src	a8, a8, a8
400821e9:	108860        	and	a8, a8, a6
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400821ec:	13e480        	wsr.intenable	a8
400821ef:	002010        	rsync
	irq_disable(config->irq.line);

	/* Even if irq_enable() is called on config->irq.line, disable
	 * interrupt sources in the I2C controller.
	 */
	sys_write32(0, I2C_INT_ENA_REG(config->index));
400821f2:	0468      	l32i.n	a6, a4, 0
	*(volatile uint32_t *)addr = data;
400821f4:	0a0c      	movi.n	a10, 0
400821f6:	1186e0        	slli	a8, a6, 2
400821f9:	886a      	add.n	a8, a8, a6
400821fb:	f95561        	l32r	a6, 40080750 <_iram_text_start+0x200>
400821fe:	118820        	slli	a8, a8, 14
40082201:	886a      	add.n	a8, a8, a6
40082203:	0020c0        	memw
40082206:	0068a2        	s32i	a10, a8, 0
	esp32_rom_intr_matrix_set(0, config->irq.source, config->irq.line);
40082209:	0c24c2        	l32i	a12, a4, 48
4008220c:	b4b8      	l32i.n	a11, a4, 44
4008220e:	f93781        	l32r	a8, 400806ec <_iram_text_start+0x19c>
40082211:	0008e0        	callx8	a8

	config->connect_irq();
40082214:	1468      	l32i.n	a6, a4, 4
40082216:	0006e0        	callx8	a6
	XTOS_RESTORE_INTLEVEL(key);
40082219:	13e650        	wsr.ps	a5
4008221c:	002010        	rsync
	irq_unlock(key);

	return i2c_esp32_configure(dev, config->default_config | bitrate_cfg);
4008221f:	d4b8      	l32i.n	a11, a4, 52
40082221:	02ad      	mov.n	a10, a2
40082223:	20b3b0        	or	a11, a3, a11
40082226:	ffc9a5        	call8	40081ec0 <i2c_esp32_configure>
}
40082229:	0a2d      	mov.n	a2, a10
4008222b:	f01d      	retw.n
4008222d:	000000        	ill

40082230 <i2c_esp32_wait$isra$1>:
static int i2c_esp32_wait(const struct device *dev,
40082230:	004136        	entry	a1, 32
	int counter = 0;
40082233:	040c      	movi.n	a4, 0
	if (*counter > I2C_ESP32_TIMEOUT) {
40082235:	85a352        	movi	a5, 0x385
	if (wait_cmd) {
40082238:	199347        	bne	a3, a4, 40082255 <i2c_esp32_wait$isra$1+0x25>
4008223b:	000cc6        	j	40082272 <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
4008223e:	441b      	addi.n	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
40082240:	059457        	bne	a4, a5, 40082249 <i2c_esp32_wait$isra$1+0x19>
		return -ETIMEDOUT;
40082243:	c4af22        	movi	a2, -60
40082246:	001206        	j	40082292 <i2c_esp32_wait$isra$1+0x62>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082249:	58a282        	movi	a8, 0x258
4008224c:	05a847        	bge	a8, a4, 40082255 <i2c_esp32_wait$isra$1+0x25>
	z_impl_k_yield();
4008224f:	201110        	or	a1, a1, a1
40082252:	00be65        	call8	40082e38 <z_impl_k_yield>
		while (!wait_cmd->done) {
40082255:	0020c0        	memw
40082258:	0388      	l32i.n	a8, a3, 0
4008225a:	fe08d6        	bgez	a8, 4008223e <i2c_esp32_wait$isra$1+0xe>
4008225d:	000446        	j	40082272 <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082260:	01c442        	addi	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
40082263:	85a332        	movi	a3, 0x385
40082266:	d91437        	beq	a4, a3, 40082243 <i2c_esp32_wait$isra$1+0x13>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082269:	58a232        	movi	a3, 0x258
4008226c:	02a347        	bge	a3, a4, 40082272 <i2c_esp32_wait$isra$1+0x42>
4008226f:	00bca5        	call8	40082e38 <z_impl_k_yield>
	while (sys_read32(I2C_SR_REG(config->index)) & I2C_BUS_BUSY) {
40082272:	002292        	l32i	a9, a2, 0
40082275:	f93e31        	l32r	a3, 40080770 <_iram_text_start+0x220>
40082278:	1189e0        	slli	a8, a9, 2
4008227b:	808890        	add	a8, a8, a9
4008227e:	118820        	slli	a8, a8, 14
40082281:	883a      	add.n	a8, a8, a3
	return *(volatile uint32_t *)addr;
40082283:	0020c0        	memw
40082286:	0888      	l32i.n	a8, a8, 0
40082288:	031c      	movi.n	a3, 16
4008228a:	108830        	and	a8, a8, a3
4008228d:	fcf856        	bnez	a8, 40082260 <i2c_esp32_wait$isra$1+0x30>
	return 0;
40082290:	082d      	mov.n	a2, a8
}
40082292:	f01d      	retw.n

40082294 <i2c_esp32_transfer>:
{
40082294:	008136        	entry	a1, 64
40082297:	206220        	or	a6, a2, a2
	struct i2c_esp32_data *data = dev->data;
4008229a:	032222        	l32i	a2, a2, 12
{
4008229d:	744040        	extui	a4, a4, 0, 8
400822a0:	f45050        	extui	a5, a5, 0, 16
	k_sem_take(&data->transfer_sem, K_FOREVER);
400822a3:	18c272        	addi	a7, a2, 24
	return z_impl_k_sem_take(sem, timeout);
400822a6:	f933c1        	l32r	a12, 40080774 <_iram_text_start+0x224>
400822a9:	f932d1        	l32r	a13, 40080774 <_iram_text_start+0x224>
400822ac:	20a770        	or	a10, a7, a7
400822af:	00c965        	call8	40082f44 <z_impl_k_sem_take>
	addr &= BIT_MASK(data->dev_config & I2C_ADDR_10_BITS ? 10 : 7);
400822b2:	0228      	l32i.n	a2, a2, 0
400822b4:	ffa392        	movi	a9, 0x3ff
400822b7:	042020        	extui	a2, a2, 0, 1
400822ba:	7fa082        	movi	a8, 127
400822bd:	938920        	movnez	a8, a9, a2
400822c0:	1124f0        	slli	a2, a4, 1
400822c3:	224a      	add.n	a2, a2, a4
400822c5:	1122e0        	slli	a2, a2, 2
400822c8:	232a      	add.n	a2, a3, a2
400822ca:	105850        	and	a5, a8, a5
	addr <<= 1;
400822cd:	1155f0        	slli	a5, a5, 1
	for (i = 0U; i < num_msgs; i++) {
400822d0:	4129      	s32i.n	a2, a1, 16
	addr |= BIT(0);
400822d2:	120c      	movi.n	a2, 1
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400822d4:	202520        	or	a2, a5, a2
400822d7:	5129      	s32i.n	a2, a1, 20
	for (i = 0U; i < num_msgs; i++) {
400822d9:	007806        	j	400824bd <i2c_esp32_transfer+0x229>
		if ((msgs[i].flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
400822dc:	012642        	l32i	a4, a6, 4
400822df:	0123a2        	l32i	a10, a3, 4
400822e2:	002482        	l32i	a8, a4, 0
400822e5:	2398      	l32i.n	a9, a3, 8
400822e7:	1128e0        	slli	a2, a8, 2
400822ea:	228a      	add.n	a2, a2, a8
400822ec:	f92381        	l32r	a8, 40080778 <_iram_text_start+0x228>
400822ef:	112220        	slli	a2, a2, 14
400822f2:	228a      	add.n	a2, a2, a8
400822f4:	03c8      	l32i.n	a12, a3, 0
400822f6:	080382        	l8ui	a8, a3, 8
400822f9:	01c9      	s32i.n	a12, a1, 0
400822fb:	048080        	extui	a8, a8, 0, 1
400822fe:	11a9      	s32i.n	a10, a1, 4
40082300:	2199      	s32i.n	a9, a1, 8
40082302:	b24b      	addi.n	a11, a2, 4
40082304:	0c3856        	bnez	a8, 400823cb <i2c_esp32_transfer+0x137>
	*cmd++ = (struct i2c_esp32_cmd) {
40082307:	0020c0        	memw
4008230a:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
4008230c:	05dd      	mov.n	a13, a5
4008230e:	01cd      	mov.n	a12, a1
40082310:	06ad      	mov.n	a10, a6
40082312:	ffae65        	call8	40081df8 <i2c_esp32_write_addr>
40082315:	0abd      	mov.n	a11, a10
		uint32_t to_send = MIN(I2C_ESP32_BUFFER_SIZE, msg.len);
40082317:	022c      	movi.n	a2, 32
40082319:	002986        	j	400823c3 <i2c_esp32_transfer+0x12f>
4008231c:	882000        	lsi	f0, a0, 0x220
4008231f:	f8d163        	lsi	f6, a1, 0x3e0
				    I2C_DATA_APB_REG(config->index));
40082322:	adf8      	l32i.n	a15, a13, 40
40082324:	7608      	l32i.n	a0, a6, 28
40082326:	198a      	add.n	a1, a9, a8
			sys_write32(*msg.buf++,
40082328:	0198      	l32i.n	a9, a1, 0
				    I2C_DATA_APB_REG(config->index));
4008232a:	04e8      	l32i.n	a14, a4, 0
			sys_write32(*msg.buf++,
4008232c:	c91b      	addi.n	a12, a9, 1
4008232e:	01c9      	s32i.n	a12, a1, 0
40082330:	0009c2        	l8ui	a12, a9, 0
				    I2C_DATA_APB_REG(config->index));
40082333:	119ee0        	slli	a9, a14, 2
40082336:	99ea      	add.n	a9, a9, a14
40082338:	119920        	slli	a9, a9, 14
4008233b:	99da      	add.n	a9, a9, a13
	*(volatile uint32_t *)addr = data;
4008233d:	0020c0        	memw
40082340:	09c9      	s32i.n	a12, a9, 0
		*cmd++ = (struct i2c_esp32_cmd) {
40082342:	990c      	movi.n	a9, 9
40082344:	11a980        	slli	a10, a9, 8
40082347:	749080        	extui	a9, a8, 0, 8
4008234a:	2099a0        	or	a9, a9, a10
4008234d:	0020c0        	memw
40082350:	0b99      	s32i.n	a9, a11, 0
		msg.len -= to_send;
40082352:	1198      	l32i.n	a9, a1, 4
40082354:	c08980        	sub	a8, a9, a8
40082357:	1189      	s32i.n	a8, a1, 4
		if (!msg.len && (msg.flags & I2C_MSG_STOP)) {
40082359:	c8dc      	bnez.n	a8, 40082379 <i2c_esp32_transfer+0xe5>
4008235b:	080192        	l8ui	a9, a1, 8
4008235e:	176917        	bbci	a9, 1, 40082379 <i2c_esp32_transfer+0xe5>
			*cmd = (struct i2c_esp32_cmd) {
40082361:	0020c0        	memw
40082364:	1b89      	s32i.n	a8, a11, 4
40082366:	f8ad91        	l32r	a9, 4008061c <_iram_text_start+0xcc>
40082369:	0020c0        	memw
4008236c:	1b88      	l32i.n	a8, a11, 4
4008236e:	108890        	and	a8, a8, a9
40082371:	f90291        	l32r	a9, 4008077c <_iram_text_start+0x22c>
40082374:	000586        	j	4008238e <i2c_esp32_transfer+0xfa>
40082377:	0c0000        	lsi	f0, a0, 48
			*cmd = (struct i2c_esp32_cmd) {
4008237a:	c008      	l32i.n	a0, a0, 48
4008237c:	890020        	lsi	f2, a0, 0x224
4008237f:	911b      	addi.n	a9, a1, 1
40082381:	c0f8a7        	bbsi	a8, 26, 40082345 <i2c_esp32_transfer+0xb1>
40082384:	880020        	lsi	f2, a0, 0x220
40082387:	901b      	addi.n	a9, a0, 1
40082389:	1088      	l32i.n	a8, a0, 4
4008238b:	f8a591        	l32r	a9, 40080620 <_iram_text_start+0xd0>
4008238e:	208890        	or	a8, a8, a9
40082391:	0020c0        	memw
40082394:	1b89      	s32i.n	a8, a11, 4
	ret = i2c_esp32_transmit(dev);
40082396:	06ad      	mov.n	a10, a6
40082398:	61b9      	s32i.n	a11, a1, 24
4008239a:	ffd865        	call8	40082120 <i2c_esp32_transmit>
4008239d:	0a8d      	mov.n	a8, a10
	if (!ret) {
4008239f:	61b8      	l32i.n	a11, a1, 24
400823a1:	7acc      	bnez.n	a10, 400823ac <i2c_esp32_transfer+0x118>
		return i2c_esp32_wait(dev, wait_cmd);
400823a3:	16a8      	l32i.n	a10, a6, 4
400823a5:	bb4b      	addi.n	a11, a11, 4
400823a7:	ffe8a5        	call8	40082230 <i2c_esp32_wait$isra$1>
400823aa:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
400823ac:	109896        	bltz	a8, 400824b9 <i2c_esp32_transfer+0x225>
		i2c_esp32_reset_fifo(config);
400823af:	04a8      	l32i.n	a10, a4, 0
400823b1:	ffa125        	call8	40081dc4 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400823b4:	0488      	l32i.n	a8, a4, 0
400823b6:	11b8e0        	slli	a11, a8, 2
400823b9:	bb8a      	add.n	a11, a11, a8
400823bb:	f8ef81        	l32r	a8, 40080778 <_iram_text_start+0x228>
400823be:	11bb20        	slli	a11, a11, 14
400823c1:	bb8a      	add.n	a11, a11, a8
400823c3:	1188      	l32i.n	a8, a1, 4
400823c5:	f54856        	bnez	a8, 4008231d <i2c_esp32_transfer+0x89>
400823c8:	003b46        	j	400824b9 <i2c_esp32_transfer+0x225>
	*cmd++ = (struct i2c_esp32_cmd) {
400823cb:	080c      	movi.n	a8, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400823cd:	51d8      	l32i.n	a13, a1, 20
	*cmd++ = (struct i2c_esp32_cmd) {
400823cf:	0020c0        	memw
400823d2:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400823d4:	01cd      	mov.n	a12, a1
400823d6:	20a660        	or	a10, a6, a6
400823d9:	ffa1e5        	call8	40081df8 <i2c_esp32_write_addr>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400823dc:	003506        	j	400824b4 <i2c_esp32_transfer+0x220>
400823df:	000000        	ill
		uint32_t to_read = MIN(I2C_ESP32_BUFFER_SIZE, msg.len - 1);
400823e2:	280b      	addi.n	a2, a8, -1
400823e4:	092c      	movi.n	a9, 32
400823e6:	632290        	minu	a2, a2, a9
		if (to_read) {
400823e9:	0f1826        	beqi	a8, 1, 400823fc <i2c_esp32_transfer+0x168>
			*cmd++ = (struct i2c_esp32_cmd) {
400823ec:	f8b4c1        	l32r	a12, 400806bc <_iram_text_start+0x16c>
400823ef:	74b020        	extui	a11, a2, 0, 8
400823f2:	20bbc0        	or	a11, a11, a12
400823f5:	0020c0        	memw
400823f8:	0ab9      	s32i.n	a11, a10, 0
400823fa:	aa4b      	addi.n	a10, a10, 4
		if (msg.len - to_read <= 1U) {
400823fc:	c08820        	sub	a8, a8, a2
400823ff:	3728f6        	bgeui	a8, 2, 4008243a <i2c_esp32_transfer+0x1a6>
			*cmd++ = (struct i2c_esp32_cmd) {
40082402:	f8df81        	l32r	a8, 40080780 <_iram_text_start+0x230>
40082405:	ba4b      	addi.n	a11, a10, 4
40082407:	0020c0        	memw
4008240a:	0a89      	s32i.n	a8, a10, 0
			if (msg.flags & I2C_MSG_STOP) {
4008240c:	080182        	l8ui	a8, a1, 8
			to_read++;
4008240f:	221b      	addi.n	a2, a2, 1
			if (msg.flags & I2C_MSG_STOP) {
40082411:	236817        	bbci	a8, 1, 40082438 <i2c_esp32_transfer+0x1a4>
				*cmd++ = (struct i2c_esp32_cmd) {
40082414:	080c      	movi.n	a8, 0
40082416:	0020c0        	memw
40082419:	1a89      	s32i.n	a8, a10, 4
4008241b:	0020c0        	memw
4008241e:	1a88      	l32i.n	a8, a10, 4
40082420:	f87fc1        	l32r	a12, 4008061c <_iram_text_start+0xcc>
40082423:	1088c0        	and	a8, a8, a12
40082426:	f8d5c1        	l32r	a12, 4008077c <_iram_text_start+0x22c>
40082429:	2088c0        	or	a8, a8, a12
4008242c:	0020c0        	memw
4008242f:	1a89      	s32i.n	a8, a10, 4
40082431:	4a0c      	movi.n	a10, 4
		if (!wait_cmd) {
40082433:	3b8c      	beqz.n	a11, 4008243a <i2c_esp32_transfer+0x1a6>
40082435:	000786        	j	40082457 <i2c_esp32_transfer+0x1c3>
			*cmd++ = (struct i2c_esp32_cmd) {
40082438:	0bad      	mov.n	a10, a11
			*cmd++ = (struct i2c_esp32_cmd) {
4008243a:	0b0c      	movi.n	a11, 0
4008243c:	0020c0        	memw
4008243f:	0ab9      	s32i.n	a11, a10, 0
40082441:	0020c0        	memw
40082444:	0a88      	l32i.n	a8, a10, 0
40082446:	f875c1        	l32r	a12, 4008061c <_iram_text_start+0xcc>
40082449:	1088c0        	and	a8, a8, a12
4008244c:	f875c1        	l32r	a12, 40080620 <_iram_text_start+0xd0>
4008244f:	2088c0        	or	a8, a8, a12
40082452:	0020c0        	memw
40082455:	0a89      	s32i.n	a8, a10, 0
	ret = i2c_esp32_transmit(dev);
40082457:	06ad      	mov.n	a10, a6
40082459:	61b9      	s32i.n	a11, a1, 24
4008245b:	ffcc65        	call8	40082120 <i2c_esp32_transmit>
4008245e:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082460:	61b8      	l32i.n	a11, a1, 24
40082462:	006a56        	bnez	a10, 4008246c <i2c_esp32_transfer+0x1d8>
		return i2c_esp32_wait(dev, wait_cmd);
40082465:	16a8      	l32i.n	a10, a6, 4
40082467:	ffdca5        	call8	40082230 <i2c_esp32_wait$isra$1>
4008246a:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
4008246c:	049896        	bltz	a8, 400824b9 <i2c_esp32_transfer+0x225>
		for (i = 0U; i < to_read; i++) {
4008246f:	0a0c      	movi.n	a10, 0
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082471:	f8a3b1        	l32r	a11, 40080700 <_iram_text_start+0x1b0>
40082474:	000786        	j	40082496 <i2c_esp32_transfer+0x202>
40082477:	24c200        	extui	a12, a0, 2, 3
4008247a:	caa200        	float.s	f10, a2, 0
		for (i = 0U; i < to_read; i++) {
4008247d:	8ce001        	l32r	a0, 40065800 <esp32_rom_gpio_matrix_out+0x5b8f4>
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082480:	88ca11        	l32r	a1, 400647a8 <esp32_rom_gpio_matrix_out+0x5a89c>
40082483:	118820        	slli	a8, a8, 14
40082486:	88ba      	add.n	a8, a8, a11
	return *(volatile uint32_t *)addr;
40082488:	0020c0        	memw
4008248b:	08c8      	l32i.n	a12, a8, 0
			*msg.buf++ = v & I2C_FIFO_RDATA;
4008248d:	0188      	l32i.n	a8, a1, 0
4008248f:	d81b      	addi.n	a13, a8, 1
40082491:	01d9      	s32i.n	a13, a1, 0
40082493:	0048c2        	s8i	a12, a8, 0
		for (i = 0U; i < to_read; i++) {
40082496:	de9a27        	bne	a10, a2, 40082478 <i2c_esp32_transfer+0x1e4>
		msg.len -= to_read;
40082499:	1188      	l32i.n	a8, a1, 4
4008249b:	c0a8a0        	sub	a10, a8, a10
4008249e:	11a9      	s32i.n	a10, a1, 4
		i2c_esp32_reset_fifo(config);
400824a0:	04a8      	l32i.n	a10, a4, 0
400824a2:	ff9225        	call8	40081dc4 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400824a5:	0488      	l32i.n	a8, a4, 0
400824a7:	11a8e0        	slli	a10, a8, 2
400824aa:	aa8a      	add.n	a10, a10, a8
400824ac:	f8b381        	l32r	a8, 40080778 <_iram_text_start+0x228>
400824af:	11aa20        	slli	a10, a10, 14
400824b2:	aa8a      	add.n	a10, a10, a8
400824b4:	1188      	l32i.n	a8, a1, 4
400824b6:	f28856        	bnez	a8, 400823e2 <i2c_esp32_transfer+0x14e>
		if (ret < 0) {
400824b9:	33cb      	addi.n	a3, a3, 12
400824bb:	88cc      	bnez.n	a8, 400824c7 <i2c_esp32_transfer+0x233>
	for (i = 0U; i < num_msgs; i++) {
400824bd:	4128      	l32i.n	a2, a1, 16
400824bf:	021237        	beq	a2, a3, 400824c5 <i2c_esp32_transfer+0x231>
400824c2:	ff8586        	j	400822dc <i2c_esp32_transfer+0x48>
400824c5:	080c      	movi.n	a8, 0
	z_impl_k_sem_give(sem);
400824c7:	07ad      	mov.n	a10, a7
400824c9:	6189      	s32i.n	a8, a1, 24
400824cb:	00a3e5        	call8	40082f08 <z_impl_k_sem_give>
}
400824ce:	6188      	l32i.n	a8, a1, 24
400824d0:	082d      	mov.n	a2, a8
400824d2:	f01d      	retw.n

400824d4 <uart_esp32_configure>:
	return 0;
}

static int uart_esp32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
400824d4:	006136        	entry	a1, 48
	uint32_t conf0 = UART_TICK_REF_ALWAYS_ON;
	uint32_t conf1 = (UART_RX_FIFO_THRESH << UART_RXFIFO_FULL_THRHD_S)
		      | (UART_TX_FIFO_THRESH << UART_TXFIFO_EMPTY_THRHD_S);

	uart_esp32_configure_pins(dev);
400824d7:	1248      	l32i.n	a4, a2, 4
	esp32_rom_gpio_matrix_out(cfg->pins.tx,
400824d9:	0d0c      	movi.n	a13, 0
400824db:	34b8      	l32i.n	a11, a4, 12
400824dd:	0724a2        	l32i	a10, a4, 28
400824e0:	0dcd      	mov.n	a12, a13
400824e2:	f88b81        	l32r	a8, 40080710 <_iram_text_start+0x1c0>
400824e5:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(cfg->pins.rx,
400824e8:	44b8      	l32i.n	a11, a4, 16
400824ea:	84a8      	l32i.n	a10, a4, 32
400824ec:	0c0c      	movi.n	a12, 0
400824ee:	f88981        	l32r	a8, 40080714 <_iram_text_start+0x1c4>
400824f1:	0008e0        	callx8	a8
	if (cfg->pins.cts) {
400824f4:	a4a8      	l32i.n	a10, a4, 40
400824f6:	aa8c      	beqz.n	a10, 40082504 <uart_esp32_configure+0x30>
		esp32_rom_gpio_matrix_out(cfg->pins.cts,
400824f8:	0d0c      	movi.n	a13, 0
400824fa:	64b8      	l32i.n	a11, a4, 24
400824fc:	0dcd      	mov.n	a12, a13
400824fe:	f88481        	l32r	a8, 40080710 <_iram_text_start+0x1c0>
40082501:	0008e0        	callx8	a8
	if (cfg->pins.rts) {
40082504:	94a8      	l32i.n	a10, a4, 36
40082506:	8a8c      	beqz.n	a10, 40082512 <uart_esp32_configure+0x3e>
		esp32_rom_gpio_matrix_in(cfg->pins.rts,
40082508:	54b8      	l32i.n	a11, a4, 20
4008250a:	0c0c      	movi.n	a12, 0
4008250c:	f88281        	l32r	a8, 40080714 <_iram_text_start+0x1c4>
4008250f:	0008e0        	callx8	a8
	clock_control_on(DEV_DATA(dev)->clock_dev, DEV_CFG(dev)->peripheral_id);
40082512:	3248      	l32i.n	a4, a2, 12
40082514:	1258      	l32i.n	a5, a2, 4
40082516:	24a8      	l32i.n	a10, a4, 8
	return api->on(dev, sys);
40082518:	b5b8      	l32i.n	a11, a5, 44
4008251a:	2a48      	l32i.n	a4, a10, 8
4008251c:	0448      	l32i.n	a4, a4, 0
4008251e:	0004e0        	callx8	a4

	/*
	 * Reset RX Buffer by reading all received bytes
	 * Hardware Reset functionality can't be used with UART 1/2
	 */
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
40082521:	12b8      	l32i.n	a11, a2, 4
40082523:	0b58      	l32i.n	a5, a11, 0
40082525:	000106        	j	4008252d <uart_esp32_configure+0x59>
		(void) DEV_BASE(dev)->fifo;
40082528:	0020c0        	memw
4008252b:	0548      	l32i.n	a4, a5, 0
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
4008252d:	0020c0        	memw
40082530:	7548      	l32i.n	a4, a5, 28
40082532:	744040        	extui	a4, a4, 0, 8
40082535:	fef456        	bnez	a4, 40082528 <uart_esp32_configure+0x54>
	}

	switch (cfg->parity) {
40082538:	040342        	l8ui	a4, a3, 4
4008253b:	0d1426        	beqi	a4, 1, 4008254c <uart_esp32_configure+0x78>
4008253e:	249c      	beqz.n	a4, 40082554 <uart_esp32_configure+0x80>
		break;
	case UART_CFG_PARITY_ODD:
		conf0 |= UART_PARITY;
		break;
	default:
		return -ENOTSUP;
40082540:	ddaf92        	movi	a9, -35
	switch (cfg->parity) {
40082543:	022426        	beqi	a4, 2, 40082549 <uart_esp32_configure+0x75>
40082546:	002606        	j	400825e2 <uart_esp32_configure+0x10e>
40082549:	0001c6        	j	40082554 <uart_esp32_configure+0x80>
		conf0 |= UART_PARITY;
4008254c:	f88e51        	l32r	a5, 40080784 <_iram_text_start+0x234>
4008254f:	000106        	j	40082557 <uart_esp32_configure+0x83>
40082552:	510000        	lsi	f0, a0, 0x144
		conf0 &= ~(UART_PARITY);
40082555:	82f836        	entry	a8, 0x4178
	}

	switch (cfg->stop_bits) {
40082558:	920503        	lsi	f0, a5, 0x248
	case UART_CFG_STOP_BITS_1_5:
	case UART_CFG_STOP_BITS_2:
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
		break;
	default:
		return -ENOTSUP;
4008255b:	af          	.byte 0xaf
4008255c:	0bdd      	mov.n	a13, a11
	switch (cfg->stop_bits) {
4008255e:	f648      	l32i.n	a4, a6, 60
40082560:	c07f34        	lsi	f3, a15, 0x300
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
40082563:	11a8      	l32i.n	a10, a1, 4
	}

	if (cfg->data_bits <= UART_CFG_DATA_BITS_8) {
40082565:	060382        	l8ui	a8, a3, 6
40082568:	7648f6        	bgeui	a8, 4, 400825e2 <uart_esp32_configure+0x10e>
		conf0 |= cfg->data_bits << UART_BIT_NUM_S;
4008256b:	1148e0        	slli	a4, a8, 2
4008256e:	2044a0        	or	a4, a4, a10
40082571:	204450        	or	a4, a4, a5
	} else {
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
40082574:	070352        	l8ui	a5, a3, 7
40082577:	d58c      	beqz.n	a5, 40082588 <uart_esp32_configure+0xb4>
40082579:	651566        	bnei	a5, 1, 400825e2 <uart_esp32_configure+0x10e>
	case UART_CFG_FLOW_CTRL_NONE:
		conf0 &= ~(UART_TX_FLOW_EN);
		conf1 &= ~(UART_RX_FLOW_EN);
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		conf0 |= UART_TX_FLOW_EN;
4008257c:	f83951        	l32r	a5, 40080660 <_iram_text_start+0x110>
4008257f:	204450        	or	a4, a4, a5
		conf1 |= UART_RX_FLOW_EN;
40082582:	f88151        	l32r	a5, 40080788 <_iram_text_start+0x238>
		break;
40082585:	000086        	j	4008258b <uart_esp32_configure+0xb7>
		conf1 &= ~(UART_RX_FLOW_EN);
40082588:	01a152        	movi	a5, 0x101
	uint32_t sys_clk_freq = 0;
4008258b:	080c      	movi.n	a8, 0
4008258d:	0189      	s32i.n	a8, a1, 0
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
4008258f:	3288      	l32i.n	a8, a2, 12
	return api->get_rate(dev, sys, rate);
40082591:	bbb8      	l32i.n	a11, a11, 44
40082593:	28a8      	l32i.n	a10, a8, 8
40082595:	01cd      	mov.n	a12, a1
40082597:	2a88      	l32i.n	a8, a10, 8
	default:
		return -ENOTSUP;
	}

	if (uart_esp32_set_baudrate(dev, cfg->baudrate)) {
40082599:	002362        	l32i	a6, a3, 0
4008259c:	032882        	l32i	a8, a8, 12
4008259f:	0008e0        	callx8	a8
400825a2:	12b8      	l32i.n	a11, a2, 4
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
400825a4:	6aec      	bnez.n	a10, 400825ce <uart_esp32_configure+0xfa>
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
400825a6:	0188      	l32i.n	a8, a1, 0
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
400825a8:	0ba8      	l32i.n	a10, a11, 0
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
400825aa:	1188c0        	slli	a8, a8, 4
400825ad:	c28860        	quou	a8, a8, a6
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
400825b0:	0020c0        	memw
400825b3:	7a98      	l32i.n	a9, a10, 28
400825b5:	759090        	extui	a9, a9, 16, 8
400825b8:	ff4956        	bnez	a9, 400825b0 <uart_esp32_configure+0xdc>
	if (clk_div < 16) {
400825bb:	f90c      	movi.n	a9, 15
400825bd:	0db987        	bgeu	a9, a8, 400825ce <uart_esp32_configure+0xfa>
	DEV_BASE(dev)->clk_div = ((clk_div >> 4) | (clk_div & 0xf));
400825c0:	419480        	srli	a9, a8, 4
400825c3:	348080        	extui	a8, a8, 0, 4
400825c6:	208980        	or	a8, a9, a8
400825c9:	0020c0        	memw
400825cc:	5a89      	s32i.n	a8, a10, 20
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400825ce:	0338      	l32i.n	a3, a3, 0
400825d0:	3228      	l32i.n	a2, a2, 12
	}

	DEV_BASE(dev)->conf0 = conf0;
	DEV_BASE(dev)->conf1 = conf1;

	return 0;
400825d2:	090c      	movi.n	a9, 0
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400825d4:	0239      	s32i.n	a3, a2, 0
	DEV_BASE(dev)->conf0 = conf0;
400825d6:	0b28      	l32i.n	a2, a11, 0
400825d8:	0020c0        	memw
400825db:	8249      	s32i.n	a4, a2, 32
	DEV_BASE(dev)->conf1 = conf1;
400825dd:	0020c0        	memw
400825e0:	9259      	s32i.n	a5, a2, 36
}
400825e2:	092d      	mov.n	a2, a9
400825e4:	f01d      	retw.n
	...

400825e8 <uart_esp32_init>:

static int uart_esp32_init(const struct device *dev)
{
400825e8:	004136        	entry	a1, 32
	struct uart_esp32_data *data = DEV_DATA(dev);

	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400825eb:	012282        	l32i	a8, a2, 4
	struct uart_esp32_data *data = DEV_DATA(dev);
400825ee:	032232        	l32i	a3, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400825f1:	0228a2        	l32i	a10, a8, 8
400825f4:	000965        	call8	4008268c <z_impl_device_get_binding>

	__ASSERT_NO_MSG(data->clock_dev);

	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400825f7:	32b8      	l32i.n	a11, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400825f9:	23a9      	s32i.n	a10, a3, 8
	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400825fb:	02ad      	mov.n	a10, a2
400825fd:	ffed65        	call8	400824d4 <uart_esp32_configure>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->dev_conf.irq_config_func(dev);
#endif
	return 0;
}
40082600:	020c      	movi.n	a2, 0
40082602:	f01d      	retw.n

40082604 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
40082604:	004136        	entry	a1, 32
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
40082607:	f86181        	l32r	a8, 4008078c <_iram_text_start+0x23c>
4008260a:	1132e0        	slli	a3, a2, 2
4008260d:	221b      	addi.n	a2, a2, 1
4008260f:	1122e0        	slli	a2, a2, 2
40082612:	383a      	add.n	a3, a8, a3
40082614:	282a      	add.n	a2, a8, a2
40082616:	0338      	l32i.n	a3, a3, 0
40082618:	0248      	l32i.n	a4, a2, 0

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) == 0) && (dev != NULL)) {
4008261a:	150c      	movi.n	a5, 1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
4008261c:	000d86        	j	40082656 <z_sys_init_run_level+0x52>
4008261f:	132800        	lsi	f0, a8, 76
		if ((entry->init(dev) == 0) && (dev != NULL)) {
40082622:	0388      	l32i.n	a8, a3, 0
40082624:	02ad      	mov.n	a10, a2
40082626:	0008e0        	callx8	a8
40082629:	7aec      	bnez.n	a10, 40082654 <z_sys_init_run_level+0x50>
4008262b:	52ac      	beqz.n	a2, 40082654 <z_sys_init_run_level+0x50>
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
4008262d:	f85881        	l32r	a8, 40080790 <_iram_text_start+0x240>
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
40082630:	f85991        	l32r	a9, 40080794 <_iram_text_start+0x244>
40082633:	c02280        	sub	a2, a2, a8
40082636:	212420        	srai	a2, a2, 4
40082639:	418520        	srli	a8, a2, 5
4008263c:	1188e0        	slli	a8, a8, 2
4008263f:	889a      	add.n	a8, a8, a9
	uint32_t temp = *(volatile uint32_t *)addr;
40082641:	0020c0        	memw
40082644:	0898      	l32i.n	a9, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082646:	401200        	ssl	a2
40082649:	a12500        	sll	a2, a5
4008264c:	202290        	or	a2, a2, a9
4008264f:	0020c0        	memw
40082652:	0829      	s32i.n	a2, a8, 0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
40082654:	338b      	addi.n	a3, a3, 8
40082656:	c63347        	bltu	a3, a4, 40082620 <z_sys_init_run_level+0x1c>
		}
	}
}
40082659:	f01d      	retw.n
	...

4008265c <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
4008265c:	004136        	entry	a1, 32
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
4008265f:	f84c81        	l32r	a8, 40080790 <_iram_text_start+0x240>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
40082662:	f84c91        	l32r	a9, 40080794 <_iram_text_start+0x244>
40082665:	c08280        	sub	a8, a2, a8
40082668:	218480        	srai	a8, a8, 4
4008266b:	412580        	srli	a2, a8, 5
4008266e:	1122e0        	slli	a2, a2, 2
40082671:	229a      	add.n	a2, a2, a9
	uint32_t temp = *(volatile uint32_t *)addr;
40082673:	0020c0        	memw
40082676:	02a8      	l32i.n	a10, a2, 0
	return temp & (1 << bit);
40082678:	190c      	movi.n	a9, 1
4008267a:	401800        	ssl	a8
4008267d:	a12900        	sll	a2, a9
40082680:	1022a0        	and	a2, a2, a10
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
40082683:	080c      	movi.n	a8, 0
40082685:	938920        	movnez	a8, a9, a2
40082688:	082d      	mov.n	a2, a8
}
4008268a:	f01d      	retw.n

4008268c <z_impl_device_get_binding>:
{
4008268c:	004136        	entry	a1, 32
4008268f:	024d      	mov.n	a4, a2
	for (dev = __device_start; dev != __device_end; dev++) {
40082691:	f83f21        	l32r	a2, 40080790 <_iram_text_start+0x240>
40082694:	f84031        	l32r	a3, 40080794 <_iram_text_start+0x244>
40082697:	025d      	mov.n	a5, a2
40082699:	000486        	j	400826af <z_impl_device_get_binding+0x23>
4008269c:	a22000        	muluh	a2, a0, a0
		if (z_device_ready(dev) && (dev->name == name)) {
4008269f:	fba520        	f64subc	a2, a5, 1, 0
400826a2:	ff          	.byte 0xff
400826a3:	005a16        	beqz	a10, 400826ac <z_impl_device_get_binding+0x20>
400826a6:	002282        	l32i	a8, a2, 0
400826a9:	2f1847        	beq	a8, a4, 400826dc <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
400826ac:	10c222        	addi	a2, a2, 16
400826af:	ea9237        	bne	a2, a3, 4008269d <z_impl_device_get_binding+0x11>
	for (dev = __device_start; dev != __device_end; dev++) {
400826b2:	052d      	mov.n	a2, a5
400826b4:	0007c6        	j	400826d7 <z_impl_device_get_binding+0x4b>
400826b7:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400826ba:	02ad      	mov.n	a10, a2
400826bc:	fff9e5        	call8	4008265c <z_device_ready>
400826bf:	7acc      	bnez.n	a10, 400826ca <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
400826c1:	10c222        	addi	a2, a2, 16
400826c4:	0003c6        	j	400826d7 <z_impl_device_get_binding+0x4b>
400826c7:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400826ca:	02b8      	l32i.n	a11, a2, 0
400826cc:	04ad      	mov.n	a10, a4
400826ce:	00d8e5        	call8	4008345c <strcmp>
400826d1:	feca56        	bnez	a10, 400826c1 <z_impl_device_get_binding+0x35>
400826d4:	000106        	j	400826dc <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
400826d7:	df9237        	bne	a2, a3, 400826ba <z_impl_device_get_binding+0x2e>
	return NULL;
400826da:	020c      	movi.n	a2, 0
}
400826dc:	f01d      	retw.n
	...

400826e0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
400826e0:	004136        	entry	a1, 32
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
400826e3:	02ad      	mov.n	a10, a2
400826e5:	00fd25        	call8	400836b8 <arch_system_halt>

400826e8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
400826e8:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400826eb:	006350        	rsil	a5, 3
	return z_impl_k_current_get();
400826ee:	0080e5        	call8	40082efc <z_impl_k_current_get>
400826f1:	204aa0        	or	a4, a10, a10
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
400826f4:	03bd      	mov.n	a11, a3
400826f6:	02ad      	mov.n	a10, a2
400826f8:	fffe65        	call8	400826e0 <k_sys_fatal_error_handler>
	XTOS_RESTORE_INTLEVEL(key);
400826fb:	13e650        	wsr.ps	a5
400826fe:	002010        	rsync
	z_impl_k_thread_abort(thread);
40082701:	04ad      	mov.n	a10, a4
40082703:	0094e5        	call8	40083050 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
40082706:	f01d      	retw.n

40082708 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
40082708:	004136        	entry	a1, 32
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
4008270b:	f82381        	l32r	a8, 40080798 <_iram_text_start+0x248>
4008270e:	190c      	movi.n	a9, 1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
40082710:	02a0a2        	movi	a10, 2
	z_sys_post_kernel = true;
40082713:	004892        	s8i	a9, a8, 0
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
40082716:	ffeee5        	call8	40082604 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
40082719:	f820c1        	l32r	a12, 4008079c <_iram_text_start+0x24c>
4008271c:	f821b1        	l32r	a11, 400807a0 <_iram_text_start+0x250>
4008271f:	f821a1        	l32r	a10, 400807a4 <_iram_text_start+0x254>
40082722:	fe7ba5        	call8	40080edc <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
40082725:	3a0c      	movi.n	a10, 3
40082727:	ffede5        	call8	40082604 <z_sys_init_run_level>

	z_init_static_threads();
4008272a:	008ae5        	call8	40082fd8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
4008272d:	fe18e5        	call8	400808bc <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
40082730:	f81e91        	l32r	a9, 400807a8 <_iram_text_start+0x258>
40082733:	ea7c      	movi.n	a10, -2
40082735:	0c0982        	l8ui	a8, a9, 12
40082738:	1088a0        	and	a8, a8, a10
4008273b:	0c4982        	s8i	a8, a9, 12

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
4008273e:	f01d      	retw.n

40082740 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
40082740:	020136        	entry	a1, 0x100

static ALWAYS_INLINE void arch_kernel_init(void)
{
	_cpu_t *cpu0 = &_kernel.cpus[0];

	cpu0->nested = 0;
40082743:	f78b21        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082746:	030c      	movi.n	a3, 0
40082748:	0239      	s32i.n	a3, a2, 0
	 * access.  That saves 4 bytes of immediate value to store the
	 * address when compared to the legacy scheme.  But in SMP
	 * this record is a per-CPU thing and having it stored in a SR
	 * already is a big win.
	 */
	WSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR, cpu0);
4008274a:	13f420        	wsr.misc0	a2
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
4008274d:	01a142        	movi	a4, 0x101
40082750:	0e5142        	s16i	a4, a1, 28
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
40082753:	10c142        	addi	a4, a1, 16
40082756:	2249      	s32i.n	a4, a2, 8

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
40082758:	03ad      	mov.n	a10, a3
4008275a:	ffeaa5        	call8	40082604 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
4008275d:	1a0c      	movi.n	a10, 1
4008275f:	ffea65        	call8	40082604 <z_sys_init_run_level>
	z_sched_init();
40082762:	006ba5        	call8	40082e1c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
40082765:	f81041        	l32r	a4, 400807a8 <_iram_text_start+0x258>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082768:	f81351        	l32r	a5, 400807b4 <_iram_text_start+0x264>
	_kernel.ready_q.cache = &z_main_thread;
4008276b:	e249      	s32i.n	a4, a2, 56
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
4008276d:	3159      	s32i.n	a5, a1, 12
4008276f:	f80fd1        	l32r	a13, 400807ac <_iram_text_start+0x25c>
40082772:	150c      	movi.n	a5, 1
40082774:	f7b4c1        	l32r	a12, 40080644 <_iram_text_start+0xf4>
40082777:	f80eb1        	l32r	a11, 400807b0 <_iram_text_start+0x260>
4008277a:	03fd      	mov.n	a15, a3
4008277c:	03ed      	mov.n	a14, a3
4008277e:	1139      	s32i.n	a3, a1, 4
40082780:	0139      	s32i.n	a3, a1, 0
40082782:	2159      	s32i.n	a5, a1, 8
40082784:	04ad      	mov.n	a10, a4
40082786:	007fa5        	call8	40082f80 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082789:	0d0462        	l8ui	a6, a4, 13
4008278c:	b77c      	movi.n	a7, -5
4008278e:	106670        	and	a6, a6, a7
40082791:	0d4462        	s8i	a6, a4, 13
	z_ready_thread(&z_main_thread);
40082794:	04ad      	mov.n	a10, a4
40082796:	002ce5        	call8	40082a64 <z_ready_thread>
	z_setup_new_thread(thread, stack,
40082799:	f80941        	l32r	a4, 400807c0 <_iram_text_start+0x270>
4008279c:	f90c      	movi.n	a9, 15
4008279e:	f806d1        	l32r	a13, 400807b8 <_iram_text_start+0x268>
400827a1:	f806b1        	l32r	a11, 400807bc <_iram_text_start+0x26c>
400827a4:	3139      	s32i.n	a3, a1, 12
400827a6:	1199      	s32i.n	a9, a1, 4
400827a8:	0139      	s32i.n	a3, a1, 0
400827aa:	03fd      	mov.n	a15, a3
400827ac:	03ed      	mov.n	a14, a3
400827ae:	2159      	s32i.n	a5, a1, 8
400827b0:	00a4c2        	movi	a12, 0x400
400827b3:	04ad      	mov.n	a10, a4
400827b5:	346192        	s32i	a9, a1, 208
400827b8:	007c65        	call8	40082f80 <z_setup_new_thread>
400827bb:	0d0462        	l8ui	a6, a4, 13
		_kernel.cpus[i].id = i;
400827be:	144232        	s8i	a3, a2, 20
400827c1:	106670        	and	a6, a6, a7
400827c4:	0d4462        	s8i	a6, a4, 13
		_kernel.cpus[i].irq_stack =
400827c7:	f7ff61        	l32r	a6, 400807c4 <_iram_text_start+0x274>
	z_setup_new_thread(thread, stack,
400827ca:	342192        	l32i	a9, a1, 208
		_kernel.cpus[i].irq_stack =
400827cd:	1269      	s32i.n	a6, a2, 4
	z_setup_new_thread(thread, stack,
400827cf:	f7ff61        	l32r	a6, 400807cc <_iram_text_start+0x27c>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400827d2:	3249      	s32i.n	a4, a2, 12
	z_setup_new_thread(thread, stack,
400827d4:	f7f9d1        	l32r	a13, 400807b8 <_iram_text_start+0x268>
400827d7:	f7fcb1        	l32r	a11, 400807c8 <_iram_text_start+0x278>
400827da:	3139      	s32i.n	a3, a1, 12
400827dc:	0139      	s32i.n	a3, a1, 0
400827de:	03fd      	mov.n	a15, a3
400827e0:	03ed      	mov.n	a14, a3
400827e2:	2159      	s32i.n	a5, a1, 8
400827e4:	1199      	s32i.n	a9, a1, 4
400827e6:	00a4c2        	movi	a12, 0x400
400827e9:	06ad      	mov.n	a10, a6
400827eb:	007965        	call8	40082f80 <z_setup_new_thread>
400827ee:	cd0432        	l8ui	a3, a4, 205
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400827f1:	9269      	s32i.n	a6, a2, 36
400827f3:	103370        	and	a3, a3, a7
400827f6:	cd4432        	s8i	a3, a4, 205
		_kernel.cpus[i].irq_stack =
400827f9:	f7f531        	l32r	a3, 400807d0 <_iram_text_start+0x280>
		_kernel.cpus[i].id = i;
400827fc:	2c4252        	s8i	a5, a2, 44
		_kernel.cpus[i].irq_stack =
400827ff:	7239      	s32i.n	a3, a2, 28
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
40082801:	f7f431        	l32r	a3, 400807d4 <_iram_text_start+0x284>
40082804:	c239      	s32i.n	a3, a2, 48
	list->tail = (sys_dnode_t *)list;
40082806:	d239      	s32i.n	a3, a2, 52
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082808:	006350        	rsil	a5, 3
	old_thread = _current;
4008280b:	2248      	l32i.n	a4, a2, 8
	return _kernel.ready_q.cache;
4008280d:	e238      	l32i.n	a3, a2, 56
	if (new_thread != old_thread) {
4008280f:	121437        	beq	a4, a3, 40082825 <z_cstart+0xe5>
		z_reset_time_slice();
40082812:	0001a5        	call8	4008282c <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082815:	567c      	movi.n	a6, -11

void xtensa_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	return xtensa_switch(switch_to, switched_from);
40082817:	1423a2        	l32i	a10, a3, 80
4008281a:	136462        	s32i	a6, a4, 76
		_current_cpu->current = new_thread;
4008281d:	2239      	s32i.n	a3, a2, 8
4008281f:	50c4b2        	addi	a11, a4, 80
40082822:	fef0e5        	call8	40081730 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
40082825:	13e650        	wsr.ps	a5
40082828:	002010        	rsync
	...

4008282c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
4008282c:	004136        	entry	a1, 32
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
4008282f:	f7ea21        	l32r	a2, 400807d8 <_iram_text_start+0x288>
40082832:	002282        	l32i	a8, a2, 0
40082835:	013816        	beqz	a8, 4008284c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
40082838:	fede65        	call8	40081620 <z_clock_elapsed>
4008283b:	002282        	l32i	a8, a2, 0
4008283e:	f74c21        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082841:	a8aa      	add.n	a10, a8, a10
40082843:	42a9      	s32i.n	a10, a2, 16
		z_set_timeout_expiry(slice_time, false);
40082845:	0b0c      	movi.n	a11, 0
40082847:	08ad      	mov.n	a10, a8
40082849:	00a3a5        	call8	40083284 <z_set_timeout_expiry>
	}
}
4008284c:	f01d      	retw.n
	...

40082850 <z_swap_irqlock>:
{
40082850:	004136        	entry	a1, 32
	old_thread = _current;
40082853:	f74731        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082856:	2358      	l32i.n	a5, a3, 8
40082858:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
4008285a:	121547        	beq	a5, a4, 40082870 <z_swap_irqlock+0x20>
		z_reset_time_slice();
4008285d:	fffce5        	call8	4008282c <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082860:	587c      	movi.n	a8, -11
40082862:	1424a2        	l32i	a10, a4, 80
40082865:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082868:	2349      	s32i.n	a4, a3, 8
4008286a:	50c5b2        	addi	a11, a5, 80
4008286d:	feec25        	call8	40081730 <xtensa_switch>
40082870:	13e620        	wsr.ps	a2
40082873:	002010        	rsync
	return _current->swap_retval;
40082876:	2338      	l32i.n	a3, a3, 8
}
40082878:	132322        	l32i	a2, a3, 76
4008287b:	f01d      	retw.n
4008287d:	000000        	ill

40082880 <z_swap$isra$14>:
static inline int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
40082880:	004136        	entry	a1, 32
	old_thread = _current;
40082883:	f73b31        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082886:	2358      	l32i.n	a5, a3, 8
40082888:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
4008288a:	121547        	beq	a5, a4, 400828a0 <z_swap$isra$14+0x20>
		z_reset_time_slice();
4008288d:	fff9e5        	call8	4008282c <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082890:	587c      	movi.n	a8, -11
40082892:	1424a2        	l32i	a10, a4, 80
40082895:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082898:	2349      	s32i.n	a4, a3, 8
4008289a:	50c5b2        	addi	a11, a5, 80
4008289d:	fee925        	call8	40081730 <xtensa_switch>
400828a0:	13e620        	wsr.ps	a2
400828a3:	002010        	rsync
	return _current->swap_retval;
400828a6:	2338      	l32i.n	a3, a3, 8
}
400828a8:	132322        	l32i	a2, a3, 76
400828ab:	f01d      	retw.n
400828ad:	000000        	ill

400828b0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
400828b0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400828b3:	006340        	rsil	a4, 3
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
400828b6:	f72e81        	l32r	a8, 40080570 <_iram_text_start+0x20>
400828b9:	00a092        	movi	a9, 0
400828bc:	046892        	s32i	a9, a8, 16
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
400828bf:	1182e0        	slli	a8, a2, 2
400828c2:	808820        	add	a8, a8, a2
		slice_time = k_ms_to_ticks_ceil32(slice);
400828c5:	f7c421        	l32r	a2, 400807d8 <_iram_text_start+0x288>
400828c8:	1188f0        	slli	a8, a8, 1
400828cb:	0289      	s32i.n	a8, a2, 0
		slice_max_prio = prio;
400828cd:	f7c321        	l32r	a2, 400807dc <_iram_text_start+0x28c>
400828d0:	0239      	s32i.n	a3, a2, 0
		z_reset_time_slice();
400828d2:	fff5a5        	call8	4008282c <z_reset_time_slice>
	XTOS_RESTORE_INTLEVEL(key);
400828d5:	13e640        	wsr.ps	a4
400828d8:	002010        	rsync
	}
}
400828db:	f01d      	retw.n
400828dd:	000000        	ill

400828e0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
400828e0:	004136        	entry	a1, 32
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & 0xf) == 0; /* INTLEVEL field */
400828e3:	348030        	extui	a8, a3, 0, 4
400828e6:	20a330        	or	a10, a3, a3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
400828e9:	017856        	bnez	a8, 40082904 <z_reschedule+0x24>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	_cpu_t *cpu;

	cpu = (_cpu_t *)RSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR);
400828ec:	03f480        	rsr.misc0	a8
400828ef:	002882        	l32i	a8, a8, 0
400828f2:	e8cc      	bnez.n	a8, 40082904 <z_reschedule+0x24>
400828f4:	f71f81        	l32r	a8, 40080570 <_iram_text_start+0x20>
	if (resched(key.key) && need_swap()) {
400828f7:	e898      	l32i.n	a9, a8, 56
400828f9:	2888      	l32i.n	a8, a8, 8
400828fb:	051987        	beq	a9, a8, 40082904 <z_reschedule+0x24>
		z_swap(lock, key);
400828fe:	fff825        	call8	40082880 <z_swap$isra$14>
40082901:	000146        	j	4008290a <z_reschedule+0x2a>
	XTOS_RESTORE_INTLEVEL(key);
40082904:	13e6a0        	wsr.ps	a10
40082907:	002010        	rsync
	} else {
		k_spin_unlock(lock, key);
	}
}
4008290a:	f01d      	retw.n

4008290c <z_reschedule_irqlock>:

void z_reschedule_irqlock(uint32_t key)
{
4008290c:	004136        	entry	a1, 32
	return (key & 0xf) == 0; /* INTLEVEL field */
4008290f:	348020        	extui	a8, a2, 0, 4
40082912:	20a220        	or	a10, a2, a2
	return arch_irq_unlocked(key) && !arch_is_in_isr();
40082915:	00f856        	bnez	a8, 40082928 <z_reschedule_irqlock+0x1c>
40082918:	03f480        	rsr.misc0	a8
4008291b:	002882        	l32i	a8, a8, 0
4008291e:	006856        	bnez	a8, 40082928 <z_reschedule_irqlock+0x1c>
	if (resched(key)) {
		z_swap_irqlock(key);
40082921:	fff2e5        	call8	40082850 <z_swap_irqlock>
40082924:	000186        	j	4008292e <z_reschedule_irqlock+0x22>
40082927:	e6a000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
4008292a:	201013        	lsi	f1, a0, 128
4008292d:	f01d00        	subx8	a1, a13, a0

40082930 <z_reschedule_unlocked>:
{
40082930:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082933:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40082936:	fffd65        	call8	4008290c <z_reschedule_irqlock>
}
40082939:	f01d      	retw.n
	...

4008293c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
4008293c:	004136        	entry	a1, 32
4008293f:	0063a0        	rsil	a10, 3
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
40082942:	f70b81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082945:	2898      	l32i.n	a9, a8, 8
40082947:	0f0982        	l8ui	a8, a9, 15
4008294a:	880b      	addi.n	a8, a8, -1
4008294c:	0f4982        	s8i	a8, a9, 15
	XTOS_RESTORE_INTLEVEL(key);
4008294f:	13e6a0        	wsr.ps	a10
40082952:	002010        	rsync
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
40082955:	f01d      	retw.n
	...

40082958 <z_get_next_switch_handle>:
	_current_cpu->current = new_thread;
}

#ifdef CONFIG_USE_SWITCH
void *z_get_next_switch_handle(void *interrupted)
{
40082958:	004136        	entry	a1, 32
	_current->switch_handle = interrupted;
4008295b:	f70581        	l32r	a8, 40080570 <_iram_text_start+0x20>
4008295e:	28a8      	l32i.n	a10, a8, 8
	return _kernel.ready_q.cache;
40082960:	e898      	l32i.n	a9, a8, 56
40082962:	146a22        	s32i	a2, a10, 80
#endif
		}
	}
#else
	struct k_thread *thread = z_get_next_ready_thread();
	if (_current != thread) {
40082965:	011a97        	beq	a10, a9, 4008296a <z_get_next_switch_handle+0x12>
	_current_cpu->current = new_thread;
40082968:	2899      	s32i.n	a9, a8, 8
		set_current(thread);
	}
#endif

	wait_for_switch(_current);
	return _current->switch_handle;
4008296a:	2888      	l32i.n	a8, a8, 8
}
4008296c:	142822        	l32i	a2, a8, 80
4008296f:	f01d      	retw.n
40082971:	000000        	ill

40082974 <update_cache>:
{
40082974:	004136        	entry	a1, 32
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082977:	f79aa1        	l32r	a10, 400807e0 <_iram_text_start+0x290>
4008297a:	00d5e5        	call8	400836d8 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
4008297d:	f6fc31        	l32r	a3, 40080570 <_iram_text_start+0x20>
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082980:	204aa0        	or	a4, a10, a10
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082983:	022382        	l32i	a8, a3, 8
40082986:	0d0892        	l8ui	a9, a8, 13
40082989:	086957        	bbci	a9, 5, 40082995 <update_cache+0x21>
		_current->base.thread_state |= _THREAD_DEAD;
4008298c:	08a0a2        	movi	a10, 8
4008298f:	2099a0        	or	a9, a9, a10
40082992:	0d4892        	s8i	a9, a8, 13
	return thread ? thread : _current_cpu->idle_thread;
40082995:	04cc      	bnez.n	a4, 40082999 <update_cache+0x25>
40082997:	3348      	l32i.n	a4, a3, 12
	if (preempt_ok != 0) {
40082999:	42dc      	bnez.n	a2, 400829b1 <update_cache+0x3d>
	if (z_is_thread_prevented_from_running(_current)) {
4008299b:	0d0892        	l8ui	a9, a8, 13
4008299e:	449090        	extui	a9, a9, 0, 5
400829a1:	c9cc      	bnez.n	a9, 400829b1 <update_cache+0x3d>
	if (is_preempt(_current) || is_metairq(thread)) {
400829a3:	071892        	l16ui	a9, a8, 14
400829a6:	7fa0a2        	movi	a10, 127
400829a9:	04ba97        	bgeu	a10, a9, 400829b1 <update_cache+0x3d>
		_kernel.ready_q.cache = _current;
400829ac:	e389      	s32i.n	a8, a3, 56
400829ae:	000286        	j	400829bc <update_cache+0x48>
		if (thread != _current) {
400829b1:	051847        	beq	a8, a4, 400829ba <update_cache+0x46>
			z_reset_time_slice();
400829b4:	201110        	or	a1, a1, a1
400829b7:	ffe765        	call8	4008282c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
400829ba:	e349      	s32i.n	a4, a3, 56
}
400829bc:	f01d      	retw.n
	...

400829c0 <k_sched_unlock>:
{
400829c0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400829c3:	006320        	rsil	a2, 3
		++_current->base.sched_locked;
400829c6:	f6ea81        	l32r	a8, 40080570 <_iram_text_start+0x20>
		update_cache(0);
400829c9:	00a0a2        	movi	a10, 0
		++_current->base.sched_locked;
400829cc:	022892        	l32i	a9, a8, 8
400829cf:	0f0982        	l8ui	a8, a9, 15
400829d2:	01c882        	addi	a8, a8, 1
400829d5:	0f4982        	s8i	a8, a9, 15
		update_cache(0);
400829d8:	fff9a5        	call8	40082974 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
400829db:	13e620        	wsr.ps	a2
400829de:	002010        	rsync
	z_reschedule_unlocked();
400829e1:	fff4e5        	call8	40082930 <z_reschedule_unlocked>
}
400829e4:	f01d      	retw.n
	...

400829e8 <ready_thread>:
{
400829e8:	004136        	entry	a1, 32
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
400829eb:	0d0282        	l8ui	a8, a2, 13
400829ee:	448080        	extui	a8, a8, 0, 5
400829f1:	06b856        	bnez	a8, 40082a60 <ready_thread+0x78>
	if (z_is_thread_ready(thread)) {
400829f4:	62b8      	l32i.n	a11, a2, 24
400829f6:	066b56        	bnez	a11, 40082a60 <ready_thread+0x78>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
400829f9:	f6dda1        	l32r	a10, 40080570 <_iram_text_start+0x20>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
400829fc:	1f0c      	movi.n	a15, 1
400829fe:	fa88      	l32i.n	a8, a10, 60
40082a00:	0bcd      	mov.n	a12, a11
40082a02:	93cf80        	movnez	a12, a15, a8
40082a05:	74c0c0        	extui	a12, a12, 0, 8
40082a08:	102ad2        	l32i	a13, a10, 64
40082a0b:	f775e1        	l32r	a14, 400807e0 <_iram_text_start+0x290>
40082a0e:	fcac      	beqz.n	a12, 40082a41 <ready_thread+0x59>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
40082a10:	c098e0        	sub	a9, a8, a14
40082a13:	93bf90        	movnez	a11, a15, a9
40082a16:	7490b0        	extui	a9, a11, 0, 8
40082a19:	49ac      	beqz.n	a9, 40082a41 <ready_thread+0x59>
	if (thread_1->base.prio < thread_2->base.prio) {
40082a1b:	0e0292        	l8ui	a9, a2, 14
40082a1e:	239900        	sext	a9, a9, 7
40082a21:	0e08b2        	l8ui	a11, a8, 14
40082a24:	23bb00        	sext	a11, a11, 7
40082a27:	0da9b7        	bge	a9, a11, 40082a38 <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	node->prev = successor->prev;
40082a2a:	1898      	l32i.n	a9, a8, 4
	node->next = successor;
40082a2c:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082a2e:	1299      	s32i.n	a9, a2, 4
	successor->prev->next = node;
40082a30:	0929      	s32i.n	a2, a9, 0
	successor->prev = node;
40082a32:	1829      	s32i.n	a2, a8, 4
40082a34:	0005c6        	j	40082a4f <ready_thread+0x67>
40082a37:	1d8700        	lsi	f0, a7, 116
	return (node == list->tail) ? NULL : node->next;
40082a3a:	288205        	call0	400ab25c <_iram_text_end+0x27666>
40082a3d:	f85600        	lsi	f0, a6, 0x3e0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082a40:	d2fd      	lsi	f15, a2, 8
	node->prev = list->tail;
40082a42:	820162        	l8ui	a6, a1, 130
	list->tail->next = node;
40082a45:	102a      	add.n	a1, a0, a2
	node->next = list;
40082a47:	0062e2        	s32i	a14, a2, 0
	list->tail->next = node;
40082a4a:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082a4c:	106a22        	s32i	a2, a10, 64
	thread->base.thread_state |= states;
40082a4f:	0d0282        	l8ui	a8, a2, 13
40082a52:	80af92        	movi	a9, -128
40082a55:	208890        	or	a8, a8, a9
40082a58:	0d4282        	s8i	a8, a2, 13
		update_cache(0);
40082a5b:	0a0c      	movi.n	a10, 0
40082a5d:	fff165        	call8	40082974 <update_cache>
}
40082a60:	f01d      	retw.n
	...

40082a64 <z_ready_thread>:
{
40082a64:	004136        	entry	a1, 32
40082a67:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a69:	006330        	rsil	a3, 3
		ready_thread(thread);
40082a6c:	fff7a5        	call8	400829e8 <ready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082a6f:	13e630        	wsr.ps	a3
40082a72:	002010        	rsync
}
40082a75:	f01d      	retw.n
	...

40082a78 <z_thread_timeout>:
{
40082a78:	004136        	entry	a1, 32
	struct k_thread *thread = CONTAINER_OF(timeout,
40082a7b:	e8c232        	addi	a3, a2, -24
	if (thread->base.pended_on != NULL) {
40082a7e:	022342        	l32i	a4, a3, 8
40082a81:	f5c222        	addi	a2, a2, -11
40082a84:	01c416        	beqz	a4, 40082aa4 <z_thread_timeout+0x2c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a87:	006340        	rsil	a4, 3
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
40082a8a:	03ad      	mov.n	a10, a3
40082a8c:	00c365        	call8	400836c4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082a8f:	000282        	l8ui	a8, a2, 0
40082a92:	d97c      	movi.n	a9, -3
40082a94:	108890        	and	a8, a8, a9
40082a97:	004282        	s8i	a8, a2, 0
		thread->base.pended_on = NULL;
40082a9a:	080c      	movi.n	a8, 0
40082a9c:	2389      	s32i.n	a8, a3, 8
	XTOS_RESTORE_INTLEVEL(key);
40082a9e:	13e640        	wsr.ps	a4
40082aa1:	002010        	rsync
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
40082aa4:	000282        	l8ui	a8, a2, 0
40082aa7:	b96c      	movi.n	a9, -21
40082aa9:	108890        	and	a8, a8, a9
40082aac:	004282        	s8i	a8, a2, 0
	z_ready_thread(thread);
40082aaf:	03ad      	mov.n	a10, a3
40082ab1:	fffb25        	call8	40082a64 <z_ready_thread>
}
40082ab4:	f01d      	retw.n
	...

40082ab8 <z_sched_start>:
{
40082ab8:	004136        	entry	a1, 32
40082abb:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082abd:	006320        	rsil	a2, 3
	if (z_has_thread_started(thread)) {
40082ac0:	0d0a82        	l8ui	a8, a10, 13
40082ac3:	0be827        	bbsi	a8, 2, 40082ad2 <z_sched_start+0x1a>
	XTOS_RESTORE_INTLEVEL(key);
40082ac6:	13e620        	wsr.ps	a2
40082ac9:	002010        	rsync
		return;
40082acc:	0005c6        	j	40082ae7 <z_sched_start+0x2f>
40082acf:	000000        	ill
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082ad2:	fbaf92        	movi	a9, -5
40082ad5:	108890        	and	a8, a8, a9
40082ad8:	0d4a82        	s8i	a8, a10, 13
	ready_thread(thread);
40082adb:	fff0e5        	call8	400829e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
40082ade:	f741a1        	l32r	a10, 400807e4 <_iram_text_start+0x294>
40082ae1:	20b220        	or	a11, a2, a2
40082ae4:	ffdfa5        	call8	400828e0 <z_reschedule>
}
40082ae7:	000090        	retw
	...

40082aec <z_move_thread_to_end_of_prio_q>:
{
40082aec:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082aef:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082af2:	0d0282        	l8ui	a8, a2, 13
40082af5:	056877        	bbci	a8, 7, 40082afe <z_move_thread_to_end_of_prio_q+0x12>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082af8:	20a220        	or	a10, a2, a2
40082afb:	00bca5        	call8	400836c4 <sys_dlist_remove>
	return list->head == list;
40082afe:	f69c91        	l32r	a9, 40080570 <_iram_text_start+0x20>
40082b01:	f737d1        	l32r	a13, 400807e0 <_iram_text_start+0x290>
40082b04:	0f2982        	l32i	a8, a9, 60
40082b07:	1029c2        	l32i	a12, a9, 64
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082b0a:	027816        	beqz	a8, 40082b35 <z_move_thread_to_end_of_prio_q+0x49>
40082b0d:	2418d7        	beq	a8, a13, 40082b35 <z_move_thread_to_end_of_prio_q+0x49>
	if (thread_1->base.prio < thread_2->base.prio) {
40082b10:	0e02a2        	l8ui	a10, a2, 14
40082b13:	23aa00        	sext	a10, a10, 7
40082b16:	0e08b2        	l8ui	a11, a8, 14
40082b19:	23bb00        	sext	a11, a11, 7
40082b1c:	0caab7        	bge	a10, a11, 40082b2c <z_move_thread_to_end_of_prio_q+0x40>
	node->prev = successor->prev;
40082b1f:	18a8      	l32i.n	a10, a8, 4
	node->next = successor;
40082b21:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082b23:	12a9      	s32i.n	a10, a2, 4
	successor->prev->next = node;
40082b25:	0a29      	s32i.n	a2, a10, 0
	successor->prev = node;
40082b27:	1829      	s32i.n	a2, a8, 4
40082b29:	000586        	j	40082b43 <z_move_thread_to_end_of_prio_q+0x57>
	return (node == list->tail) ? NULL : node->next;
40082b2c:	051c87        	beq	a12, a8, 40082b35 <z_move_thread_to_end_of_prio_q+0x49>
40082b2f:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082b32:	fe0856        	bnez	a8, 40082b16 <z_move_thread_to_end_of_prio_q+0x2a>
	node->prev = list->tail;
40082b35:	0162c2        	s32i	a12, a2, 4
	list->tail->next = node;
40082b38:	102982        	l32i	a8, a9, 64
	node->next = list;
40082b3b:	0062d2        	s32i	a13, a2, 0
	list->tail->next = node;
40082b3e:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082b40:	106922        	s32i	a2, a9, 64
	thread->base.thread_state |= states;
40082b43:	0d0282        	l8ui	a8, a2, 13
40082b46:	80afa2        	movi	a10, -128
40082b49:	2088a0        	or	a8, a8, a10
		update_cache(thread == _current);
40082b4c:	29a8      	l32i.n	a10, a9, 8
40082b4e:	0d4282        	s8i	a8, a2, 13
40082b51:	c0aa20        	sub	a10, a10, a2
40082b54:	180c      	movi.n	a8, 1
40082b56:	020c      	movi.n	a2, 0
40082b58:	8328a0        	moveqz	a2, a8, a10
40082b5b:	02ad      	mov.n	a10, a2
40082b5d:	ffe165        	call8	40082974 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082b60:	13e630        	wsr.ps	a3
40082b63:	002010        	rsync
}
40082b66:	f01d      	retw.n

40082b68 <z_time_slice>:
{
40082b68:	004136        	entry	a1, 32
	if (slice_time && sliceable(_current)) {
40082b6b:	f71b81        	l32r	a8, 400807d8 <_iram_text_start+0x288>
40082b6e:	002892        	l32i	a9, a8, 0
40082b71:	f67f81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082b74:	039916        	beqz	a9, 40082bb1 <z_time_slice+0x49>
40082b77:	28a8      	l32i.n	a10, a8, 8
		&& !z_is_thread_timeout_active(thread);
40082b79:	7fa0b2        	movi	a11, 127
40082b7c:	071a92        	l16ui	a9, a10, 14
40082b7f:	2e3b97        	bltu	a11, a9, 40082bb1 <z_time_slice+0x49>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
40082b82:	f71691        	l32r	a9, 400807dc <_iram_text_start+0x28c>
40082b85:	0e0ab2        	l8ui	a11, a10, 14
40082b88:	0998      	l32i.n	a9, a9, 0
40082b8a:	23bb00        	sext	a11, a11, 7
40082b8d:	202b97        	blt	a11, a9, 40082bb1 <z_time_slice+0x49>
		&& !z_is_idle_thread_object(thread)
40082b90:	f70c91        	l32r	a9, 400807c0 <_iram_text_start+0x270>
40082b93:	1a1a97        	beq	a10, a9, 40082bb1 <z_time_slice+0x49>
		&& !z_is_thread_timeout_active(thread);
40082b96:	6a98      	l32i.n	a9, a10, 24
40082b98:	015956        	bnez	a9, 40082bb1 <z_time_slice+0x49>
		if (ticks >= _current_cpu->slice_ticks) {
40082b9b:	4898      	l32i.n	a9, a8, 16
40082b9d:	082297        	blt	a2, a9, 40082ba9 <z_time_slice+0x41>
			z_move_thread_to_end_of_prio_q(_current);
40082ba0:	fff4a5        	call8	40082aec <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
40082ba3:	ffc8a5        	call8	4008282c <z_reset_time_slice>
40082ba6:	0002c6        	j	40082bb5 <z_time_slice+0x4d>
			_current_cpu->slice_ticks -= ticks;
40082ba9:	c09920        	sub	a9, a9, a2
40082bac:	4899      	s32i.n	a9, a8, 16
40082bae:	0000c6        	j	40082bb5 <z_time_slice+0x4d>
		_current_cpu->slice_ticks = 0;
40082bb1:	020c      	movi.n	a2, 0
40082bb3:	4829      	s32i.n	a2, a8, 16
}
40082bb5:	f01d      	retw.n
	...

40082bb8 <z_impl_k_thread_suspend>:
{
40082bb8:	004136        	entry	a1, 32
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
40082bbb:	18c2a2        	addi	a10, a2, 24
40082bbe:	006925        	call8	40083250 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082bc1:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082bc4:	0d0242        	l8ui	a4, a2, 13
40082bc7:	0d6477        	bbci	a4, 7, 40082bd8 <z_impl_k_thread_suspend+0x20>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082bca:	02ad      	mov.n	a10, a2
40082bcc:	00af65        	call8	400836c4 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082bcf:	0d0282        	l8ui	a8, a2, 13
40082bd2:	648080        	extui	a8, a8, 0, 7
40082bd5:	0d4282        	s8i	a8, a2, 13
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082bd8:	0d0282        	l8ui	a8, a2, 13
40082bdb:	041c      	movi.n	a4, 16
40082bdd:	208840        	or	a8, a8, a4
		update_cache(thread == _current);
40082be0:	f66441        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082be3:	0d4282        	s8i	a8, a2, 13
40082be6:	24a8      	l32i.n	a10, a4, 8
40082be8:	190c      	movi.n	a9, 1
40082bea:	c0aa20        	sub	a10, a10, a2
40082bed:	080c      	movi.n	a8, 0
40082bef:	8389a0        	moveqz	a8, a9, a10
40082bf2:	08ad      	mov.n	a10, a8
40082bf4:	ffd7e5        	call8	40082974 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082bf7:	13e630        	wsr.ps	a3
40082bfa:	002010        	rsync
	if (thread == _current) {
40082bfd:	2438      	l32i.n	a3, a4, 8
40082bff:	029327        	bne	a3, a2, 40082c05 <z_impl_k_thread_suspend+0x4d>
		z_reschedule_unlocked();
40082c02:	ffd2e5        	call8	40082930 <z_reschedule_unlocked>
}
40082c05:	f01d      	retw.n
	...

40082c08 <z_thread_single_abort>:
{
40082c08:	004136        	entry	a1, 32
	if (thread->fn_abort != NULL) {
40082c0b:	112232        	l32i	a3, a2, 68
40082c0e:	002316        	beqz	a3, 40082c14 <z_thread_single_abort+0xc>
		thread->fn_abort();
40082c11:	0003e0        	callx8	a3
40082c14:	18c2a2        	addi	a10, a2, 24
40082c17:	0063a5        	call8	40083250 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c1a:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082c1d:	0d0232        	l8ui	a3, a2, 13
40082c20:	445030        	extui	a5, a3, 0, 5
40082c23:	032556        	bnez	a5, 40082c59 <z_thread_single_abort+0x51>
		if (z_is_thread_ready(thread)) {
40082c26:	062252        	l32i	a5, a2, 24
40082c29:	c5ec      	bnez.n	a5, 40082c59 <z_thread_single_abort+0x51>
			if (z_is_thread_queued(thread)) {
40082c2b:	233300        	sext	a3, a3, 7
40082c2e:	00e3d6        	bgez	a3, 40082c40 <z_thread_single_abort+0x38>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c31:	20a220        	or	a10, a2, a2
40082c34:	00a8e5        	call8	400836c4 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082c37:	0d0232        	l8ui	a3, a2, 13
40082c3a:	643030        	extui	a3, a3, 0, 7
40082c3d:	0d4232        	s8i	a3, a2, 13
			update_cache(thread == _current);
40082c40:	f64c31        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082c43:	150c      	movi.n	a5, 1
40082c45:	23a8      	l32i.n	a10, a3, 8
40082c47:	030c      	movi.n	a3, 0
40082c49:	c0aa20        	sub	a10, a10, a2
40082c4c:	8335a0        	moveqz	a3, a5, a10
40082c4f:	03ad      	mov.n	a10, a3
40082c51:	ffd225        	call8	40082974 <update_cache>
40082c54:	000606        	j	40082c70 <z_thread_single_abort+0x68>
40082c57:	170000        	lsi	f0, a0, 92
			if (z_is_thread_pending(thread)) {
40082c5a:	ad1363        	lsi	f6, a3, 0x2b4
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c5d:	a66502        	s32i	a0, a5, 0x298
40082c60:	023200        	andb	b3, b2, b0
	thread->base.thread_state &= ~_THREAD_PENDING;
40082c63:	7c0d      	lsi	f0, a12, 48
40082c65:	3350d5        	call4	400b6174 <_iram_text_end+0x3257e>
40082c68:	423210        	xorb	b3, b2, b1
40082c6b:	0c0d      	mov.n	a0, a12
				thread->base.pended_on = NULL;
40082c6d:	223903        	lsi	f0, a9, 136
		thread->base.thread_state |= mask;
40082c70:	0d0232        	l8ui	a3, a2, 13
40082c73:	850c      	movi.n	a5, 8
40082c75:	203350        	or	a3, a3, a5
40082c78:	0d4232        	s8i	a3, a2, 13
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082c7b:	000886        	j	40082ca1 <z_thread_single_abort+0x99>
40082c7e:	a20000        	muluh	a0, a0, a0
40082c81:	e518c3        	lsi	f12, a8, 0x394
40082c84:	005c      	movi.n	a0, 80
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c86:	20a330        	or	a10, a3, a3
40082c89:	00a3a5        	call8	400836c4 <sys_dlist_remove>
40082c8c:	0d0382        	l8ui	a8, a3, 13
40082c8f:	d97c      	movi.n	a9, -3
40082c91:	108890        	and	a8, a8, a9
40082c94:	0d4382        	s8i	a8, a3, 13
			waiter->base.pended_on = NULL;
40082c97:	2359      	s32i.n	a5, a3, 8
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
40082c99:	136352        	s32i	a5, a3, 76
			ready_thread(waiter);
40082c9c:	03ad      	mov.n	a10, a3
40082c9e:	ffd4a5        	call8	400829e8 <ready_thread>
	return list->head == list;
40082ca1:	0c2232        	l32i	a3, a2, 48
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082ca4:	00a052        	movi	a5, 0
40082ca7:	051357        	beq	a3, a5, 40082cb0 <z_thread_single_abort+0xa8>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
40082caa:	30c282        	addi	a8, a2, 48
40082cad:	cf9387        	bne	a3, a8, 40082c80 <z_thread_single_abort+0x78>
	XTOS_RESTORE_INTLEVEL(key);
40082cb0:	13e640        	wsr.ps	a4
40082cb3:	002010        	rsync
}
40082cb6:	f01d      	retw.n

40082cb8 <unready_thread>:
{
40082cb8:	004136        	entry	a1, 32
	if (z_is_thread_queued(thread)) {
40082cbb:	0d0282        	l8ui	a8, a2, 13
40082cbe:	0e6877        	bbci	a8, 7, 40082cd0 <unready_thread+0x18>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082cc1:	20a220        	or	a10, a2, a2
40082cc4:	009fe5        	call8	400836c4 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082cc7:	0d0282        	l8ui	a8, a2, 13
40082cca:	648080        	extui	a8, a8, 0, 7
40082ccd:	0d4282        	s8i	a8, a2, 13
	update_cache(thread == _current);
40082cd0:	f62881        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082cd3:	0228a2        	l32i	a10, a8, 8
40082cd6:	180c      	movi.n	a8, 1
40082cd8:	c0aa20        	sub	a10, a10, a2
40082cdb:	020c      	movi.n	a2, 0
40082cdd:	8328a0        	moveqz	a2, a8, a10
40082ce0:	02ad      	mov.n	a10, a2
40082ce2:	ffc925        	call8	40082974 <update_cache>
}
40082ce5:	f01d      	retw.n
	...

40082ce8 <z_remove_thread_from_ready_q>:
{
40082ce8:	004136        	entry	a1, 32
40082ceb:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082ced:	006330        	rsil	a3, 3
		unready_thread(thread);
40082cf0:	fffc65        	call8	40082cb8 <unready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082cf3:	13e630        	wsr.ps	a3
40082cf6:	002010        	rsync
}
40082cf9:	f01d      	retw.n
	...

40082cfc <z_tick_sleep$part$23>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
40082cfc:	004136        	entry	a1, 32
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
40082cff:	006a25        	call8	400833a0 <z_tick_get_32>
40082d02:	8032a0        	add	a3, a2, a10
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d05:	006350        	rsil	a5, 3
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	z_remove_thread_from_ready_q(_current);
40082d08:	f61a41        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082d0b:	0224a2        	l32i	a10, a4, 8
40082d0e:	fffda5        	call8	40082ce8 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
40082d11:	0224a2        	l32i	a10, a4, 8
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082d14:	f6b5b1        	l32r	a11, 400807e8 <_iram_text_start+0x298>
40082d17:	02cd      	mov.n	a12, a2
40082d19:	31df20        	srai	a13, a2, 31
40082d1c:	18caa2        	addi	a10, a10, 24
40082d1f:	003ee5        	call8	4008310c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
40082d22:	2428      	l32i.n	a2, a4, 8
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082d24:	041c      	movi.n	a4, 16
40082d26:	0d0282        	l8ui	a8, a2, 13

	(void)z_swap(&local_lock, key);
40082d29:	05ad      	mov.n	a10, a5
40082d2b:	208840        	or	a8, a8, a4
40082d2e:	0d4282        	s8i	a8, a2, 13
40082d31:	ffb4e5        	call8	40082880 <z_swap$isra$14>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
40082d34:	0066a5        	call8	400833a0 <z_tick_get_32>
40082d37:	c0a3a0        	sub	a10, a3, a10
		return ticks;
	}
#endif

	return 0;
}
40082d3a:	020c      	movi.n	a2, 0
40082d3c:	532a20        	max	a2, a10, a2
40082d3f:	f01d      	retw.n
40082d41:	000000        	ill

40082d44 <add_to_waitq_locked>:
{
40082d44:	004136        	entry	a1, 32
	unready_thread(thread);
40082d47:	02ad      	mov.n	a10, a2
40082d49:	fff6e5        	call8	40082cb8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
40082d4c:	0d0282        	l8ui	a8, a2, 13
40082d4f:	290c      	movi.n	a9, 2
40082d51:	208890        	or	a8, a8, a9
40082d54:	0d4282        	s8i	a8, a2, 13
	if (wait_q != NULL) {
40082d57:	93bc      	beqz.n	a3, 40082d94 <add_to_waitq_locked+0x50>
40082d59:	0388      	l32i.n	a8, a3, 0
		thread->base.pended_on = wait_q;
40082d5b:	2239      	s32i.n	a3, a2, 8
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d5d:	78ac      	beqz.n	a8, 40082d88 <add_to_waitq_locked+0x44>
40082d5f:	251387        	beq	a3, a8, 40082d88 <add_to_waitq_locked+0x44>
	if (thread_1->base.prio < thread_2->base.prio) {
40082d62:	0e0292        	l8ui	a9, a2, 14
40082d65:	239900        	sext	a9, a9, 7
40082d68:	0e08a2        	l8ui	a10, a8, 14
40082d6b:	23aa00        	sext	a10, a10, 7
40082d6e:	0ca9a7        	bge	a9, a10, 40082d7e <add_to_waitq_locked+0x3a>
	node->prev = successor->prev;
40082d71:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40082d73:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082d75:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40082d77:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40082d79:	1829      	s32i.n	a2, a8, 4
40082d7b:	000546        	j	40082d94 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
40082d7e:	13a8      	l32i.n	a10, a3, 4
40082d80:	0418a7        	beq	a8, a10, 40082d88 <add_to_waitq_locked+0x44>
40082d83:	0888      	l32i.n	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d85:	fdf856        	bnez	a8, 40082d68 <add_to_waitq_locked+0x24>
	node->prev = list->tail;
40082d88:	1388      	l32i.n	a8, a3, 4
	node->next = list;
40082d8a:	0239      	s32i.n	a3, a2, 0
	node->prev = list->tail;
40082d8c:	1289      	s32i.n	a8, a2, 4
	list->tail->next = node;
40082d8e:	1388      	l32i.n	a8, a3, 4
40082d90:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082d92:	1329      	s32i.n	a2, a3, 4
}
40082d94:	f01d      	retw.n
	...

40082d98 <pend>:
{
40082d98:	004136        	entry	a1, 32
40082d9b:	20b330        	or	a11, a3, a3
40082d9e:	006360        	rsil	a6, 3
		add_to_waitq_locked(thread, wait_q);
40082da1:	20a220        	or	a10, a2, a2
40082da4:	fff9e5        	call8	40082d44 <add_to_waitq_locked>
	XTOS_RESTORE_INTLEVEL(key);
40082da7:	13e660        	wsr.ps	a6
40082daa:	002010        	rsync
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082dad:	020466        	bnei	a4, -1, 40082db3 <pend+0x1b>
40082db0:	0c0526        	beqi	a5, -1, 40082dc0 <pend+0x28>
40082db3:	f68db1        	l32r	a11, 400807e8 <_iram_text_start+0x298>
40082db6:	04cd      	mov.n	a12, a4
40082db8:	05dd      	mov.n	a13, a5
40082dba:	18c2a2        	addi	a10, a2, 24
40082dbd:	0034e5        	call8	4008310c <z_add_timeout>
}
40082dc0:	f01d      	retw.n
	...

40082dc4 <z_pend_curr>:
{
40082dc4:	004136        	entry	a1, 32
	pend(_current, wait_q, timeout);
40082dc7:	f5ea81        	l32r	a8, 40080570 <_iram_text_start+0x20>
{
40082dca:	20d770        	or	a13, a7, a7
	pend(_current, wait_q, timeout);
40082dcd:	0228a2        	l32i	a10, a8, 8
40082dd0:	06cd      	mov.n	a12, a6
40082dd2:	04bd      	mov.n	a11, a4
40082dd4:	fffc25        	call8	40082d98 <pend>
	return z_swap(lock, key);
40082dd7:	03ad      	mov.n	a10, a3
40082dd9:	ffaa65        	call8	40082880 <z_swap$isra$14>
}
40082ddc:	0a2d      	mov.n	a2, a10
40082dde:	f01d      	retw.n

40082de0 <z_unpend_first_thread>:
{
40082de0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082de3:	006330        	rsil	a3, 3
		ret = _priq_wait_best(&wait_q->waitq);
40082de6:	20a220        	or	a10, a2, a2
40082de9:	008ee5        	call8	400836d8 <z_priq_dumb_best>
40082dec:	0a2d      	mov.n	a2, a10
	XTOS_RESTORE_INTLEVEL(key);
40082dee:	13e630        	wsr.ps	a3
40082df1:	002010        	rsync

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
40082df4:	0aac      	beqz.n	a10, 40082e18 <z_unpend_first_thread+0x38>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082df6:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082df9:	008ca5        	call8	400836c4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082dfc:	0d0282        	l8ui	a8, a2, 13
40082dff:	d97c      	movi.n	a9, -3
40082e01:	108890        	and	a8, a8, a9
40082e04:	0d4282        	s8i	a8, a2, 13
		thread->base.pended_on = NULL;
40082e07:	080c      	movi.n	a8, 0
40082e09:	026282        	s32i	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082e0c:	13e630        	wsr.ps	a3
40082e0f:	002010        	rsync
	return z_abort_timeout(&thread->base.timeout);
40082e12:	18c2a2        	addi	a10, a2, 24
40082e15:	0043a5        	call8	40083250 <z_abort_timeout>
}
40082e18:	f01d      	retw.n
	...

40082e1c <z_sched_init>:
{
40082e1c:	004136        	entry	a1, 32
	list->head = (sys_dnode_t *)list;
40082e1f:	f5d481        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082e22:	f66f91        	l32r	a9, 400807e0 <_iram_text_start+0x290>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
40082e25:	00a0b2        	movi	a11, 0
40082e28:	0f6892        	s32i	a9, a8, 60
	list->tail = (sys_dnode_t *)list;
40082e2b:	106892        	s32i	a9, a8, 64
40082e2e:	20abb0        	or	a10, a11, a11
40082e31:	ffa7e5        	call8	400828b0 <k_sched_time_slice_set>
}
40082e34:	f01d      	retw.n
	...

40082e38 <z_impl_k_yield>:
{
40082e38:	004136        	entry	a1, 32
	if (!z_is_idle_thread_object(_current)) {
40082e3b:	f5cd21        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082e3e:	f66031        	l32r	a3, 400807c0 <_iram_text_start+0x270>
40082e41:	2288      	l32i.n	a8, a2, 8
40082e43:	671837        	beq	a8, a3, 40082eae <z_impl_k_yield+0x76>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082e46:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082e49:	22a8      	l32i.n	a10, a2, 8
40082e4b:	0087a5        	call8	400836c4 <sys_dlist_remove>
	return list->head == list;
40082e4e:	f298      	l32i.n	a9, a2, 60
			_priq_run_add(&_kernel.ready_q.runq, _current);
40082e50:	022282        	l32i	a8, a2, 8
40082e53:	f663c1        	l32r	a12, 400807e0 <_iram_text_start+0x290>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e56:	c9ac      	beqz.n	a9, 40082e86 <z_impl_k_yield+0x4e>
40082e58:	2a19c7        	beq	a9, a12, 40082e86 <z_impl_k_yield+0x4e>
	if (thread_1->base.prio < thread_2->base.prio) {
40082e5b:	0e08a2        	l8ui	a10, a8, 14
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40082e5e:	1022d2        	l32i	a13, a2, 64
40082e61:	23aa00        	sext	a10, a10, 7
40082e64:	0e09b2        	l8ui	a11, a9, 14
40082e67:	23bb00        	sext	a11, a11, 7
40082e6a:	0faab7        	bge	a10, a11, 40082e7d <z_impl_k_yield+0x45>
	node->prev = successor->prev;
40082e6d:	1928      	l32i.n	a2, a9, 4
	node->next = successor;
40082e6f:	0899      	s32i.n	a9, a8, 0
	node->prev = successor->prev;
40082e71:	1829      	s32i.n	a2, a8, 4
	successor->prev->next = node;
40082e73:	0289      	s32i.n	a8, a2, 0
	successor->prev = node;
40082e75:	1989      	s32i.n	a8, a9, 4
40082e77:	0006c6        	j	40082e96 <z_impl_k_yield+0x5e>
40082e7a:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40082e7d:	0519d7        	beq	a9, a13, 40082e86 <z_impl_k_yield+0x4e>
40082e80:	002992        	l32i	a9, a9, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e83:	fdd956        	bnez	a9, 40082e64 <z_impl_k_yield+0x2c>
	node->prev = list->tail;
40082e86:	102292        	l32i	a9, a2, 64
	node->next = list;
40082e89:	0068c2        	s32i	a12, a8, 0
	node->prev = list->tail;
40082e8c:	1899      	s32i.n	a9, a8, 4
	list->tail->next = node;
40082e8e:	102292        	l32i	a9, a2, 64
40082e91:	0989      	s32i.n	a8, a9, 0
	list->tail = node;
40082e93:	106282        	s32i	a8, a2, 64
	thread->base.thread_state |= states;
40082e96:	0d0822        	l8ui	a2, a8, 13
40082e99:	80af92        	movi	a9, -128
40082e9c:	202290        	or	a2, a2, a9
40082e9f:	0d4822        	s8i	a2, a8, 13
			update_cache(1);
40082ea2:	01a0a2        	movi	a10, 1
40082ea5:	fface5        	call8	40082974 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082ea8:	13e630        	wsr.ps	a3
40082eab:	002010        	rsync
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082eae:	0063a0        	rsil	a10, 3
	(void) z_swap(&lock, key);
40082eb1:	ff9ce5        	call8	40082880 <z_swap$isra$14>
}
40082eb4:	f01d      	retw.n
	...

40082eb8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
40082eb8:	004136        	entry	a1, 32
40082ebb:	20a220        	or	a10, a2, a2
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082ebe:	140266        	bnei	a2, -1, 40082ed6 <z_impl_k_sleep+0x1e>
40082ec1:	110366        	bnei	a3, -1, 40082ed6 <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
40082ec4:	f5ab81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082ec7:	0228a2        	l32i	a10, a8, 8
	z_impl_k_thread_suspend(thread);
40082eca:	ffcee5        	call8	40082bb8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
40082ecd:	20a330        	or	a10, a3, a3
40082ed0:	000846        	j	40082ef5 <z_impl_k_sleep+0x3d>
40082ed3:	000000        	ill
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
40082ed6:	0a3d      	mov.n	a3, a10
	if (ticks == 0) {
40082ed8:	4acc      	bnez.n	a10, 40082ee0 <z_impl_k_sleep+0x28>
	z_impl_k_yield();
40082eda:	fff5e5        	call8	40082e38 <z_impl_k_yield>
40082edd:	000146        	j	40082ee6 <z_impl_k_sleep+0x2e>
40082ee0:	ffe1a5        	call8	40082cfc <z_tick_sleep$part$23>
40082ee3:	203aa0        	or	a3, a10, a10
			return t / (from_hz / to_hz);
40082ee6:	f641c1        	l32r	a12, 400807ec <_iram_text_start+0x29c>
40082ee9:	f5bdd1        	l32r	a13, 400805e0 <_iram_text_start+0x90>
40082eec:	20a330        	or	a10, a3, a3
40082eef:	31bf30        	srai	a11, a3, 31
40082ef2:	008225        	call8	40083714 <__udivdi3>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
40082ef5:	0a2d      	mov.n	a2, a10
40082ef7:	f01d      	retw.n
40082ef9:	000000        	ill

40082efc <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
40082efc:	004136        	entry	a1, 32

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
40082eff:	f59c81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082f02:	2828      	l32i.n	a2, a8, 8
40082f04:	f01d      	retw.n
	...

40082f08 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
40082f08:	004136        	entry	a1, 32
40082f0b:	006330        	rsil	a3, 3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
40082f0e:	20a220        	or	a10, a2, a2
40082f11:	ffece5        	call8	40082de0 <z_unpend_first_thread>

	if (thread != NULL) {
40082f14:	00da16        	beqz	a10, 40082f25 <z_impl_k_sem_give+0x1d>
40082f17:	00a022        	movi	a2, 0
40082f1a:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
40082f1d:	ffb465        	call8	40082a64 <z_ready_thread>
40082f20:	000506        	j	40082f38 <z_impl_k_sem_give+0x30>
40082f23:	920000        	lsi	f0, a0, 0x248
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
40082f26:	820222        	l8ui	a2, a2, 130
40082f29:	b20322        	l8ui	a2, a3, 178
40082f2c:	9001a0        	addx2	a0, a1, a10
40082f2f:	c088      	l32i.n	a8, a0, 48
40082f31:	93ab80        	movnez	a10, a11, a8
40082f34:	8a9a      	add.n	a8, a10, a9
40082f36:	2289      	s32i.n	a8, a2, 8
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
40082f38:	f62ea1        	l32r	a10, 400807f0 <_iram_text_start+0x2a0>
40082f3b:	03bd      	mov.n	a11, a3
40082f3d:	ff9a25        	call8	400828e0 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
40082f40:	f01d      	retw.n
	...

40082f44 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
40082f44:	004136        	entry	a1, 32
40082f47:	02cd      	mov.n	a12, a2
40082f49:	04ed      	mov.n	a14, a4
40082f4b:	05fd      	mov.n	a15, a5
40082f4d:	0063b0        	rsil	a11, 3
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
40082f50:	2288      	l32i.n	a8, a2, 8
40082f52:	e88c      	beqz.n	a8, 40082f64 <z_impl_k_sem_take+0x20>
		sem->count--;
40082f54:	880b      	addi.n	a8, a8, -1
40082f56:	2289      	s32i.n	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082f58:	13e6b0        	wsr.ps	a11
40082f5b:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = 0;
40082f5e:	0a0c      	movi.n	a10, 0
		goto out;
40082f60:	000586        	j	40082f7a <z_impl_k_sem_take+0x36>
40082f63:	845000        	extui	a5, a0, 0, 9
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
40082f66:	98cc20        	lsi	f2, a12, 0x260
40082f69:	13e6b0        	wsr.ps	a11
40082f6c:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
40082f6f:	0a7c      	movi.n	a10, -16
		goto out;
40082f71:	000146        	j	40082f7a <z_impl_k_sem_take+0x36>
	}

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
40082f74:	f61fa1        	l32r	a10, 400807f0 <_iram_text_start+0x2a0>
40082f77:	ffe4e5        	call8	40082dc4 <z_pend_curr>

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
40082f7a:	0a2d      	mov.n	a2, a10
40082f7c:	f01d      	retw.n
	...

40082f80 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
40082f80:	006136        	entry	a1, 48
40082f83:	07fd      	mov.n	a15, a7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
40082f85:	e178      	l32i.n	a7, a1, 56
	sys_dlist_init(&w->waitq);
40082f87:	30c282        	addi	a8, a2, 48
40082f8a:	0c4272        	s8i	a7, a2, 12
	thread_base->thread_state = (uint8_t)initial_state;
40082f8d:	470c      	movi.n	a7, 4
40082f8f:	0d4272        	s8i	a7, a2, 13

	thread_base->prio = priority;
40082f92:	d178      	l32i.n	a7, a1, 52
	list->head = (sys_dnode_t *)list;
40082f94:	c289      	s32i.n	a8, a2, 48
	list->tail = (sys_dnode_t *)list;
40082f96:	d289      	s32i.n	a8, a2, 52
40082f98:	0e4272        	s8i	a7, a2, 14
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f9b:	087c      	movi.n	a8, -16

	thread_base->sched_locked = 0U;
40082f9d:	070c      	movi.n	a7, 0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f9f:	44fb      	addi.n	a4, a4, 15
	thread_base->sched_locked = 0U;
40082fa1:	0f4272        	s8i	a7, a2, 15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082fa4:	104480        	and	a4, a4, a8
	node->next = NULL;
40082fa7:	070c      	movi.n	a7, 0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082fa9:	c188      	l32i.n	a8, a1, 48
40082fab:	6279      	s32i.n	a7, a2, 24
	node->prev = NULL;
40082fad:	7279      	s32i.n	a7, a2, 28
	stack_ptr = (char *)stack + stack_obj_size;
40082faf:	434a      	add.n	a4, a3, a4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082fb1:	02ad      	mov.n	a10, a2
{
40082fb3:	03bd      	mov.n	a11, a3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082fb5:	0189      	s32i.n	a8, a1, 0
40082fb7:	06ed      	mov.n	a14, a6
40082fb9:	05dd      	mov.n	a13, a5
40082fbb:	04cd      	mov.n	a12, a4
40082fbd:	fe8e25        	call8	400818a0 <arch_new_thread>
	new_thread->init_data = NULL;
40082fc0:	106272        	s32i	a7, a2, 64
	new_thread->fn_abort = NULL;
40082fc3:	116272        	s32i	a7, a2, 68
	new_thread->resource_pool = _current->resource_pool;
40082fc6:	f56a71        	l32r	a7, 40080570 <_iram_text_start+0x20>
40082fc9:	2778      	l32i.n	a7, a7, 8
40082fcb:	152772        	l32i	a7, a7, 84
40082fce:	156272        	s32i	a7, a2, 84
}
40082fd1:	042d      	mov.n	a2, a4
40082fd3:	f01d      	retw.n
40082fd5:	000000        	ill

40082fd8 <z_init_static_threads>:
{
40082fd8:	006136        	entry	a1, 48
	_FOREACH_STATIC_THREAD(thread_data) {
40082fdb:	f60621        	l32r	a2, 400807f4 <_iram_text_start+0x2a4>
40082fde:	f60531        	l32r	a3, 400807f4 <_iram_text_start+0x2a4>
40082fe1:	024d      	mov.n	a4, a2
40082fe3:	000a46        	j	40083010 <z_init_static_threads+0x38>
		z_setup_new_thread(
40082fe6:	0b2282        	l32i	a8, a2, 44
40082fe9:	036182        	s32i	a8, a1, 12
40082fec:	8288      	l32i.n	a8, a2, 32
40082fee:	2189      	s32i.n	a8, a1, 8
40082ff0:	7288      	l32i.n	a8, a2, 28
40082ff2:	1189      	s32i.n	a8, a1, 4
40082ff4:	6288      	l32i.n	a8, a2, 24
40082ff6:	0189      	s32i.n	a8, a1, 0
40082ff8:	52f8      	l32i.n	a15, a2, 20
40082ffa:	42e8      	l32i.n	a14, a2, 16
40082ffc:	32d8      	l32i.n	a13, a2, 12
40082ffe:	22c8      	l32i.n	a12, a2, 8
40083000:	12b8      	l32i.n	a11, a2, 4
40083002:	0022a2        	l32i	a10, a2, 0
40083005:	fff7a5        	call8	40082f80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
40083008:	0288      	l32i.n	a8, a2, 0
4008300a:	106822        	s32i	a2, a8, 64
	_FOREACH_STATIC_THREAD(thread_data) {
4008300d:	30c222        	addi	a2, a2, 48
40083010:	d23237        	bltu	a2, a3, 40082fe6 <z_init_static_threads+0xe>
	_FOREACH_STATIC_THREAD(thread_data) {
40083013:	042d      	mov.n	a2, a4
	k_sched_lock();
40083015:	ff9265        	call8	4008293c <k_sched_lock>
					    K_MSEC(thread_data->init_delay));
40083018:	040c      	movi.n	a4, 0
	_FOREACH_STATIC_THREAD(thread_data) {
4008301a:	000a86        	j	40083048 <z_init_static_threads+0x70>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
4008301d:	92d8      	l32i.n	a13, a2, 36
4008301f:	220d26        	beqi	a13, -1, 40083045 <z_init_static_threads+0x6d>
		} else {
			return t * (to_hz / from_hz);
40083022:	a80c      	movi.n	a8, 10
					    K_MSEC(thread_data->init_delay));
40083024:	53dd40        	max	a13, a13, a4
40083027:	82cd80        	mull	a12, a13, a8
4008302a:	b2dd80        	mulsh	a13, a13, a8
			schedule_new_thread(thread_data->init_thread,
4008302d:	02a8      	l32i.n	a10, a2, 0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
4008302f:	208cd0        	or	a8, a12, a13
40083032:	006856        	bnez	a8, 4008303c <z_init_static_threads+0x64>
	z_sched_start(thread);
40083035:	ffa825        	call8	40082ab8 <z_sched_start>
40083038:	000246        	j	40083045 <z_init_static_threads+0x6d>
4008303b:	ebb100        	f64cmpl	a11, a1, a0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
4008303e:	caa2f5        	call12	4004da6c <esp32_rom_gpio_matrix_out+0x43b60>
40083041:	a518      	l32i.n	a1, a5, 40
40083043:	000c      	movi.n	a0, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40083045:	30c222        	addi	a2, a2, 48
40083048:	d13237        	bltu	a2, a3, 4008301d <z_init_static_threads+0x45>
	k_sched_unlock();
4008304b:	ff9765        	call8	400829c0 <k_sched_unlock>
}
4008304e:	f01d      	retw.n

40083050 <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
40083050:	004136        	entry	a1, 32
	z_thread_single_abort(thread);
40083053:	02ad      	mov.n	a10, a2
40083055:	ffbb25        	call8	40082c08 <z_thread_single_abort>
40083058:	03f430        	rsr.misc0	a3

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
4008305b:	0338      	l32i.n	a3, a3, 0
4008305d:	23fc      	bnez.n	a3, 40083093 <z_impl_k_thread_abort+0x43>
		if (thread == _current) {
4008305f:	f54431        	l32r	a3, 40080570 <_iram_text_start+0x20>
40083062:	2348      	l32i.n	a4, a3, 8
40083064:	259427        	bne	a4, a2, 4008308d <z_impl_k_thread_abort+0x3d>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083067:	006350        	rsil	a5, 3
	old_thread = _current;
4008306a:	2348      	l32i.n	a4, a3, 8
	return _kernel.ready_q.cache;
4008306c:	e328      	l32i.n	a2, a3, 56
	if (new_thread != old_thread) {
4008306e:	121427        	beq	a4, a2, 40083084 <z_impl_k_thread_abort+0x34>
		z_reset_time_slice();
40083071:	ff7ba5        	call8	4008282c <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40083074:	587c      	movi.n	a8, -11
40083076:	1422a2        	l32i	a10, a2, 80
40083079:	136482        	s32i	a8, a4, 76
		_current_cpu->current = new_thread;
4008307c:	2329      	s32i.n	a2, a3, 8
4008307e:	50c4b2        	addi	a11, a4, 80
40083081:	fe6ae5        	call8	40081730 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
40083084:	13e650        	wsr.ps	a5
40083087:	002010        	rsync
	return _current->swap_retval;
4008308a:	000146        	j	40083093 <z_impl_k_thread_abort+0x43>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008308d:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40083090:	ff87a5        	call8	4008290c <z_reschedule_irqlock>
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
40083093:	f01d      	retw.n
40083095:	000000        	ill

40083098 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
40083098:	004136        	entry	a1, 32
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
4008309b:	f5d781        	l32r	a8, 400807f8 <_iram_text_start+0x2a8>
4008309e:	0a0c      	movi.n	a10, 0
400830a0:	0888      	l32i.n	a8, a8, 0
400830a2:	0298a7        	bne	a8, a10, 400830a8 <elapsed+0x10>
400830a5:	fe57a5        	call8	40081620 <z_clock_elapsed>
}
400830a8:	0a2d      	mov.n	a2, a10
400830aa:	f01d      	retw.n

400830ac <remove_timeout>:
{
400830ac:	004136        	entry	a1, 32
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400830af:	0288      	l32i.n	a8, a2, 0
400830b1:	12ac      	beqz.n	a2, 400830d6 <remove_timeout+0x2a>
400830b3:	f5d291        	l32r	a9, 400807fc <_iram_text_start+0x2ac>
	return (node == list->tail) ? NULL : node->next;
400830b6:	1998      	l32i.n	a9, a9, 4
400830b8:	1a1297        	beq	a2, a9, 400830d6 <remove_timeout+0x2a>
	if (next(t) != NULL) {
400830bb:	789c      	beqz.n	a8, 400830d6 <remove_timeout+0x2a>
		next(t)->dticks += t->dticks;
400830bd:	48c8      	l32i.n	a12, a8, 16
400830bf:	42a8      	l32i.n	a10, a2, 16
400830c1:	58b8      	l32i.n	a11, a8, 20
400830c3:	acaa      	add.n	a10, a12, a10
400830c5:	52d8      	l32i.n	a13, a2, 20
400830c7:	190c      	movi.n	a9, 1
400830c9:	013ac7        	bltu	a10, a12, 400830ce <remove_timeout+0x22>
400830cc:	090c      	movi.n	a9, 0
400830ce:	bbda      	add.n	a11, a11, a13
400830d0:	99ba      	add.n	a9, a9, a11
400830d2:	48a9      	s32i.n	a10, a8, 16
400830d4:	5899      	s32i.n	a9, a8, 20
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
400830d6:	1298      	l32i.n	a9, a2, 4
400830d8:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
400830da:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
400830dc:	080c      	movi.n	a8, 0
400830de:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
400830e0:	1289      	s32i.n	a8, a2, 4
}
400830e2:	f01d      	retw.n

400830e4 <next_timeout>:

static int32_t next_timeout(void)
{
400830e4:	004136        	entry	a1, 32
	return list->head == list;
400830e7:	f5c581        	l32r	a8, 400807fc <_iram_text_start+0x2ac>
400830ea:	0828      	l32i.n	a2, a8, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
400830ec:	019287        	bne	a2, a8, 400830f1 <next_timeout+0xd>
400830ef:	020c      	movi.n	a2, 0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
400830f1:	fffa65        	call8	40083098 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
400830f4:	f5c381        	l32r	a8, 40080800 <_iram_text_start+0x2b0>
400830f7:	328c      	beqz.n	a2, 400830fe <next_timeout+0x1a>
400830f9:	4288      	l32i.n	a8, a2, 16
400830fb:	c088a0        	sub	a8, a8, a10

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
400830fe:	f51c21        	l32r	a2, 40080570 <_iram_text_start+0x20>
40083101:	4228      	l32i.n	a2, a2, 16
40083103:	128c      	beqz.n	a2, 40083108 <next_timeout+0x24>
40083105:	012287        	blt	a2, a8, 4008310a <next_timeout+0x26>
40083108:	082d      	mov.n	a2, a8
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
4008310a:	f01d      	retw.n

4008310c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
4008310c:	006136        	entry	a1, 48
4008310f:	046d      	mov.n	a6, a4
40083111:	207550        	or	a7, a5, a5
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40083114:	050466        	bnei	a4, -1, 4008311d <z_add_timeout+0x11>
40083117:	020566        	bnei	a5, -1, 4008311d <z_add_timeout+0x11>
4008311a:	004b86        	j	4008324c <z_add_timeout+0x140>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
4008311d:	441b      	addi.n	a4, a4, 1
4008311f:	180c      	movi.n	a8, 1
40083121:	013467        	bltu	a4, a6, 40083126 <z_add_timeout+0x1a>
40083124:	080c      	movi.n	a8, 0
40083126:	885a      	add.n	a8, a8, a5

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
40083128:	e57c      	movi.n	a5, -2
4008312a:	c0a540        	sub	a10, a5, a4
	k_ticks_t ticks = timeout.ticks + 1;
4008312d:	047d      	mov.n	a7, a4
4008312f:	086d      	mov.n	a6, a8
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
40083131:	190c      	movi.n	a9, 1
40083133:	0235a7        	bltu	a5, a10, 40083139 <z_add_timeout+0x2d>
40083136:	00a092        	movi	a9, 0
40083139:	f57c      	movi.n	a5, -1
4008313b:	c05580        	sub	a5, a5, a8
4008313e:	c05590        	sub	a5, a5, a9
40083141:	045596        	bltz	a5, 4008318a <z_add_timeout+0x7e>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
40083144:	0189      	s32i.n	a8, a1, 0
40083146:	fff525        	call8	40083098 <elapsed>
40083149:	f5ae51        	l32r	a5, 40080804 <_iram_text_start+0x2b4>
4008314c:	e97c      	movi.n	a9, -2
4008314e:	0568      	l32i.n	a6, a5, 0
40083150:	15b8      	l32i.n	a11, a5, 4
40083152:	c06960        	sub	a6, a9, a6
40083155:	170c      	movi.n	a7, 1
40083157:	0188      	l32i.n	a8, a1, 0
40083159:	013967        	bltu	a9, a6, 4008315e <z_add_timeout+0x52>
4008315c:	070c      	movi.n	a7, 0
4008315e:	f57c      	movi.n	a5, -1
40083160:	c055b0        	sub	a5, a5, a11
40083163:	c04640        	sub	a4, a6, a4
40083166:	c05570        	sub	a5, a5, a7
40083169:	170c      	movi.n	a7, 1
4008316b:	023647        	bltu	a6, a4, 40083171 <z_add_timeout+0x65>
4008316e:	00a072        	movi	a7, 0
40083171:	c05580        	sub	a5, a5, a8
40083174:	c05570        	sub	a5, a5, a7
40083177:	c074a0        	sub	a7, a4, a10
4008317a:	318fa0        	srai	a8, a10, 31
4008317d:	160c      	movi.n	a6, 1
4008317f:	013477        	bltu	a4, a7, 40083184 <z_add_timeout+0x78>
40083182:	060c      	movi.n	a6, 0
40083184:	c05580        	sub	a5, a5, a8
40083187:	c06560        	sub	a6, a5, a6
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
4008318a:	026232        	s32i	a3, a2, 8
4008318d:	006330        	rsil	a3, 3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
40083190:	fff065        	call8	40083098 <elapsed>
	ticks = MAX(1, ticks);
40083193:	205770        	or	a5, a7, a7
40083196:	204660        	or	a4, a6, a6
40083199:	0716e6        	bgei	a6, 1, 400831a4 <z_add_timeout+0x98>
4008319c:	06cc      	bnez.n	a6, 400831a0 <z_add_timeout+0x94>
4008319e:	27cc      	bnez.n	a7, 400831a4 <z_add_timeout+0x98>
400831a0:	150c      	movi.n	a5, 1
400831a2:	040c      	movi.n	a4, 0
		to->dticks = ticks + elapsed();
400831a4:	317fa0        	srai	a7, a10, 31
400831a7:	a5aa      	add.n	a10, a5, a10
400831a9:	160c      	movi.n	a6, 1
400831ab:	013a57        	bltu	a10, a5, 400831b0 <z_add_timeout+0xa4>
400831ae:	060c      	movi.n	a6, 0
400831b0:	447a      	add.n	a4, a4, a7
400831b2:	464a      	add.n	a4, a6, a4
400831b4:	5249      	s32i.n	a4, a2, 20
	return list->head == list;
400831b6:	f59141        	l32r	a4, 400807fc <_iram_text_start+0x2ac>
400831b9:	42a9      	s32i.n	a10, a2, 16
400831bb:	0458      	l32i.n	a5, a4, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
400831bd:	029547        	bne	a5, a4, 400831c3 <z_add_timeout+0xb7>
400831c0:	001e46        	j	4008323d <z_add_timeout+0x131>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400831c3:	14a8      	l32i.n	a10, a4, 4
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
400831c5:	1b0c      	movi.n	a11, 1
400831c7:	0c0c      	movi.n	a12, 0
400831c9:	001386        	j	4008321b <z_add_timeout+0x10f>
			if (t->dticks > to->dticks) {
400831cc:	5588      	l32i.n	a8, a5, 20
400831ce:	5268      	l32i.n	a6, a2, 20
400831d0:	4578      	l32i.n	a7, a5, 16
400831d2:	4298      	l32i.n	a9, a2, 16
400831d4:	053687        	bltu	a6, a8, 400831dd <z_add_timeout+0xd1>
400831d7:	259867        	bne	a8, a6, 40083200 <z_add_timeout+0xf4>
400831da:	22b977        	bgeu	a9, a7, 40083200 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
400831dd:	c09790        	sub	a9, a7, a9
400831e0:	1a0c      	movi.n	a10, 1
400831e2:	023797        	bltu	a7, a9, 400831e8 <z_add_timeout+0xdc>
400831e5:	00a0a2        	movi	a10, 0
400831e8:	c06860        	sub	a6, a8, a6
400831eb:	c066a0        	sub	a6, a6, a10
400831ee:	5569      	s32i.n	a6, a5, 20
	node->prev = successor->prev;
400831f0:	1568      	l32i.n	a6, a5, 4
400831f2:	4599      	s32i.n	a9, a5, 16
400831f4:	1269      	s32i.n	a6, a2, 4
	node->next = successor;
400831f6:	0259      	s32i.n	a5, a2, 0
	successor->prev->next = node;
400831f8:	0629      	s32i.n	a2, a6, 0
	successor->prev = node;
400831fa:	1529      	s32i.n	a2, a5, 4
		}

		if (t == NULL) {
400831fc:	000886        	j	40083222 <z_add_timeout+0x116>
400831ff:	797000        	lsi	f0, a0, 0x1e4
			to->dticks -= t->dticks;
40083202:	dbb0c0        	movt.s	f11, f0, b12
40083205:	397720        	lsi	f2, a7, 228
40083208:	dcc002        	addi	a0, a0, -36
4008320b:	668020        	lsi	f2, a0, 0x198
4008320e:	66d0c0        	lsi	f12, a0, 0x198
40083211:	4279c0        	xorb	b7, b9, b12
40083214:	5269      	s32i.n	a6, a2, 20
	return (node == list->tail) ? NULL : node->next;
40083216:	2315a7        	beq	a5, a10, 4008323d <z_add_timeout+0x131>
40083219:	0558      	l32i.n	a5, a5, 0
		for (t = first(); t != NULL; t = next(t)) {
4008321b:	fad556        	bnez	a5, 400831cc <z_add_timeout+0xc0>
4008321e:	0006c6        	j	4008323d <z_add_timeout+0x131>
40083221:	245200        	extui	a5, a0, 2, 3
	return list->head == list;
40083224:	925700        	lsi	f0, a7, 0x248
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
40083227:	470b      	addi.n	a4, a7, -1
40083229:	a50815        	call4	400282ac <esp32_rom_gpio_matrix_out+0x1e3a0>
			z_clock_set_timeout(next_timeout(), false);
4008322c:	ffeb      	addi.n	a15, a15, 14
4008322e:	00a0b2        	movi	a11, 0
40083231:	fe38e5        	call8	400815c0 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083234:	13e630        	wsr.ps	a3
40083237:	002010        	rsync
	LOCKED(&timeout_lock) {
4008323a:	000386        	j	4008324c <z_add_timeout+0x140>
	node->prev = list->tail;
4008323d:	1458      	l32i.n	a5, a4, 4
	node->next = list;
4008323f:	0249      	s32i.n	a4, a2, 0
	node->prev = list->tail;
40083241:	1259      	s32i.n	a5, a2, 4
	list->tail->next = node;
40083243:	1458      	l32i.n	a5, a4, 4
40083245:	0529      	s32i.n	a2, a5, 0
	list->tail = node;
40083247:	1429      	s32i.n	a2, a4, 4
40083249:	fff546        	j	40083222 <z_add_timeout+0x116>
		}
	}
}
4008324c:	f01d      	retw.n
	...

40083250 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
40083250:	004136        	entry	a1, 32
40083253:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083255:	006320        	rsil	a2, 3
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
40083258:	0a98      	l32i.n	a9, a10, 0
	int ret = -EINVAL;
4008325a:	a86c      	movi.n	a8, -22
		if (sys_dnode_is_linked(&to->node)) {
4008325c:	004916        	beqz	a9, 40083264 <z_abort_timeout+0x14>
			remove_timeout(to);
4008325f:	ffe4e5        	call8	400830ac <remove_timeout>
			ret = 0;
40083262:	080c      	movi.n	a8, 0
	XTOS_RESTORE_INTLEVEL(key);
40083264:	13e620        	wsr.ps	a2
40083267:	002010        	rsync
		}
	}

	return ret;
}
4008326a:	082d      	mov.n	a2, a8
4008326c:	f01d      	retw.n
	...

40083270 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
40083270:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083273:	006320        	rsil	a2, 3
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
40083276:	ffe6e5        	call8	400830e4 <next_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083279:	13e620        	wsr.ps	a2
4008327c:	002010        	rsync
	}
	return ret;
}
4008327f:	0a2d      	mov.n	a2, a10
40083281:	f01d      	retw.n
	...

40083284 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
40083284:	004136        	entry	a1, 32
40083287:	743030        	extui	a3, a3, 0, 8
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008328a:	006340        	rsil	a4, 3
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
4008328d:	ffe565        	call8	400830e4 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
40083290:	00a0c2        	movi	a12, 0
40083293:	01ca92        	addi	a9, a10, 1
40083296:	01a082        	movi	a8, 1
40083299:	0c5d      	mov.n	a5, a12
4008329b:	835890        	moveqz	a5, a8, a9
4008329e:	059d      	mov.n	a9, a5
			      || (ticks < next_to);
400832a0:	0122a7        	blt	a2, a10, 400832a5 <z_set_timeout_expiry+0x21>
400832a3:	0c8d      	mov.n	a8, a12
400832a5:	208980        	or	a8, a9, a8
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
400832a8:	0b6807        	bbci	a8, 0, 400832b7 <z_set_timeout_expiry+0x33>
400832ab:	082aa6        	blti	a10, 2, 400832b7 <z_set_timeout_expiry+0x33>
			z_clock_set_timeout(ticks, is_idle);
400832ae:	20b330        	or	a11, a3, a3
400832b1:	20a220        	or	a10, a2, a2
400832b4:	fe30a5        	call8	400815c0 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832b7:	13e640        	wsr.ps	a4
400832ba:	002010        	rsync
		}
	}
}
400832bd:	000090        	retw

400832c0 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
400832c0:	004136        	entry	a1, 32
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
400832c3:	02ad      	mov.n	a10, a2
400832c5:	ff8a25        	call8	40082b68 <z_time_slice>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400832c8:	006330        	rsil	a3, 3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
400832cb:	f54b61        	l32r	a6, 400807f8 <_iram_text_start+0x2a8>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
400832ce:	f4c441        	l32r	a4, 400805e0 <_iram_text_start+0x90>
	announce_remaining = ticks;
400832d1:	0629      	s32i.n	a2, a6, 0
		t->dticks = 0;
400832d3:	f4c351        	l32r	a5, 400805e0 <_iram_text_start+0x90>
	while (first() != NULL && first()->dticks <= announce_remaining) {
400832d6:	000c86        	j	4008330c <z_clock_announce+0x4c>
		curr_tick += dt;
400832d9:	989a      	add.n	a9, a8, a9
400832db:	31bf80        	srai	a11, a8, 31
400832de:	1a0c      	movi.n	a10, 1
400832e0:	013987        	bltu	a9, a8, 400832e5 <z_clock_announce+0x25>
400832e3:	0a0c      	movi.n	a10, 0
400832e5:	ebea      	add.n	a14, a11, a14
400832e7:	aaea      	add.n	a10, a10, a14
400832e9:	1da9      	s32i.n	a10, a13, 4
		announce_remaining -= dt;
400832eb:	c08c80        	sub	a8, a12, a8
		t->dticks = 0;
400832ee:	4249      	s32i.n	a4, a2, 16
400832f0:	5259      	s32i.n	a5, a2, 20
		remove_timeout(t);
400832f2:	02ad      	mov.n	a10, a2
		curr_tick += dt;
400832f4:	0d99      	s32i.n	a9, a13, 0
		announce_remaining -= dt;
400832f6:	006682        	s32i	a8, a6, 0
		remove_timeout(t);
400832f9:	ffdb25        	call8	400830ac <remove_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832fc:	13e630        	wsr.ps	a3
400832ff:	002010        	rsync

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
40083302:	2238      	l32i.n	a3, a2, 8
40083304:	02ad      	mov.n	a10, a2
40083306:	0003e0        	callx8	a3
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083309:	006330        	rsil	a3, 3
	return list->head == list;
4008330c:	f53c81        	l32r	a8, 400807fc <_iram_text_start+0x2ac>
4008330f:	f53dd1        	l32r	a13, 40080804 <_iram_text_start+0x2b4>
40083312:	06c8      	l32i.n	a12, a6, 0
40083314:	0828      	l32i.n	a2, a8, 0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
40083316:	31bfc0        	srai	a11, a12, 31
40083319:	0d98      	l32i.n	a9, a13, 0
4008331b:	1de8      	l32i.n	a14, a13, 4
	while (first() != NULL && first()->dticks <= announce_remaining) {
4008331d:	129c      	beqz.n	a2, 40083332 <z_clock_announce+0x72>
4008331f:	0f1287        	beq	a2, a8, 40083332 <z_clock_announce+0x72>
40083322:	52a8      	l32i.n	a10, a2, 20
40083324:	4288      	l32i.n	a8, a2, 16
40083326:	323ba7        	bltu	a11, a10, 4008335c <z_clock_announce+0x9c>
40083329:	ac9ab7        	bne	a10, a11, 400832d9 <z_clock_announce+0x19>
4008332c:	a9bc87        	bgeu	a12, a8, 400832d9 <z_clock_announce+0x19>
4008332f:	000a46        	j	4008335c <z_clock_announce+0x9c>

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
40083332:	9c9a      	add.n	a9, a12, a9
40083334:	01a022        	movi	a2, 1
40083337:	0139c7        	bltu	a9, a12, 4008333c <z_clock_announce+0x7c>
4008333a:	020c      	movi.n	a2, 0
4008333c:	80bbe0        	add	a11, a11, a14
4008333f:	8022b0        	add	a2, a2, a11
40083342:	1d29      	s32i.n	a2, a13, 4
	announce_remaining = 0;
40083344:	020c      	movi.n	a2, 0
	curr_tick += announce_remaining;
40083346:	0d99      	s32i.n	a9, a13, 0
	announce_remaining = 0;
40083348:	0629      	s32i.n	a2, a6, 0

	z_clock_set_timeout(next_timeout(), false);
4008334a:	ffd9a5        	call8	400830e4 <next_timeout>
4008334d:	02bd      	mov.n	a11, a2
4008334f:	fe2725        	call8	400815c0 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083352:	13e630        	wsr.ps	a3
40083355:	002010        	rsync

	k_spin_unlock(&timeout_lock, key);
}
40083358:	f01d      	retw.n
4008335a:	c00000        	sub	a0, a0, a0
		first()->dticks -= announce_remaining;
4008335d:	c048      	l32i.n	a4, a0, 48
4008335f:	01a052        	movi	a5, 1
40083362:	023847        	bltu	a8, a4, 40083368 <z_clock_announce+0xa8>
40083365:	00a052        	movi	a5, 0
40083368:	c0aab0        	sub	a10, a10, a11
4008336b:	c0aa50        	sub	a10, a10, a5
4008336e:	4249      	s32i.n	a4, a2, 16
40083370:	52a9      	s32i.n	a10, a2, 20
40083372:	ffef06        	j	40083332 <z_clock_announce+0x72>
40083375:	000000        	ill

40083378 <z_tick_get>:

int64_t z_tick_get(void)
{
40083378:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008337b:	006340        	rsil	a4, 3
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
4008337e:	fe2a25        	call8	40081620 <z_clock_elapsed>
40083381:	f52031        	l32r	a3, 40080804 <_iram_text_start+0x2b4>
40083384:	002322        	l32i	a2, a3, 0
40083387:	012382        	l32i	a8, a3, 4
4008338a:	802a20        	add	a2, a10, a2
4008338d:	130c      	movi.n	a3, 1
4008338f:	0132a7        	bltu	a2, a10, 40083394 <z_tick_get+0x1c>
40083392:	030c      	movi.n	a3, 0
40083394:	338a      	add.n	a3, a3, a8
	XTOS_RESTORE_INTLEVEL(key);
40083396:	13e640        	wsr.ps	a4
40083399:	002010        	rsync
	}
	return t;
}
4008339c:	f01d      	retw.n
	...

400833a0 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
400833a0:	004136        	entry	a1, 32
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
400833a3:	fffd65        	call8	40083378 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
400833a6:	0a2d      	mov.n	a2, a10
400833a8:	f01d      	retw.n
	...

400833ac <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
400833ac:	004136        	entry	a1, 32
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400833af:	120c      	movi.n	a2, 1
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400833b1:	006380        	rsil	a8, 3
	int32_t ticks = z_get_next_timeout_expiry();
400833b4:	ffeba5        	call8	40083270 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400833b7:	013ae6        	bgei	a10, 3, 400833bc <idle+0x10>
400833ba:	02ad      	mov.n	a10, a2
400833bc:	02bd      	mov.n	a11, a2
400833be:	ffec65        	call8	40083284 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
400833c1:	0008a5        	call8	4008344c <arch_cpu_idle>
400833c4:	fffa46        	j	400833b1 <idle+0x5>
	...

400833c8 <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
400833c8:	004136        	entry	a1, 32
400833cb:	0cc282        	addi	a8, a2, 12
400833ce:	20a220        	or	a10, a2, a2
	list->head = (sys_dnode_t *)list;
400833d1:	036282        	s32i	a8, a2, 12
	list->tail = (sys_dnode_t *)list;
400833d4:	4289      	s32i.n	a8, a2, 16
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
400833d6:	04cd      	mov.n	a12, a4
400833d8:	03bd      	mov.n	a11, a3
400833da:	fdca25        	call8	4008107c <sys_heap_init>
}
400833dd:	f01d      	retw.n
	...

400833e0 <statics_init>:

static int statics_init(const struct device *unused)
{
400833e0:	004136        	entry	a1, 32
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
400833e3:	f50921        	l32r	a2, 40080808 <_iram_text_start+0x2b8>
400833e6:	000386        	j	400833f8 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
400833e9:	0222c2        	l32i	a12, a2, 8
400833ec:	0122b2        	l32i	a11, a2, 4
400833ef:	20a220        	or	a10, a2, a2
400833f2:	fffd65        	call8	400833c8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
400833f5:	14c222        	addi	a2, a2, 20
400833f8:	f50431        	l32r	a3, 40080808 <_iram_text_start+0x2b8>
400833fb:	ea3237        	bltu	a2, a3, 400833e9 <statics_init+0x9>
	}
	return 0;
}
400833fe:	020c      	movi.n	a2, 0
40083400:	f01d      	retw.n
	...

40083404 <i2c_read>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
40083404:	006136        	entry	a1, 48
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
40083407:	380c      	movi.n	a8, 3
{
40083409:	02ad      	mov.n	a10, a2
4008340b:	05dd      	mov.n	a13, a5
	msg.buf = buf;
4008340d:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
4008340f:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
40083411:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083414:	2288      	l32i.n	a8, a2, 8
40083416:	1c0c      	movi.n	a12, 1
40083418:	1888      	l32i.n	a8, a8, 4
4008341a:	20b110        	or	a11, a1, a1
4008341d:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
40083420:	0a2d      	mov.n	a2, a10
40083422:	f01d      	retw.n

40083424 <i2c_write>:
{
40083424:	006136        	entry	a1, 48
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
40083427:	280c      	movi.n	a8, 2
{
40083429:	02ad      	mov.n	a10, a2
4008342b:	05dd      	mov.n	a13, a5
	msg.buf = (uint8_t *)buf;
4008342d:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
4008342f:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
40083431:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083434:	2288      	l32i.n	a8, a2, 8
40083436:	1c0c      	movi.n	a12, 1
40083438:	1888      	l32i.n	a8, a8, 4
4008343a:	20b110        	or	a11, a1, a1
4008343d:	0008e0        	callx8	a8
}
40083440:	0a2d      	mov.n	a2, a10
40083442:	f01d      	retw.n

40083444 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
40083444:	004136        	entry	a1, 32
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_SRAM_SIZE, 16);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
40083447:	f01d      	retw.n
40083449:	000000        	ill

4008344c <arch_cpu_idle>:
 */

#include <tracing/tracing.h>

void arch_cpu_idle(void)
{
4008344c:	004136        	entry	a1, 32
	sys_trace_idle();
	__asm__ volatile ("waiti 0");
4008344f:	007000        	waiti	0
}
40083452:	f01d      	retw.n

40083454 <z_xtensa_dump_stack>:
{
40083454:	004136        	entry	a1, 32
}
40083457:	f01d      	retw.n
40083459:	000000        	ill

4008345c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
4008345c:	004136        	entry	a1, 32
	while ((*s1 == *s2) && (*s1 != '\0')) {
4008345f:	0000c6        	j	40083466 <strcmp+0xa>
		s1++;
40083462:	221b      	addi.n	a2, a2, 1
		s2++;
40083464:	331b      	addi.n	a3, a3, 1
	while ((*s1 == *s2) && (*s1 != '\0')) {
40083466:	000282        	l8ui	a8, a2, 0
40083469:	000392        	l8ui	a9, a3, 0
4008346c:	029897        	bne	a8, a9, 40083472 <strcmp+0x16>
4008346f:	fef856        	bnez	a8, 40083462 <strcmp+0x6>
	}

	return *s1 - *s2;
}
40083472:	c02890        	sub	a2, a8, a9
40083475:	f01d      	retw.n
	...

40083478 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
40083478:	004136        	entry	a1, 32
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
4008347b:	74b030        	extui	a11, a3, 0, 8

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
4008347e:	028d      	mov.n	a8, a2
40083480:	000286        	j	4008348e <memset+0x16>
40083483:	441600        	extui	a1, a0, 6, 5
		if (n == 0) {
40083486:	48b204        	lsi	f0, a2, 0x120
			return buf;
		}
		*(d_byte++) = c_byte;
40083489:	440b00        	extui	a0, a0, 11, 5
		n--;
4008348c:	881b      	addi.n	a8, a8, 1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
4008348e:	149080        	extui	a9, a8, 0, 2
40083491:	08cd      	mov.n	a12, a8
40083493:	fed956        	bnez	a9, 40083484 <memset+0xc>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
40083496:	743030        	extui	a3, a3, 0, 8

	c_word |= c_word << 8;
40083499:	11a380        	slli	a10, a3, 8
4008349c:	203a30        	or	a3, a10, a3
	c_word |= c_word << 16;
4008349f:	11a300        	slli	a10, a3, 16
400834a2:	203a30        	or	a3, a10, a3
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
400834a5:	41a240        	srli	a10, a4, 2
400834a8:	11dae0        	slli	a13, a10, 2
400834ab:	ed8a      	add.n	a14, a13, a8
400834ad:	0000c6        	j	400834b4 <memset+0x3c>
		*(d_word++) = c_word;
400834b0:	0839      	s32i.n	a3, a8, 0
		n -= sizeof(mem_word_t);
400834b2:	884b      	addi.n	a8, a8, 4
	while (n >= sizeof(mem_word_t)) {
400834b4:	f898e7        	bne	a8, a14, 400834b0 <memset+0x38>
400834b7:	11aae0        	slli	a10, a10, 2
400834ba:	c044a0        	sub	a4, a4, a10
400834bd:	000206        	j	400834c9 <memset+0x51>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
400834c0:	39da      	add.n	a3, a9, a13
400834c2:	3c3a      	add.n	a3, a12, a3
400834c4:	0043b2        	s8i	a11, a3, 0
		n--;
400834c7:	991b      	addi.n	a9, a9, 1
	while (n > 0) {
400834c9:	f39497        	bne	a4, a9, 400834c0 <memset+0x48>
	}

	return buf;
}
400834cc:	f01d      	retw.n
	...

400834d0 <_stdout_hook_default>:
{
400834d0:	004136        	entry	a1, 32
}
400834d3:	f27c      	movi.n	a2, -1
400834d5:	f01d      	retw.n
	...

400834d8 <gpio_esp32_port_get_raw>:
{
400834d8:	004136        	entry	a1, 32
	*value = *data->port.input_reg;
400834db:	3288      	l32i.n	a8, a2, 12
}
400834dd:	020c      	movi.n	a2, 0
	*value = *data->port.input_reg;
400834df:	4888      	l32i.n	a8, a8, 16
400834e1:	0020c0        	memw
400834e4:	0888      	l32i.n	a8, a8, 0
400834e6:	0389      	s32i.n	a8, a3, 0
}
400834e8:	f01d      	retw.n
	...

400834ec <gpio_esp32_port_set_masked_raw>:
{
400834ec:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
400834ef:	3288      	l32i.n	a8, a2, 12
400834f1:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg & ~mask)
400834f4:	5888      	l32i.n	a8, a8, 20
400834f6:	0020c0        	memw
400834f9:	0898      	l32i.n	a9, a8, 0
				 | (mask & value);
400834fb:	304940        	xor	a4, a9, a4
400834fe:	104430        	and	a4, a4, a3
40083501:	304490        	xor	a4, a4, a9
	*data->port.output_reg = (*data->port.output_reg & ~mask)
40083504:	0020c0        	memw
40083507:	0849      	s32i.n	a4, a8, 0
	XTOS_RESTORE_INTLEVEL(key);
40083509:	13e6a0        	wsr.ps	a10
4008350c:	002010        	rsync
}
4008350f:	020c      	movi.n	a2, 0
40083511:	f01d      	retw.n
	...

40083514 <gpio_esp32_port_set_bits_raw>:
{
40083514:	004136        	entry	a1, 32
	*data->port.set_reg = pins;
40083517:	3288      	l32i.n	a8, a2, 12
}
40083519:	020c      	movi.n	a2, 0
	*data->port.set_reg = pins;
4008351b:	2888      	l32i.n	a8, a8, 8
4008351d:	0020c0        	memw
40083520:	0839      	s32i.n	a3, a8, 0
}
40083522:	f01d      	retw.n

40083524 <gpio_esp32_port_clear_bits_raw>:
{
40083524:	004136        	entry	a1, 32
	*data->port.clear_reg = pins;
40083527:	3288      	l32i.n	a8, a2, 12
}
40083529:	020c      	movi.n	a2, 0
	*data->port.clear_reg = pins;
4008352b:	3888      	l32i.n	a8, a8, 12
4008352d:	0020c0        	memw
40083530:	0839      	s32i.n	a3, a8, 0
}
40083532:	f01d      	retw.n

40083534 <gpio_esp32_port_toggle_bits>:
{
40083534:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
40083537:	3288      	l32i.n	a8, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083539:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg ^ pins);
4008353c:	5898      	l32i.n	a9, a8, 20
4008353e:	0020c0        	memw
40083541:	0988      	l32i.n	a8, a9, 0
40083543:	308830        	xor	a8, a8, a3
40083546:	0020c0        	memw
40083549:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
4008354b:	13e6a0        	wsr.ps	a10
4008354e:	002010        	rsync
}
40083551:	020c      	movi.n	a2, 0
40083553:	f01d      	retw.n
40083555:	000000        	ill

40083558 <gpio_esp32_manage_callback>:
{
40083558:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = dev->data;
4008355b:	3288      	l32i.n	a8, a2, 12
{
4008355d:	744040        	extui	a4, a4, 0, 8
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
40083560:	9828      	l32i.n	a2, a8, 36
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
40083562:	090c      	movi.n	a9, 0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
40083564:	42cc      	bnez.n	a2, 4008356c <gpio_esp32_manage_callback+0x14>
40083566:	000fc6        	j	400835a9 <gpio_esp32_manage_callback+0x51>
40083569:	0a2d00        	add.s	f2, f13, f0
4008356c:	209327        	bne	a3, a2, 40083590 <gpio_esp32_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
4008356f:	0328      	l32i.n	a2, a3, 0
40083571:	b9cc      	bnez.n	a9, 40083580 <gpio_esp32_manage_callback+0x28>
40083573:	a898      	l32i.n	a9, a8, 40
	list->head = node;
40083575:	9829      	s32i.n	a2, a8, 36
Z_GENLIST_REMOVE(slist, snode)
40083577:	0e9397        	bne	a3, a9, 40083589 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
4008357a:	a829      	s32i.n	a2, a8, 40
4008357c:	000246        	j	40083589 <gpio_esp32_manage_callback+0x31>
4008357f:	092900        	l32e	a0, a9, -56
Z_GENLIST_REMOVE(slist, snode)
40083582:	a828      	l32i.n	a2, a8, 40
40083584:	019327        	bne	a3, a2, 40083589 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
40083587:	a899      	s32i.n	a9, a8, 40
	parent->next = child;
40083589:	020c      	movi.n	a2, 0
4008358b:	0329      	s32i.n	a2, a3, 0
4008358d:	000606        	j	400835a9 <gpio_esp32_manage_callback+0x51>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
40083590:	02a8      	l32i.n	a10, a2, 0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
40083592:	029d      	mov.n	a9, a2
40083594:	fd2a56        	bnez	a10, 4008356a <gpio_esp32_manage_callback+0x12>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
			if (!set) {
				return -EINVAL;
40083597:	a26c      	movi.n	a2, -22
			if (!set) {
40083599:	017416        	beqz	a4, 400835b4 <gpio_esp32_manage_callback+0x5c>
Z_GENLIST_PREPEND(slist, snode)
4008359c:	9828      	l32i.n	a2, a8, 36
	parent->next = child;
4008359e:	0329      	s32i.n	a2, a3, 0
Z_GENLIST_PREPEND(slist, snode)
400835a0:	a828      	l32i.n	a2, a8, 40
	list->head = node;
400835a2:	9839      	s32i.n	a3, a8, 36
Z_GENLIST_PREPEND(slist, snode)
400835a4:	42cc      	bnez.n	a2, 400835ac <gpio_esp32_manage_callback+0x54>
400835a6:	000206        	j	400835b2 <gpio_esp32_manage_callback+0x5a>
			}
		}
	}

	if (set) {
400835a9:	fef456        	bnez	a4, 4008359c <gpio_esp32_manage_callback+0x44>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
400835ac:	020c      	movi.n	a2, 0
400835ae:	000086        	j	400835b4 <gpio_esp32_manage_callback+0x5c>
400835b1:	a83900        	lsi	f0, a9, 0x2a0
}
400835b4:	f01d      	retw.n
	...

400835b8 <gpio_esp32_fire_callbacks>:
{
400835b8:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
400835bb:	3238      	l32i.n	a3, a2, 12
	uint32_t irq_status = *data->port.irq_status_reg;
400835bd:	6348      	l32i.n	a4, a3, 24
	*data->port.irq_ack_reg = irq_status;
400835bf:	7388      	l32i.n	a8, a3, 28
	uint32_t irq_status = *data->port.irq_status_reg;
400835c1:	0020c0        	memw
400835c4:	0448      	l32i.n	a4, a4, 0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
400835c6:	93b8      	l32i.n	a11, a3, 36
	*data->port.irq_ack_reg = irq_status;
400835c8:	0020c0        	memw
400835cb:	0849      	s32i.n	a4, a8, 0
400835cd:	8b9c      	beqz.n	a11, 400835e9 <gpio_esp32_fire_callbacks+0x31>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
400835cf:	0b38      	l32i.n	a3, a11, 0
		if (cb->pin_mask & pins) {
400835d1:	2bc8      	l32i.n	a12, a11, 8
400835d3:	10c4c0        	and	a12, a4, a12
400835d6:	6c8c      	beqz.n	a12, 400835e0 <gpio_esp32_fire_callbacks+0x28>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
400835d8:	1b88      	l32i.n	a8, a11, 4
400835da:	20a220        	or	a10, a2, a2
400835dd:	0008e0        	callx8	a8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
400835e0:	538c      	beqz.n	a3, 400835e9 <gpio_esp32_fire_callbacks+0x31>
400835e2:	03bd      	mov.n	a11, a3
400835e4:	0338      	l32i.n	a3, a3, 0
400835e6:	fff9c6        	j	400835d1 <gpio_esp32_fire_callbacks+0x19>
}
400835e9:	f01d      	retw.n
	...

400835ec <i2c_esp32_connect_irq_0>:
{
400835ec:	004136        	entry	a1, 32
}
400835ef:	f01d      	retw.n
400835f1:	000000        	ill

400835f4 <i2c_esp32_connect_irq_1>:
400835f4:	004136        	entry	a1, 32
400835f7:	f01d      	retw.n
400835f9:	000000        	ill

400835fc <uart_esp32_poll_in>:
{
400835fc:	004136        	entry	a1, 32
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
400835ff:	1228      	l32i.n	a2, a2, 4
40083601:	0298      	l32i.n	a9, a2, 0
		return -1;
40083603:	f27c      	movi.n	a2, -1
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
40083605:	0020c0        	memw
40083608:	7988      	l32i.n	a8, a9, 28
4008360a:	748080        	extui	a8, a8, 0, 8
4008360d:	888c      	beqz.n	a8, 40083619 <uart_esp32_poll_in+0x1d>
	*p_char = DEV_BASE(dev)->fifo;
4008360f:	0020c0        	memw
40083612:	0928      	l32i.n	a2, a9, 0
40083614:	004322        	s8i	a2, a3, 0
	return 0;
40083617:	020c      	movi.n	a2, 0
}
40083619:	f01d      	retw.n
	...

4008361c <uart_esp32_poll_out>:
{
4008361c:	004136        	entry	a1, 32
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
4008361f:	1288      	l32i.n	a8, a2, 4
{
40083621:	743030        	extui	a3, a3, 0, 8
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
40083624:	0898      	l32i.n	a9, a8, 0
40083626:	7ea0a2        	movi	a10, 126
40083629:	0020c0        	memw
4008362c:	7988      	l32i.n	a8, a9, 28
4008362e:	758080        	extui	a8, a8, 16, 8
40083631:	f43a87        	bltu	a10, a8, 40083629 <uart_esp32_poll_out+0xd>
	DEV_BASE(dev)->fifo = (uint32_t)c;
40083634:	0020c0        	memw
40083637:	0939      	s32i.n	a3, a9, 0
}
40083639:	f01d      	retw.n
	...

4008363c <uart_esp32_err_check>:
{
4008363c:	004136        	entry	a1, 32
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
4008363f:	1228      	l32i.n	a2, a2, 4
40083641:	0288      	l32i.n	a8, a2, 0
40083643:	0020c0        	memw
40083646:	2828      	l32i.n	a2, a8, 8
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
40083648:	0020c0        	memw
4008364b:	2888      	l32i.n	a8, a8, 8
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
4008364d:	412220        	srli	a2, a2, 2
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
40083650:	418380        	srli	a8, a8, 3
40083653:	202280        	or	a2, a2, a8
}
40083656:	042020        	extui	a2, a2, 0, 1
40083659:	f01d      	retw.n
	...

4008365c <uart_esp32_config_get>:
{
4008365c:	004136        	entry	a1, 32
	cfg->baudrate = data->uart_config.baudrate;
4008365f:	3288      	l32i.n	a8, a2, 12
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083661:	1228      	l32i.n	a2, a2, 4
	cfg->baudrate = data->uart_config.baudrate;
40083663:	0888      	l32i.n	a8, a8, 0
		cfg->parity = UART_CFG_PARITY_NONE;
40083665:	090c      	movi.n	a9, 0
	cfg->baudrate = data->uart_config.baudrate;
40083667:	0389      	s32i.n	a8, a3, 0
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083669:	0288      	l32i.n	a8, a2, 0
4008366b:	0020c0        	memw
4008366e:	082822        	l32i	a2, a8, 32
40083671:	076217        	bbci	a2, 1, 4008367c <uart_esp32_config_get+0x20>
		cfg->parity = UART_GET_PARITY(DEV_BASE(dev)->conf0);
40083674:	0020c0        	memw
40083677:	8898      	l32i.n	a9, a8, 32
40083679:	049090        	extui	a9, a9, 0, 1
4008367c:	044392        	s8i	a9, a3, 4
	cfg->stop_bits = UART_GET_STOP_BITS(DEV_BASE(dev)->conf0);
4008367f:	0020c0        	memw
40083682:	8898      	l32i.n	a9, a8, 32
40083684:	149490        	extui	a9, a9, 4, 2
40083687:	054392        	s8i	a9, a3, 5
	cfg->data_bits = UART_GET_DATA_BITS(DEV_BASE(dev)->conf0);
4008368a:	0020c0        	memw
4008368d:	082892        	l32i	a9, a8, 32
40083690:	149290        	extui	a9, a9, 2, 2
40083693:	064392        	s8i	a9, a3, 6
	if (UART_GET_TX_FLOW(DEV_BASE(dev)->conf0)) {
40083696:	0020c0        	memw
40083699:	8828      	l32i.n	a2, a8, 32
4008369b:	0562f7        	bbci	a2, 15, 400836a4 <uart_esp32_config_get+0x48>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RTS_CTS;
4008369e:	01a022        	movi	a2, 1
400836a1:	074322        	s8i	a2, a3, 7
	if (UART_GET_RX_FLOW(DEV_BASE(dev)->conf1)) {
400836a4:	0020c0        	memw
400836a7:	9828      	l32i.n	a2, a8, 36
400836a9:	047277        	bbci	a2, 23, 400836b1 <uart_esp32_config_get+0x55>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_DTR_DSR;
400836ac:	220c      	movi.n	a2, 2
400836ae:	074322        	s8i	a2, a3, 7
}
400836b1:	020c      	movi.n	a2, 0
400836b3:	f01d      	retw.n
400836b5:	000000        	ill

400836b8 <arch_system_halt>:
{
400836b8:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400836bb:	006380        	rsil	a8, 3
	for (;;) {
400836be:	ffff06        	j	400836be <arch_system_halt+0x6>
400836c1:	000000        	ill

400836c4 <sys_dlist_remove>:
{
400836c4:	004136        	entry	a1, 32
	node->prev->next = node->next;
400836c7:	0288      	l32i.n	a8, a2, 0
400836c9:	1298      	l32i.n	a9, a2, 4
400836cb:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
400836cd:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
400836cf:	080c      	movi.n	a8, 0
400836d1:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
400836d3:	1289      	s32i.n	a8, a2, 4
	sys_dnode_init(node);
}
400836d5:	f01d      	retw.n
	...

400836d8 <z_priq_dumb_best>:
{
400836d8:	004136        	entry	a1, 32
	return list->head == list;
400836db:	0288      	l32i.n	a8, a2, 0
	if (n != NULL) {
400836dd:	188c      	beqz.n	a8, 400836e2 <z_priq_dumb_best+0xa>
400836df:	019287        	bne	a2, a8, 400836e4 <z_priq_dumb_best+0xc>
	struct k_thread *thread = NULL;
400836e2:	080c      	movi.n	a8, 0
}
400836e4:	082d      	mov.n	a2, a8
400836e6:	f01d      	retw.n

400836e8 <z_impl_k_sem_init>:
{
400836e8:	004136        	entry	a1, 32
	CHECKIF(limit == 0U || initial_count > limit) {
400836eb:	180c      	movi.n	a8, 1
400836ed:	090c      	movi.n	a9, 0
400836ef:	938940        	movnez	a8, a9, a4
400836f2:	748080        	extui	a8, a8, 0, 8
400836f5:	0f9897        	bne	a8, a9, 40083708 <z_impl_k_sem_init+0x20>
400836f8:	0c3437        	bltu	a4, a3, 40083708 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
400836fb:	2239      	s32i.n	a3, a2, 8
	sem->limit = limit;
400836fd:	3249      	s32i.n	a4, a2, 12
	list->head = (sys_dnode_t *)list;
400836ff:	0229      	s32i.n	a2, a2, 0
	list->tail = (sys_dnode_t *)list;
40083701:	1229      	s32i.n	a2, a2, 4
	return 0;
40083703:	082d      	mov.n	a2, a8
40083705:	000046        	j	4008370a <z_impl_k_sem_init+0x22>
		return -EINVAL;
40083708:	a26c      	movi.n	a2, -22
}
4008370a:	f01d      	retw.n

4008370c <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
4008370c:	004136        	entry	a1, 32
/* size of the struct k_thread structure without save area for coproc regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 sizeof(struct k_thread) - sizeof(tCoopCoprocReg) -
			 sizeof(tPreempCoprocReg) + XT_CP_DESCR_SIZE);

GEN_ABS_SYM_END
4008370f:	f01d      	retw.n
40083711:	000000        	ill

40083714 <__udivdi3>:
40083714:	004136        	entry	a1, 32
40083717:	03dd      	mov.n	a13, a3
40083719:	04ad      	mov.n	a10, a4
4008371b:	053d      	mov.n	a3, a5
4008371d:	02cd      	mov.n	a12, a2
4008371f:	0d9d      	mov.n	a9, a13
40083721:	184556        	bnez	a5, 400838a9 <__udivdi3+0x195>
40083724:	023d47        	bltu	a13, a4, 4008372a <__udivdi3+0x16>
40083727:	002086        	j	400837ad <__udivdi3+0x99>
4008372a:	40f420        	nsau	a2, a4
4008372d:	c29c      	beqz.n	a2, 4008374d <__udivdi3+0x39>
4008372f:	608020        	neg	a8, a2
40083732:	400800        	ssr	a8
40083735:	9180c0        	srl	a8, a12
40083738:	401200        	ssl	a2
4008373b:	a19d00        	sll	a9, a13
4008373e:	401200        	ssl	a2
40083741:	a1a400        	sll	a10, a4
40083744:	209890        	or	a9, a8, a9
40083747:	401200        	ssl	a2
4008374a:	a1cc00        	sll	a12, a12
4008374d:	f580a0        	extui	a8, a10, 16, 16
40083750:	e2d980        	remu	a13, a9, a8
40083753:	f440a0        	extui	a4, a10, 0, 16
40083756:	c29980        	quou	a9, a9, a8
40083759:	11dd00        	slli	a13, a13, 16
4008375c:	f5b0c0        	extui	a11, a12, 16, 16
4008375f:	822490        	mull	a2, a4, a9
40083762:	20bdb0        	or	a11, a13, a11
40083765:	13bb27        	bgeu	a11, a2, 4008377c <__udivdi3+0x68>
40083768:	bbaa      	add.n	a11, a11, a10
4008376a:	590b      	addi.n	a5, a9, -1
4008376c:	0a3ba7        	bltu	a11, a10, 4008377a <__udivdi3+0x66>
4008376f:	07bb27        	bgeu	a11, a2, 4008377a <__udivdi3+0x66>
40083772:	fec992        	addi	a9, a9, -2
40083775:	bbaa      	add.n	a11, a11, a10
40083777:	000046        	j	4008377c <__udivdi3+0x68>
4008377a:	059d      	mov.n	a9, a5
4008377c:	c0bb20        	sub	a11, a11, a2
4008377f:	e22b80        	remu	a2, a11, a8
40083782:	c2bb80        	quou	a11, a11, a8
40083785:	112200        	slli	a2, a2, 16
40083788:	f4c0c0        	extui	a12, a12, 0, 16
4008378b:	8244b0        	mull	a4, a4, a11
4008378e:	20c2c0        	or	a12, a2, a12
40083791:	0fbc47        	bgeu	a12, a4, 400837a4 <__udivdi3+0x90>
40083794:	caca      	add.n	a12, a10, a12
40083796:	ffcb22        	addi	a2, a11, -1
40083799:	05bc47        	bgeu	a12, a4, 400837a2 <__udivdi3+0x8e>
4008379c:	fecbb2        	addi	a11, a11, -2
4008379f:	01bca7        	bgeu	a12, a10, 400837a4 <__udivdi3+0x90>
400837a2:	02bd      	mov.n	a11, a2
400837a4:	118900        	slli	a8, a9, 16
400837a7:	2088b0        	or	a8, a8, a11
400837aa:	007406        	j	4008397e <__udivdi3+0x26a>
400837ad:	34cc      	bnez.n	a4, 400837b4 <__udivdi3+0xa0>
400837af:	130c      	movi.n	a3, 1
400837b1:	c2a340        	quou	a10, a3, a4
400837b4:	40fa50        	nsau	a5, a10
400837b7:	c08da0        	sub	a8, a13, a10
400837ba:	130c      	movi.n	a3, 1
400837bc:	089516        	beqz	a5, 40083849 <__udivdi3+0x135>
400837bf:	042c      	movi.n	a4, 32
400837c1:	c04450        	sub	a4, a4, a5
400837c4:	401500        	ssl	a5
400837c7:	a1aa00        	sll	a10, a10
400837ca:	400400        	ssr	a4
400837cd:	9130d0        	srl	a3, a13
400837d0:	401500        	ssl	a5
400837d3:	a18d00        	sll	a8, a13
400837d6:	400400        	ssr	a4
400837d9:	914020        	srl	a4, a2
400837dc:	401500        	ssl	a5
400837df:	a1c200        	sll	a12, a2
400837e2:	f520a0        	extui	a2, a10, 16, 16
400837e5:	204480        	or	a4, a4, a8
400837e8:	e2b320        	remu	a11, a3, a2
400837eb:	f480a0        	extui	a8, a10, 0, 16
400837ee:	c23320        	quou	a3, a3, a2
400837f1:	11bb00        	slli	a11, a11, 16
400837f4:	f59040        	extui	a9, a4, 16, 16
400837f7:	825830        	mull	a5, a8, a3
400837fa:	209b90        	or	a9, a11, a9
400837fd:	13b957        	bgeu	a9, a5, 40083814 <__udivdi3+0x100>
40083800:	99aa      	add.n	a9, a9, a10
40083802:	b30b      	addi.n	a11, a3, -1
40083804:	0a39a7        	bltu	a9, a10, 40083812 <__udivdi3+0xfe>
40083807:	07b957        	bgeu	a9, a5, 40083812 <__udivdi3+0xfe>
4008380a:	fec332        	addi	a3, a3, -2
4008380d:	99aa      	add.n	a9, a9, a10
4008380f:	000046        	j	40083814 <__udivdi3+0x100>
40083812:	0b3d      	mov.n	a3, a11
40083814:	c09950        	sub	a9, a9, a5
40083817:	e2b920        	remu	a11, a9, a2
4008381a:	c29920        	quou	a9, a9, a2
4008381d:	822890        	mull	a2, a8, a9
40083820:	11bb00        	slli	a11, a11, 16
40083823:	f48040        	extui	a8, a4, 0, 16
40083826:	208b80        	or	a8, a11, a8
40083829:	13b827        	bgeu	a8, a2, 40083840 <__udivdi3+0x12c>
4008382c:	88aa      	add.n	a8, a8, a10
4008382e:	490b      	addi.n	a4, a9, -1
40083830:	0a38a7        	bltu	a8, a10, 4008383e <__udivdi3+0x12a>
40083833:	07b827        	bgeu	a8, a2, 4008383e <__udivdi3+0x12a>
40083836:	fec992        	addi	a9, a9, -2
40083839:	88aa      	add.n	a8, a8, a10
4008383b:	000046        	j	40083840 <__udivdi3+0x12c>
4008383e:	049d      	mov.n	a9, a4
40083840:	113300        	slli	a3, a3, 16
40083843:	c08820        	sub	a8, a8, a2
40083846:	203390        	or	a3, a3, a9
40083849:	f550a0        	extui	a5, a10, 16, 16
4008384c:	e2b850        	remu	a11, a8, a5
4008384f:	f440a0        	extui	a4, a10, 0, 16
40083852:	c28850        	quou	a8, a8, a5
40083855:	11bb00        	slli	a11, a11, 16
40083858:	f590c0        	extui	a9, a12, 16, 16
4008385b:	822480        	mull	a2, a4, a8
4008385e:	209b90        	or	a9, a11, a9
40083861:	13b927        	bgeu	a9, a2, 40083878 <__udivdi3+0x164>
40083864:	99aa      	add.n	a9, a9, a10
40083866:	b80b      	addi.n	a11, a8, -1
40083868:	0a39a7        	bltu	a9, a10, 40083876 <__udivdi3+0x162>
4008386b:	07b927        	bgeu	a9, a2, 40083876 <__udivdi3+0x162>
4008386e:	fec882        	addi	a8, a8, -2
40083871:	99aa      	add.n	a9, a9, a10
40083873:	000046        	j	40083878 <__udivdi3+0x164>
40083876:	0b8d      	mov.n	a8, a11
40083878:	c09920        	sub	a9, a9, a2
4008387b:	e22950        	remu	a2, a9, a5
4008387e:	c29950        	quou	a9, a9, a5
40083881:	112200        	slli	a2, a2, 16
40083884:	f4c0c0        	extui	a12, a12, 0, 16
40083887:	824490        	mull	a4, a4, a9
4008388a:	20c2c0        	or	a12, a2, a12
4008388d:	0fbc47        	bgeu	a12, a4, 400838a0 <__udivdi3+0x18c>
40083890:	caca      	add.n	a12, a10, a12
40083892:	ffc922        	addi	a2, a9, -1
40083895:	053ca7        	bltu	a12, a10, 4008389e <__udivdi3+0x18a>
40083898:	fec992        	addi	a9, a9, -2
4008389b:	013c47        	bltu	a12, a4, 400838a0 <__udivdi3+0x18c>
4008389e:	029d      	mov.n	a9, a2
400838a0:	118800        	slli	a8, a8, 16
400838a3:	208890        	or	a8, a8, a9
400838a6:	003506        	j	4008397e <__udivdi3+0x26a>
400838a9:	030c      	movi.n	a3, 0
400838ab:	038d      	mov.n	a8, a3
400838ad:	02bd57        	bgeu	a13, a5, 400838b3 <__udivdi3+0x19f>
400838b0:	003286        	j	4008397e <__udivdi3+0x26a>
400838b3:	40f5b0        	nsau	a11, a5
400838b6:	179b37        	bne	a11, a3, 400838d1 <__udivdi3+0x1bd>
400838b9:	180c      	movi.n	a8, 1
400838bb:	0235d7        	bltu	a5, a13, 400838c1 <__udivdi3+0x1ad>
400838be:	208bb0        	or	a8, a11, a11
400838c1:	130c      	movi.n	a3, 1
400838c3:	01b247        	bgeu	a2, a4, 400838c8 <__udivdi3+0x1b4>
400838c6:	030c      	movi.n	a3, 0
400838c8:	208830        	or	a8, a8, a3
400838cb:	748080        	extui	a8, a8, 0, 8
400838ce:	002a86        	j	4008397c <__udivdi3+0x268>
400838d1:	092c      	movi.n	a9, 32
400838d3:	c099b0        	sub	a9, a9, a11
400838d6:	400900        	ssr	a9
400838d9:	913040        	srl	a3, a4
400838dc:	401b00        	ssl	a11
400838df:	a15500        	sll	a5, a5
400838e2:	205350        	or	a5, a3, a5
400838e5:	400900        	ssr	a9
400838e8:	9180d0        	srl	a8, a13
400838eb:	401b00        	ssl	a11
400838ee:	a13d00        	sll	a3, a13
400838f1:	400900        	ssr	a9
400838f4:	919020        	srl	a9, a2
400838f7:	f5d050        	extui	a13, a5, 16, 16
400838fa:	203930        	or	a3, a9, a3
400838fd:	f4c050        	extui	a12, a5, 0, 16
40083900:	e298d0        	remu	a9, a8, a13
40083903:	c288d0        	quou	a8, a8, a13
40083906:	119900        	slli	a9, a9, 16
40083909:	f5e030        	extui	a14, a3, 16, 16
4008390c:	82ac80        	mull	a10, a12, a8
4008390f:	2099e0        	or	a9, a9, a14
40083912:	401b00        	ssl	a11
40083915:	a14400        	sll	a4, a4
40083918:	14b9a7        	bgeu	a9, a10, 40083930 <__udivdi3+0x21c>
4008391b:	995a      	add.n	a9, a9, a5
4008391d:	e80b      	addi.n	a14, a8, -1
4008391f:	0bb9a7        	bgeu	a9, a10, 4008392e <__udivdi3+0x21a>
40083922:	083957        	bltu	a9, a5, 4008392e <__udivdi3+0x21a>
40083925:	fec882        	addi	a8, a8, -2
40083928:	995a      	add.n	a9, a9, a5
4008392a:	000086        	j	40083930 <__udivdi3+0x21c>
4008392d:	0e8d00        	lsi	f0, a13, 56
40083930:	c0a9a0        	sub	a10, a9, a10
40083933:	e29ad0        	remu	a9, a10, a13
40083936:	c2aad0        	quou	a10, a10, a13
40083939:	119900        	slli	a9, a9, 16
4008393c:	f43030        	extui	a3, a3, 0, 16
4008393f:	82cca0        	mull	a12, a12, a10
40083942:	203930        	or	a3, a9, a3
40083945:	13b3c7        	bgeu	a3, a12, 4008395c <__udivdi3+0x248>
40083948:	335a      	add.n	a3, a3, a5
4008394a:	9a0b      	addi.n	a9, a10, -1
4008394c:	0a3357        	bltu	a3, a5, 4008395a <__udivdi3+0x246>
4008394f:	07b3c7        	bgeu	a3, a12, 4008395a <__udivdi3+0x246>
40083952:	fecaa2        	addi	a10, a10, -2
40083955:	335a      	add.n	a3, a3, a5
40083957:	000046        	j	4008395c <__udivdi3+0x248>
4008395a:	09ad      	mov.n	a10, a9
4008395c:	118800        	slli	a8, a8, 16
4008395f:	2088a0        	or	a8, a8, a10
40083962:	825840        	mull	a5, a8, a4
40083965:	a24840        	muluh	a4, a8, a4
40083968:	c033c0        	sub	a3, a3, a12
4008396b:	0b3347        	bltu	a3, a4, 4008397a <__udivdi3+0x266>
4008396e:	401b00        	ssl	a11
40083971:	a12200        	sll	a2, a2
40083974:	04b257        	bgeu	a2, a5, 4008397c <__udivdi3+0x268>
40083977:	019347        	bne	a3, a4, 4008397c <__udivdi3+0x268>
4008397a:	880b      	addi.n	a8, a8, -1
4008397c:	030c      	movi.n	a3, 0
4008397e:	082d      	mov.n	a2, a8
40083980:	f01d      	retw.n
	...

40083984 <__umoddi3>:
40083984:	004136        	entry	a1, 32
40083987:	04bd      	mov.n	a11, a4
40083989:	208220        	or	a8, a2, a2
4008398c:	039d      	mov.n	a9, a3
4008398e:	152556        	bnez	a5, 40083ae4 <__umoddi3+0x160>
40083991:	71b347        	bgeu	a3, a4, 40083a06 <__umoddi3+0x82>
40083994:	40f4a0        	nsau	a10, a4
40083997:	01da16        	beqz	a10, 400839b8 <__umoddi3+0x34>
4008399a:	401a00        	ssl	a10
4008399d:	a19300        	sll	a9, a3
400839a0:	6030a0        	neg	a3, a10
400839a3:	400300        	ssr	a3
400839a6:	913020        	srl	a3, a2
400839a9:	401a00        	ssl	a10
400839ac:	a1b400        	sll	a11, a4
400839af:	209390        	or	a9, a3, a9
400839b2:	401a00        	ssl	a10
400839b5:	a18200        	sll	a8, a2
400839b8:	f540b0        	extui	a4, a11, 16, 16
400839bb:	e23940        	remu	a3, a9, a4
400839be:	f420b0        	extui	a2, a11, 0, 16
400839c1:	c29940        	quou	a9, a9, a4
400839c4:	113300        	slli	a3, a3, 16
400839c7:	f55080        	extui	a5, a8, 16, 16
400839ca:	829290        	mull	a9, a2, a9
400839cd:	203350        	or	a3, a3, a5
400839d0:	09b397        	bgeu	a3, a9, 400839dd <__umoddi3+0x59>
400839d3:	33ba      	add.n	a3, a3, a11
400839d5:	0433b7        	bltu	a3, a11, 400839dd <__umoddi3+0x59>
400839d8:	01b397        	bgeu	a3, a9, 400839dd <__umoddi3+0x59>
400839db:	33ba      	add.n	a3, a3, a11
400839dd:	c09390        	sub	a9, a3, a9
400839e0:	e23940        	remu	a3, a9, a4
400839e3:	c29940        	quou	a9, a9, a4
400839e6:	829290        	mull	a9, a2, a9
400839e9:	f48080        	extui	a8, a8, 0, 16
400839ec:	112300        	slli	a2, a3, 16
400839ef:	208280        	or	a8, a2, a8
400839f2:	0ab897        	bgeu	a8, a9, 40083a00 <__umoddi3+0x7c>
400839f5:	88ba      	add.n	a8, a8, a11
400839f7:	05b897        	bgeu	a8, a9, 40083a00 <__umoddi3+0x7c>
400839fa:	0238b7        	bltu	a8, a11, 40083a00 <__umoddi3+0x7c>
400839fd:	8088b0        	add	a8, a8, a11
40083a00:	c08890        	sub	a8, a8, a9
40083a03:	003406        	j	40083ad7 <__umoddi3+0x153>
40083a06:	34cc      	bnez.n	a4, 40083a0d <__umoddi3+0x89>
40083a08:	140c      	movi.n	a4, 1
40083a0a:	c2b4b0        	quou	a11, a4, a11
40083a0d:	40fba0        	nsau	a10, a11
40083a10:	5acc      	bnez.n	a10, 40083a19 <__umoddi3+0x95>
40083a12:	c033b0        	sub	a3, a3, a11
40083a15:	001c86        	j	40083a8b <__umoddi3+0x107>
40083a18:	042c00        	extui	a2, a0, 12, 1
40083a1b:	c044a0        	sub	a4, a4, a10
40083a1e:	401a00        	ssl	a10
40083a21:	a1bb00        	sll	a11, a11
40083a24:	400400        	ssr	a4
40083a27:	915030        	srl	a5, a3
40083a2a:	f5c0b0        	extui	a12, a11, 16, 16
40083a2d:	401a00        	ssl	a10
40083a30:	a13300        	sll	a3, a3
40083a33:	400400        	ssr	a4
40083a36:	914020        	srl	a4, a2
40083a39:	204430        	or	a4, a4, a3
40083a3c:	401a00        	ssl	a10
40083a3f:	a18200        	sll	a8, a2
40083a42:	f430b0        	extui	a3, a11, 0, 16
40083a45:	e225c0        	remu	a2, a5, a12
40083a48:	c255c0        	quou	a5, a5, a12
40083a4b:	112200        	slli	a2, a2, 16
40083a4e:	f59040        	extui	a9, a4, 16, 16
40083a51:	825350        	mull	a5, a3, a5
40083a54:	202290        	or	a2, a2, a9
40083a57:	09b257        	bgeu	a2, a5, 40083a64 <__umoddi3+0xe0>
40083a5a:	22ba      	add.n	a2, a2, a11
40083a5c:	0432b7        	bltu	a2, a11, 40083a64 <__umoddi3+0xe0>
40083a5f:	01b257        	bgeu	a2, a5, 40083a64 <__umoddi3+0xe0>
40083a62:	22ba      	add.n	a2, a2, a11
40083a64:	c09250        	sub	a9, a2, a5
40083a67:	e229c0        	remu	a2, a9, a12
40083a6a:	c299c0        	quou	a9, a9, a12
40083a6d:	829390        	mull	a9, a3, a9
40083a70:	112200        	slli	a2, a2, 16
40083a73:	f43040        	extui	a3, a4, 0, 16
40083a76:	203230        	or	a3, a2, a3
40083a79:	0bb397        	bgeu	a3, a9, 40083a88 <__umoddi3+0x104>
40083a7c:	8033b0        	add	a3, a3, a11
40083a7f:	05b397        	bgeu	a3, a9, 40083a88 <__umoddi3+0x104>
40083a82:	0233b7        	bltu	a3, a11, 40083a88 <__umoddi3+0x104>
40083a85:	8033b0        	add	a3, a3, a11
40083a88:	c03390        	sub	a3, a3, a9
40083a8b:	f540b0        	extui	a4, a11, 16, 16
40083a8e:	e29340        	remu	a9, a3, a4
40083a91:	f420b0        	extui	a2, a11, 0, 16
40083a94:	c23340        	quou	a3, a3, a4
40083a97:	119900        	slli	a9, a9, 16
40083a9a:	f55080        	extui	a5, a8, 16, 16
40083a9d:	823230        	mull	a3, a2, a3
40083aa0:	209950        	or	a9, a9, a5
40083aa3:	09b937        	bgeu	a9, a3, 40083ab0 <__umoddi3+0x12c>
40083aa6:	99ba      	add.n	a9, a9, a11
40083aa8:	0439b7        	bltu	a9, a11, 40083ab0 <__umoddi3+0x12c>
40083aab:	01b937        	bgeu	a9, a3, 40083ab0 <__umoddi3+0x12c>
40083aae:	99ba      	add.n	a9, a9, a11
40083ab0:	c03930        	sub	a3, a9, a3
40083ab3:	e25340        	remu	a5, a3, a4
40083ab6:	c23340        	quou	a3, a3, a4
40083ab9:	823230        	mull	a3, a2, a3
40083abc:	f48080        	extui	a8, a8, 0, 16
40083abf:	112500        	slli	a2, a5, 16
40083ac2:	208280        	or	a8, a2, a8
40083ac5:	0bb837        	bgeu	a8, a3, 40083ad4 <__umoddi3+0x150>
40083ac8:	8088b0        	add	a8, a8, a11
40083acb:	05b837        	bgeu	a8, a3, 40083ad4 <__umoddi3+0x150>
40083ace:	0238b7        	bltu	a8, a11, 40083ad4 <__umoddi3+0x150>
40083ad1:	8088b0        	add	a8, a8, a11
40083ad4:	c08830        	sub	a8, a8, a3
40083ad7:	400a00        	ssr	a10
40083ada:	912080        	srl	a2, a8
40083add:	030c      	movi.n	a3, 0
40083adf:	004446        	j	40083bf4 <__umoddi3+0x270>
40083ae2:	570000        	lsi	f0, a0, 0x15c
40083ae5:	4602b3        	lsi	f11, a2, 0x118
40083ae8:	c00042        	l8ui	a4, a0, 192
40083aeb:	dc40f5        	call12	4005fef8 <esp32_rom_gpio_matrix_out+0x55fec>
40083aee:	37dc      	bnez.n	a7, 40083b05 <__umoddi3+0x181>
40083af0:	470235        	call12	400cab14 <_iram_text_end+0x46f1e>
40083af3:	401132        	l16ui	a3, a1, 128
40083af6:	50c082        	addi	a8, a0, 80
40083af9:	92c033        	ssip	f3, a0, 0x248
40083afc:	8701a0        	lsi	f10, a1, 0x21c
40083aff:	920232        	l8ui	a3, a2, 146
40083b02:	9000a0        	addx2	a0, a0, a10
40083b05:	2dc093        	ssip	f9, a0, 180
40083b08:	3d08      	l32i.n	a0, a13, 12
40083b0a:	4609      	s32i.n	a0, a6, 16
40083b0c:	0039      	s32i.n	a3, a0, 0
40083b0e:	092c      	movi.n	a9, 32
40083b10:	c099c0        	sub	a9, a9, a12
40083b13:	400900        	ssr	a9
40083b16:	91a040        	srl	a10, a4
40083b19:	401c00        	ssl	a12
40083b1c:	a15500        	sll	a5, a5
40083b1f:	205a50        	or	a5, a10, a5
40083b22:	400900        	ssr	a9
40083b25:	91d020        	srl	a13, a2
40083b28:	400900        	ssr	a9
40083b2b:	91a030        	srl	a10, a3
40083b2e:	f5e050        	extui	a14, a5, 16, 16
40083b31:	401c00        	ssl	a12
40083b34:	a13300        	sll	a3, a3
40083b37:	20dd30        	or	a13, a13, a3
40083b3a:	e2bae0        	remu	a11, a10, a14
40083b3d:	f43050        	extui	a3, a5, 0, 16
40083b40:	c2aae0        	quou	a10, a10, a14
40083b43:	11bb00        	slli	a11, a11, 16
40083b46:	f5f0d0        	extui	a15, a13, 16, 16
40083b49:	8283a0        	mull	a8, a3, a10
40083b4c:	20bbf0        	or	a11, a11, a15
40083b4f:	401c00        	ssl	a12
40083b52:	a14400        	sll	a4, a4
40083b55:	401c00        	ssl	a12
40083b58:	a12200        	sll	a2, a2
40083b5b:	15bb87        	bgeu	a11, a8, 40083b74 <__umoddi3+0x1f0>
40083b5e:	bb5a      	add.n	a11, a11, a5
40083b60:	fa0b      	addi.n	a15, a10, -1
40083b62:	0c3b57        	bltu	a11, a5, 40083b72 <__umoddi3+0x1ee>
40083b65:	09bb87        	bgeu	a11, a8, 40083b72 <__umoddi3+0x1ee>
40083b68:	fecaa2        	addi	a10, a10, -2
40083b6b:	bb5a      	add.n	a11, a11, a5
40083b6d:	0000c6        	j	40083b74 <__umoddi3+0x1f0>
40083b70:	ad0000        	lsi	f0, a0, 0x2b4
40083b73:	0f          	.byte 0xf
40083b74:	c0bb80        	sub	a11, a11, a8
40083b77:	e28be0        	remu	a8, a11, a14
40083b7a:	c2bbe0        	quou	a11, a11, a14
40083b7d:	82e3b0        	mull	a14, a3, a11
40083b80:	118800        	slli	a8, a8, 16
40083b83:	f430d0        	extui	a3, a13, 0, 16
40083b86:	203830        	or	a3, a8, a3
40083b89:	13b3e7        	bgeu	a3, a14, 40083ba0 <__umoddi3+0x21c>
40083b8c:	335a      	add.n	a3, a3, a5
40083b8e:	8b0b      	addi.n	a8, a11, -1
40083b90:	0ab3e7        	bgeu	a3, a14, 40083b9e <__umoddi3+0x21a>
40083b93:	073357        	bltu	a3, a5, 40083b9e <__umoddi3+0x21a>
40083b96:	fecbb2        	addi	a11, a11, -2
40083b99:	335a      	add.n	a3, a3, a5
40083b9b:	000046        	j	40083ba0 <__umoddi3+0x21c>
40083b9e:	08bd      	mov.n	a11, a8
40083ba0:	11aa00        	slli	a10, a10, 16
40083ba3:	20aab0        	or	a10, a10, a11
40083ba6:	82da40        	mull	a13, a10, a4
40083ba9:	a2aa40        	muluh	a10, a10, a4
40083bac:	c033e0        	sub	a3, a3, a14
40083baf:	0abd      	mov.n	a11, a10
40083bb1:	0d8d      	mov.n	a8, a13
40083bb3:	0533a7        	bltu	a3, a10, 40083bbc <__umoddi3+0x238>
40083bb6:	1493a7        	bne	a3, a10, 40083bce <__umoddi3+0x24a>
40083bb9:	11b2d7        	bgeu	a2, a13, 40083bce <__umoddi3+0x24a>
40083bbc:	c04d40        	sub	a4, a13, a4
40083bbf:	c0aa50        	sub	a10, a10, a5
40083bc2:	1b0c      	movi.n	a11, 1
40083bc4:	013d47        	bltu	a13, a4, 40083bc9 <__umoddi3+0x245>
40083bc7:	0b0c      	movi.n	a11, 0
40083bc9:	c0bab0        	sub	a11, a10, a11
40083bcc:	048d      	mov.n	a8, a4
40083bce:	c04280        	sub	a4, a2, a8
40083bd1:	c033b0        	sub	a3, a3, a11
40083bd4:	150c      	movi.n	a5, 1
40083bd6:	023247        	bltu	a2, a4, 40083bdc <__umoddi3+0x258>
40083bd9:	00a052        	movi	a5, 0
40083bdc:	c03350        	sub	a3, a3, a5
40083bdf:	401900        	ssl	a9
40083be2:	a18300        	sll	a8, a3
40083be5:	400c00        	ssr	a12
40083be8:	912040        	srl	a2, a4
40083beb:	202820        	or	a2, a8, a2
40083bee:	400c00        	ssr	a12
40083bf1:	913030        	srl	a3, a3
40083bf4:	f01d      	retw.n
